<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetZip.1.10.1.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:Ionic.BZip2.Fakes.ShimBZip2InputStream">
            <summary>Tipo shim di Ionic.BZip2.BZip2InputStream</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.ShimBZip2InputStream.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.ShimBZip2InputStream.#ctor(Ionic.BZip2.BZip2InputStream)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.CanReadGet">
            <summary>Imposta shim di BZip2InputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.CanSeekGet">
            <summary>Imposta shim di BZip2InputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.CanWriteGet">
            <summary>Imposta shim di BZip2InputStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.CheckMagicCharCharInt32">
            <summary>Imposta shim di BZip2InputStream.CheckMagicChar(Char expected, Int32 position)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.Close">
            <summary>Imposta shim di BZip2InputStream.Close()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.DisposeBoolean">
            <summary>Imposta shim di BZip2InputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.EndBlock">
            <summary>Imposta shim di BZip2InputStream.EndBlock()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.Flush">
            <summary>Imposta shim di BZip2InputStream.Flush()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.GetBitsInt32">
            <summary>Imposta shim di BZip2InputStream.GetBits(Int32 n)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.InitBlock">
            <summary>Imposta shim di BZip2InputStream.InitBlock()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.LengthGet">
            <summary>Imposta shim di BZip2InputStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.MakeMaps">
            <summary>Imposta shim di BZip2InputStream.MakeMaps()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.PositionGet">
            <summary>Imposta shim di BZip2InputStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.PositionSetInt64">
            <summary>Imposta shim di BZip2InputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.ReadByte">
            <summary>Imposta shim di BZip2InputStream.ReadByte()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Imposta shim di BZip2InputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Imposta shim di BZip2InputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetLengthInt64">
            <summary>Imposta shim di BZip2InputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetupBlock">
            <summary>Imposta shim di BZip2InputStream.SetupBlock()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetupNoRandPartA">
            <summary>Imposta shim di BZip2InputStream.SetupNoRandPartA()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetupNoRandPartB">
            <summary>Imposta shim di BZip2InputStream.SetupNoRandPartB()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetupNoRandPartC">
            <summary>Imposta shim di BZip2InputStream.SetupNoRandPartC()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetupRandPartA">
            <summary>Imposta shim di BZip2InputStream.SetupRandPartA()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetupRandPartB">
            <summary>Imposta shim di BZip2InputStream.SetupRandPartB()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.SetupRandPartC">
            <summary>Imposta shim di BZip2InputStream.SetupRandPartC()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Imposta shim di BZip2InputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.bsGetBit">
            <summary>Imposta shim di BZip2InputStream.bsGetBit()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.bsGetInt">
            <summary>Imposta shim di BZip2InputStream.bsGetInt()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.bsGetUByte">
            <summary>Imposta shim di BZip2InputStream.bsGetUByte()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.complete">
            <summary>Imposta shim di BZip2InputStream.complete()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.createHuffmanDecodingTablesInt32Int32">
            <summary>Imposta shim di BZip2InputStream.createHuffmanDecodingTables(Int32 alphaSize, Int32 nGroups)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.getAndMoveToFrontDecode">
            <summary>Imposta shim di BZip2InputStream.getAndMoveToFrontDecode()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.getAndMoveToFrontDecode0Int32">
            <summary>Imposta shim di BZip2InputStream.getAndMoveToFrontDecode0(Int32 groupNo)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.init">
            <summary>Imposta shim di BZip2InputStream.init()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.AllInstances.recvDecodingTables">
            <summary>Imposta shim di BZip2InputStream.recvDecodingTables()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.ShimBZip2InputStream.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.ShimBZip2InputStream.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.ShimBZip2InputStream.Bind(System.IDisposable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.CanReadGet">
            <summary>Imposta shim di BZip2InputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.CanSeekGet">
            <summary>Imposta shim di BZip2InputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.CanWriteGet">
            <summary>Imposta shim di BZip2InputStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.CheckMagicCharCharInt32">
            <summary>Imposta shim di BZip2InputStream.CheckMagicChar(Char expected, Int32 position)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.Close">
            <summary>Imposta shim di BZip2InputStream.Close()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.ConstructorStream">
            <summary>Imposta shim di BZip2InputStream.BZip2InputStream(Stream input)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.ConstructorStreamBoolean">
            <summary>Imposta shim di BZip2InputStream.BZip2InputStream(Stream input, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.DisposeBoolean">
            <summary>Imposta shim di BZip2InputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.EndBlock">
            <summary>Imposta shim di BZip2InputStream.EndBlock()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.Flush">
            <summary>Imposta shim di BZip2InputStream.Flush()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.GetBitsInt32">
            <summary>Imposta shim di BZip2InputStream.GetBits(Int32 n)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.InitBlock">
            <summary>Imposta shim di BZip2InputStream.InitBlock()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.LengthGet">
            <summary>Imposta shim di BZip2InputStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.MakeMaps">
            <summary>Imposta shim di BZip2InputStream.MakeMaps()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.PositionGet">
            <summary>Imposta shim di BZip2InputStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.PositionSetInt64">
            <summary>Imposta shim di BZip2InputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.ReadByte">
            <summary>Imposta shim di BZip2InputStream.ReadByte()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.ReadByteArrayInt32Int32">
            <summary>Imposta shim di BZip2InputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.SeekInt64SeekOrigin">
            <summary>Imposta shim di BZip2InputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.SetLengthInt64">
            <summary>Imposta shim di BZip2InputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.SetupBlock">
            <summary>Imposta shim di BZip2InputStream.SetupBlock()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.SetupNoRandPartA">
            <summary>Imposta shim di BZip2InputStream.SetupNoRandPartA()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.SetupNoRandPartB">
            <summary>Imposta shim di BZip2InputStream.SetupNoRandPartB()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.SetupNoRandPartC">
            <summary>Imposta shim di BZip2InputStream.SetupNoRandPartC()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.SetupRandPartA">
            <summary>Imposta shim di BZip2InputStream.SetupRandPartA()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.SetupRandPartB">
            <summary>Imposta shim di BZip2InputStream.SetupRandPartB()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.SetupRandPartC">
            <summary>Imposta shim di BZip2InputStream.SetupRandPartC()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.WriteByteArrayInt32Int32">
            <summary>Imposta shim di BZip2InputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.bsGetBit">
            <summary>Imposta shim di BZip2InputStream.bsGetBit()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.bsGetInt">
            <summary>Imposta shim di BZip2InputStream.bsGetInt()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.bsGetUByte">
            <summary>Imposta shim di BZip2InputStream.bsGetUByte()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.complete">
            <summary>Imposta shim di BZip2InputStream.complete()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.createHuffmanDecodingTablesInt32Int32">
            <summary>Imposta shim di BZip2InputStream.createHuffmanDecodingTables(Int32 alphaSize, Int32 nGroups)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.getAndMoveToFrontDecode">
            <summary>Imposta shim di BZip2InputStream.getAndMoveToFrontDecode()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.getAndMoveToFrontDecode0Int32">
            <summary>Imposta shim di BZip2InputStream.getAndMoveToFrontDecode0(Int32 groupNo)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.hbCreateDecodeTablesInt32ArrayInt32ArrayInt32ArrayCharArrayInt32Int32Int32">
            <summary>Imposta shim di BZip2InputStream.hbCreateDecodeTables(Int32[] limit, Int32[] bbase, Int32[] perm, Char[] length, Int32 minLen, Int32 maxLen, Int32 alphaSize)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.init">
            <summary>Imposta shim di BZip2InputStream.init()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2InputStream.recvDecodingTables">
            <summary>Imposta shim di BZip2InputStream.recvDecodingTables()</summary>
        </member>
        <member name="T:Ionic.BZip2.Fakes.ShimBZip2OutputStream">
            <summary>Tipo shim di Ionic.BZip2.BZip2OutputStream</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.ShimBZip2OutputStream.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.ShimBZip2OutputStream.#ctor(Ionic.BZip2.BZip2OutputStream)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.BlockSizeGet">
            <summary>Imposta shim di BZip2OutputStream.get_BlockSize()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.CanReadGet">
            <summary>Imposta shim di BZip2OutputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.CanSeekGet">
            <summary>Imposta shim di BZip2OutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.CanWriteGet">
            <summary>Imposta shim di BZip2OutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.Close">
            <summary>Imposta shim di BZip2OutputStream.Close()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.EmitHeader">
            <summary>Imposta shim di BZip2OutputStream.EmitHeader()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.EmitTrailer">
            <summary>Imposta shim di BZip2OutputStream.EmitTrailer()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.Finish">
            <summary>Imposta shim di BZip2OutputStream.Finish()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.Flush">
            <summary>Imposta shim di BZip2OutputStream.Flush()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.LengthGet">
            <summary>Imposta shim di BZip2OutputStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.PositionGet">
            <summary>Imposta shim di BZip2OutputStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.PositionSetInt64">
            <summary>Imposta shim di BZip2OutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Imposta shim di BZip2OutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Imposta shim di BZip2OutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.SetLengthInt64">
            <summary>Imposta shim di BZip2OutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Imposta shim di BZip2OutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.ShimBZip2OutputStream.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.ShimBZip2OutputStream.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.ShimBZip2OutputStream.Bind(System.IDisposable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.BlockSizeGet">
            <summary>Imposta shim di BZip2OutputStream.get_BlockSize()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.CanReadGet">
            <summary>Imposta shim di BZip2OutputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.CanSeekGet">
            <summary>Imposta shim di BZip2OutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.CanWriteGet">
            <summary>Imposta shim di BZip2OutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.Close">
            <summary>Imposta shim di BZip2OutputStream.Close()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.ConstructorStream">
            <summary>Imposta shim di BZip2OutputStream.BZip2OutputStream(Stream output)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.ConstructorStreamBoolean">
            <summary>Imposta shim di BZip2OutputStream.BZip2OutputStream(Stream output, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.ConstructorStreamInt32">
            <summary>Imposta shim di BZip2OutputStream.BZip2OutputStream(Stream output, Int32 blockSize)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.ConstructorStreamInt32Boolean">
            <summary>Imposta shim di BZip2OutputStream.BZip2OutputStream(Stream output, Int32 blockSize, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.EmitHeader">
            <summary>Imposta shim di BZip2OutputStream.EmitHeader()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.EmitTrailer">
            <summary>Imposta shim di BZip2OutputStream.EmitTrailer()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.Finish">
            <summary>Imposta shim di BZip2OutputStream.Finish()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.Flush">
            <summary>Imposta shim di BZip2OutputStream.Flush()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.LengthGet">
            <summary>Imposta shim di BZip2OutputStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.PositionGet">
            <summary>Imposta shim di BZip2OutputStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.PositionSetInt64">
            <summary>Imposta shim di BZip2OutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.ReadByteArrayInt32Int32">
            <summary>Imposta shim di BZip2OutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.SeekInt64SeekOrigin">
            <summary>Imposta shim di BZip2OutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.SetLengthInt64">
            <summary>Imposta shim di BZip2OutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimBZip2OutputStream.WriteByteArrayInt32Int32">
            <summary>Imposta shim di BZip2OutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="T:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream">
            <summary>Tipo shim di Ionic.BZip2.ParallelBZip2OutputStream</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.#ctor(Ionic.BZip2.ParallelBZip2OutputStream)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.BlockSizeGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_BlockSize()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.BytesWrittenOutGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_BytesWrittenOut()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.CanReadGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.CanSeekGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.CanWriteGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.Close">
            <summary>Imposta shim di ParallelBZip2OutputStream.Close()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.CompressOneObject">
            <summary>Imposta shim di ParallelBZip2OutputStream.CompressOne(Object wi)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.EmitHeader">
            <summary>Imposta shim di ParallelBZip2OutputStream.EmitHeader()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.EmitPendingBuffersBooleanBoolean">
            <summary>Imposta shim di ParallelBZip2OutputStream.EmitPendingBuffers(Boolean doAll, Boolean mustWait)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.EmitTrailer">
            <summary>Imposta shim di ParallelBZip2OutputStream.EmitTrailer()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.Flush">
            <summary>Imposta shim di ParallelBZip2OutputStream.Flush()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.FlushOutputBoolean">
            <summary>Imposta shim di ParallelBZip2OutputStream.FlushOutput(Boolean lastInput)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.InitializePoolOfWorkItems">
            <summary>Imposta shim di ParallelBZip2OutputStream.InitializePoolOfWorkItems()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.LengthGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.MaxWorkersGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_MaxWorkers()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.MaxWorkersSetInt32">
            <summary>Imposta shim di ParallelBZip2OutputStream.set_MaxWorkers(Int32 value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.PositionGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.PositionSetInt64">
            <summary>Imposta shim di ParallelBZip2OutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Imposta shim di ParallelBZip2OutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Imposta shim di ParallelBZip2OutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.SetLengthInt64">
            <summary>Imposta shim di ParallelBZip2OutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Imposta shim di ParallelBZip2OutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.Bind(System.IDisposable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.BlockSizeGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_BlockSize()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.BytesWrittenOutGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_BytesWrittenOut()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.CanReadGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.CanSeekGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.CanWriteGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.Close">
            <summary>Imposta shim di ParallelBZip2OutputStream.Close()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.CompressOneObject">
            <summary>Imposta shim di ParallelBZip2OutputStream.CompressOne(Object wi)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.ConstructorStream">
            <summary>Imposta shim di ParallelBZip2OutputStream.ParallelBZip2OutputStream(Stream output)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.ConstructorStreamBoolean">
            <summary>Imposta shim di ParallelBZip2OutputStream.ParallelBZip2OutputStream(Stream output, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.ConstructorStreamInt32">
            <summary>Imposta shim di ParallelBZip2OutputStream.ParallelBZip2OutputStream(Stream output, Int32 blockSize)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.ConstructorStreamInt32Boolean">
            <summary>Imposta shim di ParallelBZip2OutputStream.ParallelBZip2OutputStream(Stream output, Int32 blockSize, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.EmitHeader">
            <summary>Imposta shim di ParallelBZip2OutputStream.EmitHeader()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.EmitPendingBuffersBooleanBoolean">
            <summary>Imposta shim di ParallelBZip2OutputStream.EmitPendingBuffers(Boolean doAll, Boolean mustWait)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.EmitTrailer">
            <summary>Imposta shim di ParallelBZip2OutputStream.EmitTrailer()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.Flush">
            <summary>Imposta shim di ParallelBZip2OutputStream.Flush()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.FlushOutputBoolean">
            <summary>Imposta shim di ParallelBZip2OutputStream.FlushOutput(Boolean lastInput)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.InitializePoolOfWorkItems">
            <summary>Imposta shim di ParallelBZip2OutputStream.InitializePoolOfWorkItems()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.LengthGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.MaxWorkersGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_MaxWorkers()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.MaxWorkersSetInt32">
            <summary>Imposta shim di ParallelBZip2OutputStream.set_MaxWorkers(Int32 value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.PositionGet">
            <summary>Imposta shim di ParallelBZip2OutputStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.PositionSetInt64">
            <summary>Imposta shim di ParallelBZip2OutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.ReadByteArrayInt32Int32">
            <summary>Imposta shim di ParallelBZip2OutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.SeekInt64SeekOrigin">
            <summary>Imposta shim di ParallelBZip2OutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.SetLengthInt64">
            <summary>Imposta shim di ParallelBZip2OutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.StaticConstructor">
            <summary>Imposta shim di ParallelBZip2OutputStream.ParallelBZip2OutputStream()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.ShimParallelBZip2OutputStream.WriteByteArrayInt32Int32">
            <summary>Imposta shim di ParallelBZip2OutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="T:Ionic.BZip2.Fakes.StubBZip2InputStream">
            <summary>Tipo stub di Ionic.BZip2.BZip2InputStream</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.#ctor(System.IO.Stream)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.AttachBackingFieldToPosition">
            <summary>Connette i delegati da emulare StubBZip2InputStream.Position come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.AttachBackingFieldToReadTimeout">
            <summary>Connette i delegati da emulare StubBZip2InputStream.ReadTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.AttachBackingFieldToWriteTimeout">
            <summary>Connette i delegati da emulare StubBZip2InputStream.WriteTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2InputStream.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2InputStream.CanRead">
            <summary>Imposta stub di BZip2InputStream.get_CanRead()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.CanReadGet">
            <summary>Imposta stub di BZip2InputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2InputStream.CanSeek">
            <summary>Imposta stub di BZip2InputStream.get_CanSeek()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.CanSeekGet">
            <summary>Imposta stub di BZip2InputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2InputStream.CanTimeout">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.CanTimeoutGet">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2InputStream.CanWrite">
            <summary>Imposta stub di BZip2InputStream.get_CanWrite()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.CanWriteGet">
            <summary>Imposta stub di BZip2InputStream.get_CanWrite()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.Close">
            <summary>Imposta stub di BZip2InputStream.Close()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.Close01">
            <summary>Imposta stub di BZip2InputStream.Close()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.CreateWaitHandle">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.CreateWaitHandle01">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.Dispose(System.Boolean)">
            <summary>Imposta stub di BZip2InputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.DisposeBoolean">
            <summary>Imposta stub di BZip2InputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.EndRead(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.EndReadIAsyncResult">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.EndWrite(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.EndWriteIAsyncResult">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.Flush">
            <summary>Imposta stub di BZip2InputStream.Flush()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.Flush01">
            <summary>Imposta stub di BZip2InputStream.Flush()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubBZip2InputStream</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2InputStream.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2InputStream.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2InputStream.Length">
            <summary>Imposta stub di BZip2InputStream.get_Length()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.LengthGet">
            <summary>Imposta stub di BZip2InputStream.get_Length()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.ObjectInvariant">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.ObjectInvariant01">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2InputStream.Position">
            <summary>Imposta stub di BZip2InputStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.PositionGet">
            <summary>Imposta stub di BZip2InputStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.PositionSetInt64">
            <summary>Imposta stub di BZip2InputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di BZip2InputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.ReadByte">
            <summary>Imposta stub di BZip2InputStream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.ReadByte01">
            <summary>Imposta stub di BZip2InputStream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.ReadByteArrayInt32Int32">
            <summary>Imposta stub di BZip2InputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2InputStream.ReadTimeout">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.ReadTimeoutGet">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.ReadTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Imposta stub di BZip2InputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.SeekInt64SeekOrigin">
            <summary>Imposta stub di BZip2InputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.SetLength(System.Int64)">
            <summary>Imposta stub di BZip2InputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.SetLengthInt64">
            <summary>Imposta stub di BZip2InputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di BZip2InputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2InputStream.WriteByte(System.Byte)">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.WriteByteArrayInt32Int32">
            <summary>Imposta stub di BZip2InputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.WriteByteByte">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2InputStream.WriteTimeout">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.WriteTimeoutGet">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2InputStream.WriteTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="T:Ionic.BZip2.Fakes.StubBZip2OutputStream">
            <summary>Tipo stub di Ionic.BZip2.BZip2OutputStream</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.#ctor(System.IO.Stream)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.AttachBackingFieldToPosition">
            <summary>Connette i delegati da emulare StubBZip2OutputStream.Position come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.AttachBackingFieldToReadTimeout">
            <summary>Connette i delegati da emulare StubBZip2OutputStream.ReadTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.AttachBackingFieldToWriteTimeout">
            <summary>Connette i delegati da emulare StubBZip2OutputStream.WriteTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2OutputStream.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2OutputStream.CanRead">
            <summary>Imposta stub di BZip2OutputStream.get_CanRead()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.CanReadGet">
            <summary>Imposta stub di BZip2OutputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2OutputStream.CanSeek">
            <summary>Imposta stub di BZip2OutputStream.get_CanSeek()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.CanSeekGet">
            <summary>Imposta stub di BZip2OutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2OutputStream.CanTimeout">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.CanTimeoutGet">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2OutputStream.CanWrite">
            <summary>Imposta stub di BZip2OutputStream.get_CanWrite()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.CanWriteGet">
            <summary>Imposta stub di BZip2OutputStream.get_CanWrite()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.Close">
            <summary>Imposta stub di BZip2OutputStream.Close()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.Close01">
            <summary>Imposta stub di BZip2OutputStream.Close()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.CreateWaitHandle">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.CreateWaitHandle01">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.Dispose(System.Boolean)">
            <summary>Imposta stub di Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.DisposeBoolean">
            <summary>Imposta stub di Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.EndRead(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.EndReadIAsyncResult">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.EndWrite(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.EndWriteIAsyncResult">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.Flush">
            <summary>Imposta stub di BZip2OutputStream.Flush()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.Flush01">
            <summary>Imposta stub di BZip2OutputStream.Flush()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubBZip2OutputStream</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2OutputStream.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2OutputStream.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2OutputStream.Length">
            <summary>Imposta stub di BZip2OutputStream.get_Length()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.LengthGet">
            <summary>Imposta stub di BZip2OutputStream.get_Length()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.ObjectInvariant">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.ObjectInvariant01">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2OutputStream.Position">
            <summary>Imposta stub di BZip2OutputStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.PositionGet">
            <summary>Imposta stub di BZip2OutputStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.PositionSetInt64">
            <summary>Imposta stub di BZip2OutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di BZip2OutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.ReadByte">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.ReadByte01">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.ReadByteArrayInt32Int32">
            <summary>Imposta stub di BZip2OutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2OutputStream.ReadTimeout">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.ReadTimeoutGet">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.ReadTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Imposta stub di BZip2OutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.SeekInt64SeekOrigin">
            <summary>Imposta stub di BZip2OutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.SetLength(System.Int64)">
            <summary>Imposta stub di BZip2OutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.SetLengthInt64">
            <summary>Imposta stub di BZip2OutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di BZip2OutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubBZip2OutputStream.WriteByte(System.Byte)">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.WriteByteArrayInt32Int32">
            <summary>Imposta stub di BZip2OutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.WriteByteByte">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubBZip2OutputStream.WriteTimeout">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.WriteTimeoutGet">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubBZip2OutputStream.WriteTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="T:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream">
            <summary>Tipo stub di Ionic.BZip2.ParallelBZip2OutputStream</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.#ctor(System.IO.Stream)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.AttachBackingFieldToPosition">
            <summary>Connette i delegati da emulare StubParallelBZip2OutputStream.Position come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.AttachBackingFieldToReadTimeout">
            <summary>Connette i delegati da emulare StubParallelBZip2OutputStream.ReadTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.AttachBackingFieldToWriteTimeout">
            <summary>Connette i delegati da emulare StubParallelBZip2OutputStream.WriteTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.CanRead">
            <summary>Imposta stub di ParallelBZip2OutputStream.get_CanRead()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.CanReadGet">
            <summary>Imposta stub di ParallelBZip2OutputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.CanSeek">
            <summary>Imposta stub di ParallelBZip2OutputStream.get_CanSeek()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.CanSeekGet">
            <summary>Imposta stub di ParallelBZip2OutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.CanTimeout">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.CanTimeoutGet">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.CanWrite">
            <summary>Imposta stub di ParallelBZip2OutputStream.get_CanWrite()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.CanWriteGet">
            <summary>Imposta stub di ParallelBZip2OutputStream.get_CanWrite()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.Close">
            <summary>Imposta stub di ParallelBZip2OutputStream.Close()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.Close01">
            <summary>Imposta stub di ParallelBZip2OutputStream.Close()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.CreateWaitHandle">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.CreateWaitHandle01">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.Dispose(System.Boolean)">
            <summary>Imposta stub di Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.DisposeBoolean">
            <summary>Imposta stub di Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.EndRead(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.EndReadIAsyncResult">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.EndWrite(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.EndWriteIAsyncResult">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.Flush">
            <summary>Imposta stub di ParallelBZip2OutputStream.Flush()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.Flush01">
            <summary>Imposta stub di ParallelBZip2OutputStream.Flush()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubParallelBZip2OutputStream</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.Length">
            <summary>Imposta stub di ParallelBZip2OutputStream.get_Length()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.LengthGet">
            <summary>Imposta stub di ParallelBZip2OutputStream.get_Length()</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.ObjectInvariant">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.ObjectInvariant01">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.Position">
            <summary>Imposta stub di ParallelBZip2OutputStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.PositionGet">
            <summary>Imposta stub di ParallelBZip2OutputStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.PositionSetInt64">
            <summary>Imposta stub di ParallelBZip2OutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di ParallelBZip2OutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.ReadByte">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.ReadByte01">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.ReadByteArrayInt32Int32">
            <summary>Imposta stub di ParallelBZip2OutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.ReadTimeout">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.ReadTimeoutGet">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.ReadTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Imposta stub di ParallelBZip2OutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.SeekInt64SeekOrigin">
            <summary>Imposta stub di ParallelBZip2OutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.SetLength(System.Int64)">
            <summary>Imposta stub di ParallelBZip2OutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.SetLengthInt64">
            <summary>Imposta stub di ParallelBZip2OutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di ParallelBZip2OutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.WriteByte(System.Byte)">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.WriteByteArrayInt32Int32">
            <summary>Imposta stub di ParallelBZip2OutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.WriteByteByte">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="P:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.WriteTimeout">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.WriteTimeoutGet">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.BZip2.Fakes.StubParallelBZip2OutputStream.WriteTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="T:Ionic.Crc.Fakes.ShimCRC32">
            <summary>Tipo shim di Ionic.Crc.CRC32</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.ShimCRC32.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.ShimCRC32.#ctor(Ionic.Crc.CRC32)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Crc.Fakes.ShimCRC32.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.AllInstances.CombineInt32Int32">
            <summary>Imposta shim di CRC32.Combine(Int32 crc, Int32 length)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.AllInstances.ComputeCrc32Int32Byte">
            <summary>Imposta shim di CRC32.ComputeCrc32(Int32 W, Byte B)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.AllInstances.Crc32ResultGet">
            <summary>Imposta shim di CRC32.get_Crc32Result()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.AllInstances.GenerateLookupTable">
            <summary>Imposta shim di CRC32.GenerateLookupTable()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.AllInstances.GetCrc32AndCopyStreamStream">
            <summary>Imposta shim di CRC32.GetCrc32AndCopy(Stream input, Stream output)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.AllInstances.GetCrc32Stream">
            <summary>Imposta shim di CRC32.GetCrc32(Stream input)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.AllInstances.Reset">
            <summary>Imposta shim di CRC32.Reset()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.AllInstances.SlurpBlockByteArrayInt32Int32">
            <summary>Imposta shim di CRC32.SlurpBlock(Byte[] block, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.AllInstances.TotalBytesReadGet">
            <summary>Imposta shim di CRC32.get_TotalBytesRead()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.AllInstances.UpdateCRCByte">
            <summary>Imposta shim di CRC32.UpdateCRC(Byte b)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.AllInstances.UpdateCRCByteInt32">
            <summary>Imposta shim di CRC32.UpdateCRC(Byte b, Int32 n)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.AllInstances._InternalComputeCrc32UInt32Byte">
            <summary>Imposta shim di CRC32._InternalComputeCrc32(UInt32 W, Byte B)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.AllInstances.gf2_matrix_squareUInt32ArrayUInt32Array">
            <summary>Imposta shim di CRC32.gf2_matrix_square(UInt32[] square, UInt32[] mat)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.AllInstances.gf2_matrix_timesUInt32ArrayUInt32">
            <summary>Imposta shim di CRC32.gf2_matrix_times(UInt32[] matrix, UInt32 vec)</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.ShimCRC32.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.ShimCRC32.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.CombineInt32Int32">
            <summary>Imposta shim di CRC32.Combine(Int32 crc, Int32 length)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.ComputeCrc32Int32Byte">
            <summary>Imposta shim di CRC32.ComputeCrc32(Int32 W, Byte B)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.Constructor">
            <summary>Imposta shim di CRC32.CRC32()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.ConstructorBoolean">
            <summary>Imposta shim di CRC32.CRC32(Boolean reverseBits)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.ConstructorInt32Boolean">
            <summary>Imposta shim di CRC32.CRC32(Int32 polynomial, Boolean reverseBits)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.Crc32ResultGet">
            <summary>Imposta shim di CRC32.get_Crc32Result()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.GenerateLookupTable">
            <summary>Imposta shim di CRC32.GenerateLookupTable()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.GetCrc32AndCopyStreamStream">
            <summary>Imposta shim di CRC32.GetCrc32AndCopy(Stream input, Stream output)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.GetCrc32Stream">
            <summary>Imposta shim di CRC32.GetCrc32(Stream input)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.Reset">
            <summary>Imposta shim di CRC32.Reset()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.ReverseBitsByte">
            <summary>Imposta shim di CRC32.ReverseBits(Byte data)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.ReverseBitsUInt32">
            <summary>Imposta shim di CRC32.ReverseBits(UInt32 data)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.SlurpBlockByteArrayInt32Int32">
            <summary>Imposta shim di CRC32.SlurpBlock(Byte[] block, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.TotalBytesReadGet">
            <summary>Imposta shim di CRC32.get_TotalBytesRead()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.UpdateCRCByte">
            <summary>Imposta shim di CRC32.UpdateCRC(Byte b)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.UpdateCRCByteInt32">
            <summary>Imposta shim di CRC32.UpdateCRC(Byte b, Int32 n)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32._InternalComputeCrc32UInt32Byte">
            <summary>Imposta shim di CRC32._InternalComputeCrc32(UInt32 W, Byte B)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.gf2_matrix_squareUInt32ArrayUInt32Array">
            <summary>Imposta shim di CRC32.gf2_matrix_square(UInt32[] square, UInt32[] mat)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCRC32.gf2_matrix_timesUInt32ArrayUInt32">
            <summary>Imposta shim di CRC32.gf2_matrix_times(UInt32[] matrix, UInt32 vec)</summary>
        </member>
        <member name="T:Ionic.Crc.Fakes.ShimCrcCalculatorStream">
            <summary>Tipo shim di Ionic.Crc.CrcCalculatorStream</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.ShimCrcCalculatorStream.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.ShimCrcCalculatorStream.#ctor(Ionic.Crc.CrcCalculatorStream)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.CanReadGet">
            <summary>Imposta shim di CrcCalculatorStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.CanSeekGet">
            <summary>Imposta shim di CrcCalculatorStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.CanWriteGet">
            <summary>Imposta shim di CrcCalculatorStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.Close">
            <summary>Imposta shim di CrcCalculatorStream.Close()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.CrcGet">
            <summary>Imposta shim di CrcCalculatorStream.get_Crc()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.Flush">
            <summary>Imposta shim di CrcCalculatorStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.InnerClose">
            <summary>Imposta shim di CrcCalculatorStream.InnerClose()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.LeaveOpenGet">
            <summary>Imposta shim di CrcCalculatorStream.get_LeaveOpen()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.LeaveOpenSetBoolean">
            <summary>Imposta shim di CrcCalculatorStream.set_LeaveOpen(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.LengthGet">
            <summary>Imposta shim di CrcCalculatorStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.PositionGet">
            <summary>Imposta shim di CrcCalculatorStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.PositionSetInt64">
            <summary>Imposta shim di CrcCalculatorStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Imposta shim di CrcCalculatorStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Imposta shim di CrcCalculatorStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.SetLengthInt64">
            <summary>Imposta shim di CrcCalculatorStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.SystemIDisposableDispose">
            <summary>Imposta shim di CrcCalculatorStream.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.TotalBytesSlurpedGet">
            <summary>Imposta shim di CrcCalculatorStream.get_TotalBytesSlurped()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Imposta shim di CrcCalculatorStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.ShimCrcCalculatorStream.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.ShimCrcCalculatorStream.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.ShimCrcCalculatorStream.Bind(System.IDisposable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.CanReadGet">
            <summary>Imposta shim di CrcCalculatorStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.CanSeekGet">
            <summary>Imposta shim di CrcCalculatorStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.CanWriteGet">
            <summary>Imposta shim di CrcCalculatorStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.Close">
            <summary>Imposta shim di CrcCalculatorStream.Close()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.ConstructorBooleanInt64StreamCRC32">
            <summary>Imposta shim di CrcCalculatorStream.CrcCalculatorStream(Boolean leaveOpen, Int64 length, Stream stream, CRC32 crc32)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.ConstructorStream">
            <summary>Imposta shim di CrcCalculatorStream.CrcCalculatorStream(Stream stream)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.ConstructorStreamBoolean">
            <summary>Imposta shim di CrcCalculatorStream.CrcCalculatorStream(Stream stream, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.ConstructorStreamInt64">
            <summary>Imposta shim di CrcCalculatorStream.CrcCalculatorStream(Stream stream, Int64 length)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.ConstructorStreamInt64Boolean">
            <summary>Imposta shim di CrcCalculatorStream.CrcCalculatorStream(Stream stream, Int64 length, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.ConstructorStreamInt64BooleanCRC32">
            <summary>Imposta shim di CrcCalculatorStream.CrcCalculatorStream(Stream stream, Int64 length, Boolean leaveOpen, CRC32 crc32)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.CrcGet">
            <summary>Imposta shim di CrcCalculatorStream.get_Crc()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.Flush">
            <summary>Imposta shim di CrcCalculatorStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.InnerClose">
            <summary>Imposta shim di CrcCalculatorStream.InnerClose()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.LeaveOpenGet">
            <summary>Imposta shim di CrcCalculatorStream.get_LeaveOpen()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.LeaveOpenSetBoolean">
            <summary>Imposta shim di CrcCalculatorStream.set_LeaveOpen(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.LengthGet">
            <summary>Imposta shim di CrcCalculatorStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.PositionGet">
            <summary>Imposta shim di CrcCalculatorStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.PositionSetInt64">
            <summary>Imposta shim di CrcCalculatorStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.ReadByteArrayInt32Int32">
            <summary>Imposta shim di CrcCalculatorStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.SeekInt64SeekOrigin">
            <summary>Imposta shim di CrcCalculatorStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.SetLengthInt64">
            <summary>Imposta shim di CrcCalculatorStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.StaticConstructor">
            <summary>Imposta shim di CrcCalculatorStream.CrcCalculatorStream()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.SystemIDisposableDispose">
            <summary>Imposta shim di CrcCalculatorStream.System.IDisposable.Dispose()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.TotalBytesSlurpedGet">
            <summary>Imposta shim di CrcCalculatorStream.get_TotalBytesSlurped()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.ShimCrcCalculatorStream.WriteByteArrayInt32Int32">
            <summary>Imposta shim di CrcCalculatorStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="T:Ionic.Crc.Fakes.StubCRC32">
            <summary>Tipo stub di Ionic.Crc.CRC32</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCRC32.#ctor">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCRC32.#ctor(System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCRC32.#ctor(System.Int32,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.StubCRC32.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCRC32.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubCRC32</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.StubCRC32.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.StubCRC32.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="T:Ionic.Crc.Fakes.StubCrcCalculatorStream">
            <summary>Tipo stub di Ionic.Crc.CrcCalculatorStream</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean,Ionic.Crc.CRC32)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.AttachBackingFieldToPosition">
            <summary>Connette i delegati da emulare StubCrcCalculatorStream.Position come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.AttachBackingFieldToReadTimeout">
            <summary>Connette i delegati da emulare StubCrcCalculatorStream.ReadTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.AttachBackingFieldToWriteTimeout">
            <summary>Connette i delegati da emulare StubCrcCalculatorStream.WriteTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.StubCrcCalculatorStream.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.StubCrcCalculatorStream.CanRead">
            <summary>Imposta stub di CrcCalculatorStream.get_CanRead()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.CanReadGet">
            <summary>Imposta stub di CrcCalculatorStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.StubCrcCalculatorStream.CanSeek">
            <summary>Imposta stub di CrcCalculatorStream.get_CanSeek()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.CanSeekGet">
            <summary>Imposta stub di CrcCalculatorStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.StubCrcCalculatorStream.CanTimeout">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.CanTimeoutGet">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.StubCrcCalculatorStream.CanWrite">
            <summary>Imposta stub di CrcCalculatorStream.get_CanWrite()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.CanWriteGet">
            <summary>Imposta stub di CrcCalculatorStream.get_CanWrite()</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.Close">
            <summary>Imposta stub di CrcCalculatorStream.Close()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.Close01">
            <summary>Imposta stub di CrcCalculatorStream.Close()</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.CreateWaitHandle">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.CreateWaitHandle01">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.Dispose(System.Boolean)">
            <summary>Imposta stub di Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.DisposeBoolean">
            <summary>Imposta stub di Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.EndRead(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.EndReadIAsyncResult">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.EndWrite(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.EndWriteIAsyncResult">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.Flush">
            <summary>Imposta stub di CrcCalculatorStream.Flush()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.Flush01">
            <summary>Imposta stub di CrcCalculatorStream.Flush()</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubCrcCalculatorStream</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.StubCrcCalculatorStream.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.StubCrcCalculatorStream.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.StubCrcCalculatorStream.Length">
            <summary>Imposta stub di CrcCalculatorStream.get_Length()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.LengthGet">
            <summary>Imposta stub di CrcCalculatorStream.get_Length()</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.ObjectInvariant">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.ObjectInvariant01">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.StubCrcCalculatorStream.Position">
            <summary>Imposta stub di CrcCalculatorStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.PositionGet">
            <summary>Imposta stub di CrcCalculatorStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.PositionSetInt64">
            <summary>Imposta stub di CrcCalculatorStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di CrcCalculatorStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.ReadByte">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.ReadByte01">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.ReadByteArrayInt32Int32">
            <summary>Imposta stub di CrcCalculatorStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.StubCrcCalculatorStream.ReadTimeout">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.ReadTimeoutGet">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.ReadTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Imposta stub di CrcCalculatorStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.SeekInt64SeekOrigin">
            <summary>Imposta stub di CrcCalculatorStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.SetLength(System.Int64)">
            <summary>Imposta stub di CrcCalculatorStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.SetLengthInt64">
            <summary>Imposta stub di CrcCalculatorStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di CrcCalculatorStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Crc.Fakes.StubCrcCalculatorStream.WriteByte(System.Byte)">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.WriteByteArrayInt32Int32">
            <summary>Imposta stub di CrcCalculatorStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.WriteByteByte">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="P:Ionic.Crc.Fakes.StubCrcCalculatorStream.WriteTimeout">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.WriteTimeoutGet">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Crc.Fakes.StubCrcCalculatorStream.WriteTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="T:Ionic.Fakes.ShimFileSelector">
            <summary>Tipo shim di Ionic.FileSelector</summary>
        </member>
        <member name="M:Ionic.Fakes.ShimFileSelector.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Fakes.ShimFileSelector.#ctor(Ionic.FileSelector)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Fakes.ShimFileSelector.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.AllInstances.EvaluateString">
            <summary>Imposta shim di FileSelector.Evaluate(String filename)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.AllInstances.EvaluateZipEntry">
            <summary>Imposta shim di FileSelector.Evaluate(ZipEntry entry)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.AllInstances.SelectEntriesZipFile">
            <summary>Imposta shim di FileSelector.SelectEntries(ZipFile zip)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.AllInstances.SelectEntriesZipFileString">
            <summary>Imposta shim di FileSelector.SelectEntries(ZipFile zip, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.AllInstances.SelectFilesString">
            <summary>Imposta shim di FileSelector.SelectFiles(String directory)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.AllInstances.SelectFilesStringBoolean">
            <summary>Imposta shim di FileSelector.SelectFiles(String directory, Boolean recurseDirectories)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.AllInstances.SelectionCriteriaGet">
            <summary>Imposta shim di FileSelector.get_SelectionCriteria()</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.AllInstances.SelectionCriteriaSetString">
            <summary>Imposta shim di FileSelector.set_SelectionCriteria(String value)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.AllInstances.SelectorTraceStringObjectArray">
            <summary>Imposta shim di FileSelector.SelectorTrace(String format, Object[] args)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.AllInstances.ToString01">
            <summary>Imposta shim di FileSelector.ToString()</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.AllInstances.TraverseReparsePointsGet">
            <summary>Imposta shim di FileSelector.get_TraverseReparsePoints()</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.AllInstances.TraverseReparsePointsSetBoolean">
            <summary>Imposta shim di FileSelector.set_TraverseReparsePoints(Boolean value)</summary>
        </member>
        <member name="M:Ionic.Fakes.ShimFileSelector.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Fakes.ShimFileSelector.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.ConstructorString">
            <summary>Imposta shim di FileSelector.FileSelector(String selectionCriteria)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.ConstructorStringBoolean">
            <summary>Imposta shim di FileSelector.FileSelector(String selectionCriteria, Boolean traverseDirectoryReparsePoints)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.EvaluateString">
            <summary>Imposta shim di FileSelector.Evaluate(String filename)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.EvaluateZipEntry">
            <summary>Imposta shim di FileSelector.Evaluate(ZipEntry entry)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.NormalizeCriteriaExpressionString">
            <summary>Imposta shim di FileSelector.NormalizeCriteriaExpression(String source)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.SelectEntriesZipFile">
            <summary>Imposta shim di FileSelector.SelectEntries(ZipFile zip)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.SelectEntriesZipFileString">
            <summary>Imposta shim di FileSelector.SelectEntries(ZipFile zip, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.SelectFilesString">
            <summary>Imposta shim di FileSelector.SelectFiles(String directory)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.SelectFilesStringBoolean">
            <summary>Imposta shim di FileSelector.SelectFiles(String directory, Boolean recurseDirectories)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.SelectionCriteriaGet">
            <summary>Imposta shim di FileSelector.get_SelectionCriteria()</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.SelectionCriteriaSetString">
            <summary>Imposta shim di FileSelector.set_SelectionCriteria(String value)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.SelectorTraceStringObjectArray">
            <summary>Imposta shim di FileSelector.SelectorTrace(String format, Object[] args)</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.ToString">
            <summary>Imposta shim di FileSelector.ToString()</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.TraverseReparsePointsGet">
            <summary>Imposta shim di FileSelector.get_TraverseReparsePoints()</summary>
        </member>
        <member name="P:Ionic.Fakes.ShimFileSelector.TraverseReparsePointsSetBoolean">
            <summary>Imposta shim di FileSelector.set_TraverseReparsePoints(Boolean value)</summary>
        </member>
        <member name="T:Ionic.Fakes.StubFileSelector">
            <summary>Tipo stub di Ionic.FileSelector</summary>
        </member>
        <member name="M:Ionic.Fakes.StubFileSelector.#ctor(System.String)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Fakes.StubFileSelector.#ctor(System.String,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="P:Ionic.Fakes.StubFileSelector.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="M:Ionic.Fakes.StubFileSelector.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubFileSelector</summary>
        </member>
        <member name="P:Ionic.Fakes.StubFileSelector.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Fakes.StubFileSelector.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="M:Ionic.Fakes.StubFileSelector.ToString">
            <summary>Imposta stub di FileSelector.ToString()</summary>
        </member>
        <member name="F:Ionic.Fakes.StubFileSelector.ToString01">
            <summary>Imposta stub di FileSelector.ToString()</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimAddProgressEventArgs">
            <summary>Tipo shim di Ionic.Zip.AddProgressEventArgs</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimAddProgressEventArgs.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimAddProgressEventArgs.#ctor(Ionic.Zip.AddProgressEventArgs)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimAddProgressEventArgs.AfterEntryStringZipEntryInt32">
            <summary>Imposta shim di AddProgressEventArgs.AfterEntry(String archiveName, ZipEntry entry, Int32 entriesTotal)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimAddProgressEventArgs.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimAddProgressEventArgs.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimAddProgressEventArgs.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimAddProgressEventArgs.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimAddProgressEventArgs.CompletedString">
            <summary>Imposta shim di AddProgressEventArgs.Completed(String archiveName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimAddProgressEventArgs.Constructor">
            <summary>Imposta shim di AddProgressEventArgs.AddProgressEventArgs()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimAddProgressEventArgs.ConstructorStringZipProgressEventType">
            <summary>Imposta shim di AddProgressEventArgs.AddProgressEventArgs(String archiveName, ZipProgressEventType flavor)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimAddProgressEventArgs.StartedString">
            <summary>Imposta shim di AddProgressEventArgs.Started(String archiveName)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimBadCrcException">
            <summary>Tipo shim di Ionic.Zip.BadCrcException</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadCrcException.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadCrcException.#ctor(Ionic.Zip.BadCrcException)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimBadCrcException.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadCrcException.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadCrcException.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadCrcException.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadCrcException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadCrcException.Constructor">
            <summary>Imposta shim di BadCrcException.BadCrcException()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadCrcException.ConstructorSerializationInfoStreamingContext">
            <summary>Imposta shim di BadCrcException.BadCrcException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadCrcException.ConstructorString">
            <summary>Imposta shim di BadCrcException.BadCrcException(String message)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimBadPasswordException">
            <summary>Tipo shim di Ionic.Zip.BadPasswordException</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadPasswordException.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadPasswordException.#ctor(Ionic.Zip.BadPasswordException)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimBadPasswordException.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadPasswordException.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadPasswordException.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadPasswordException.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadPasswordException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadPasswordException.Constructor">
            <summary>Imposta shim di BadPasswordException.BadPasswordException()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadPasswordException.ConstructorSerializationInfoStreamingContext">
            <summary>Imposta shim di BadPasswordException.BadPasswordException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadPasswordException.ConstructorString">
            <summary>Imposta shim di BadPasswordException.BadPasswordException(String message)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadPasswordException.ConstructorStringException">
            <summary>Imposta shim di BadPasswordException.BadPasswordException(String message, Exception innerException)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimBadReadException">
            <summary>Tipo shim di Ionic.Zip.BadReadException</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadReadException.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadReadException.#ctor(Ionic.Zip.BadReadException)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimBadReadException.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadReadException.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadReadException.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadReadException.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadReadException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadReadException.Constructor">
            <summary>Imposta shim di BadReadException.BadReadException()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadReadException.ConstructorSerializationInfoStreamingContext">
            <summary>Imposta shim di BadReadException.BadReadException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadReadException.ConstructorString">
            <summary>Imposta shim di BadReadException.BadReadException(String message)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadReadException.ConstructorStringException">
            <summary>Imposta shim di BadReadException.BadReadException(String message, Exception innerException)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimBadStateException">
            <summary>Tipo shim di Ionic.Zip.BadStateException</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadStateException.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadStateException.#ctor(Ionic.Zip.BadStateException)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimBadStateException.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadStateException.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadStateException.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadStateException.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimBadStateException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadStateException.Constructor">
            <summary>Imposta shim di BadStateException.BadStateException()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadStateException.ConstructorSerializationInfoStreamingContext">
            <summary>Imposta shim di BadStateException.BadStateException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadStateException.ConstructorString">
            <summary>Imposta shim di BadStateException.BadStateException(String message)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimBadStateException.ConstructorStringException">
            <summary>Imposta shim di BadStateException.BadStateException(String message, Exception innerException)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimComHelper">
            <summary>Tipo shim di Ionic.Zip.ComHelper</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimComHelper.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimComHelper.#ctor(Ionic.Zip.ComHelper)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimComHelper.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimComHelper.AllInstances.CheckZipPasswordStringString">
            <summary>Imposta shim di ComHelper.CheckZipPassword(String filename, String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimComHelper.AllInstances.CheckZipString">
            <summary>Imposta shim di ComHelper.CheckZip(String filename)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimComHelper.AllInstances.FixZipDirectoryString">
            <summary>Imposta shim di ComHelper.FixZipDirectory(String filename)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimComHelper.AllInstances.GetZipLibraryVersion">
            <summary>Imposta shim di ComHelper.GetZipLibraryVersion()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimComHelper.AllInstances.IsZipFileString">
            <summary>Imposta shim di ComHelper.IsZipFile(String filename)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimComHelper.AllInstances.IsZipFileWithExtractString">
            <summary>Imposta shim di ComHelper.IsZipFileWithExtract(String filename)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimComHelper.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimComHelper.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimComHelper.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimComHelper.CheckZipPasswordStringString">
            <summary>Imposta shim di ComHelper.CheckZipPassword(String filename, String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimComHelper.CheckZipString">
            <summary>Imposta shim di ComHelper.CheckZip(String filename)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimComHelper.Constructor">
            <summary>Imposta shim di ComHelper.ComHelper()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimComHelper.FixZipDirectoryString">
            <summary>Imposta shim di ComHelper.FixZipDirectory(String filename)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimComHelper.GetZipLibraryVersion">
            <summary>Imposta shim di ComHelper.GetZipLibraryVersion()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimComHelper.IsZipFileString">
            <summary>Imposta shim di ComHelper.IsZipFile(String filename)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimComHelper.IsZipFileWithExtractString">
            <summary>Imposta shim di ComHelper.IsZipFileWithExtract(String filename)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimCountingStream">
            <summary>Tipo shim di Ionic.Zip.CountingStream</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimCountingStream.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimCountingStream.#ctor(Ionic.Zip.CountingStream)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AdjustInt64">
            <summary>Imposta shim di CountingStream.Adjust(Int64 delta)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimCountingStream.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.AdjustInt64">
            <summary>Imposta shim di CountingStream.Adjust(Int64 delta)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.BytesReadGet">
            <summary>Imposta shim di CountingStream.get_BytesRead()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.BytesWrittenGet">
            <summary>Imposta shim di CountingStream.get_BytesWritten()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.CanReadGet">
            <summary>Imposta shim di CountingStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.CanSeekGet">
            <summary>Imposta shim di CountingStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.CanWriteGet">
            <summary>Imposta shim di CountingStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.ComputedPositionGet">
            <summary>Imposta shim di CountingStream.get_ComputedPosition()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.Flush">
            <summary>Imposta shim di CountingStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.LengthGet">
            <summary>Imposta shim di CountingStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.PositionGet">
            <summary>Imposta shim di CountingStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.PositionSetInt64">
            <summary>Imposta shim di CountingStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Imposta shim di CountingStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Imposta shim di CountingStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.SetLengthInt64">
            <summary>Imposta shim di CountingStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.WrappedStreamGet">
            <summary>Imposta shim di CountingStream.get_WrappedStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Imposta shim di CountingStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimCountingStream.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimCountingStream.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimCountingStream.Bind(System.IDisposable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.BytesReadGet">
            <summary>Imposta shim di CountingStream.get_BytesRead()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.BytesWrittenGet">
            <summary>Imposta shim di CountingStream.get_BytesWritten()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.CanReadGet">
            <summary>Imposta shim di CountingStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.CanSeekGet">
            <summary>Imposta shim di CountingStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.CanWriteGet">
            <summary>Imposta shim di CountingStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.ComputedPositionGet">
            <summary>Imposta shim di CountingStream.get_ComputedPosition()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.ConstructorStream">
            <summary>Imposta shim di CountingStream.CountingStream(Stream stream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.Flush">
            <summary>Imposta shim di CountingStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.LengthGet">
            <summary>Imposta shim di CountingStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.PositionGet">
            <summary>Imposta shim di CountingStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.PositionSetInt64">
            <summary>Imposta shim di CountingStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.ReadByteArrayInt32Int32">
            <summary>Imposta shim di CountingStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.SeekInt64SeekOrigin">
            <summary>Imposta shim di CountingStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.SetLengthInt64">
            <summary>Imposta shim di CountingStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.WrappedStreamGet">
            <summary>Imposta shim di CountingStream.get_WrappedStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimCountingStream.WriteByteArrayInt32Int32">
            <summary>Imposta shim di CountingStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimExtractProgressEventArgs">
            <summary>Tipo shim di Ionic.Zip.ExtractProgressEventArgs</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.#ctor(Ionic.Zip.ExtractProgressEventArgs)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.AfterExtractEntryStringZipEntryString">
            <summary>Imposta shim di ExtractProgressEventArgs.AfterExtractEntry(String archiveName, ZipEntry entry, String extractLocation)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.AllInstances.EntriesExtractedGet">
            <summary>Imposta shim di ExtractProgressEventArgs.get_EntriesExtracted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.AllInstances.ExtractLocationGet">
            <summary>Imposta shim di ExtractProgressEventArgs.get_ExtractLocation()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.BeforeExtractEntryStringZipEntryString">
            <summary>Imposta shim di ExtractProgressEventArgs.BeforeExtractEntry(String archiveName, ZipEntry entry, String extractLocation)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.ByteUpdateStringZipEntryInt64Int64">
            <summary>Imposta shim di ExtractProgressEventArgs.ByteUpdate(String archiveName, ZipEntry entry, Int64 bytesWritten, Int64 totalBytes)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.Constructor">
            <summary>Imposta shim di ExtractProgressEventArgs.ExtractProgressEventArgs()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.ConstructorStringBooleanInt32Int32ZipEntryString">
            <summary>Imposta shim di ExtractProgressEventArgs.ExtractProgressEventArgs(String archiveName, Boolean before, Int32 entriesTotal, Int32 entriesExtracted, ZipEntry entry, String extractLocation)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.ConstructorStringZipProgressEventType">
            <summary>Imposta shim di ExtractProgressEventArgs.ExtractProgressEventArgs(String archiveName, ZipProgressEventType flavor)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.EntriesExtractedGet">
            <summary>Imposta shim di ExtractProgressEventArgs.get_EntriesExtracted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.ExtractAllCompletedStringString">
            <summary>Imposta shim di ExtractProgressEventArgs.ExtractAllCompleted(String archiveName, String extractLocation)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.ExtractAllStartedStringString">
            <summary>Imposta shim di ExtractProgressEventArgs.ExtractAllStarted(String archiveName, String extractLocation)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.ExtractExistingStringZipEntryString">
            <summary>Imposta shim di ExtractProgressEventArgs.ExtractExisting(String archiveName, ZipEntry entry, String extractLocation)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimExtractProgressEventArgs.ExtractLocationGet">
            <summary>Imposta shim di ExtractProgressEventArgs.get_ExtractLocation()</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimReadOptions">
            <summary>Tipo shim di Ionic.Zip.ReadOptions</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimReadOptions.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimReadOptions.#ctor(Ionic.Zip.ReadOptions)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimReadOptions.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadOptions.AllInstances.ReadProgressGet">
            <summary>Imposta shim di ReadOptions.get_ReadProgress()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadOptions.AllInstances.ReadProgressSetEventHandlerOfReadProgressEventArgs">
            <summary>Imposta shim di ReadOptions.set_ReadProgress(EventHandler`1&lt;ReadProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadOptions.AllInstances.StatusMessageWriterGet">
            <summary>Imposta shim di ReadOptions.get_StatusMessageWriter()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadOptions.AllInstances.StatusMessageWriterSetTextWriter">
            <summary>Imposta shim di ReadOptions.set_StatusMessageWriter(TextWriter value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimReadOptions.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimReadOptions.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadOptions.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadOptions.Constructor">
            <summary>Imposta shim di ReadOptions.ReadOptions()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadOptions.ReadProgressGet">
            <summary>Imposta shim di ReadOptions.get_ReadProgress()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadOptions.ReadProgressSetEventHandlerOfReadProgressEventArgs">
            <summary>Imposta shim di ReadOptions.set_ReadProgress(EventHandler`1&lt;ReadProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadOptions.StatusMessageWriterGet">
            <summary>Imposta shim di ReadOptions.get_StatusMessageWriter()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadOptions.StatusMessageWriterSetTextWriter">
            <summary>Imposta shim di ReadOptions.set_StatusMessageWriter(TextWriter value)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimReadProgressEventArgs">
            <summary>Tipo shim di Ionic.Zip.ReadProgressEventArgs</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimReadProgressEventArgs.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimReadProgressEventArgs.#ctor(Ionic.Zip.ReadProgressEventArgs)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadProgressEventArgs.AfterStringZipEntryInt32">
            <summary>Imposta shim di ReadProgressEventArgs.After(String archiveName, ZipEntry entry, Int32 entriesTotal)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimReadProgressEventArgs.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadProgressEventArgs.BeforeStringInt32">
            <summary>Imposta shim di ReadProgressEventArgs.Before(String archiveName, Int32 entriesTotal)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimReadProgressEventArgs.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimReadProgressEventArgs.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadProgressEventArgs.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadProgressEventArgs.ByteUpdateStringZipEntryInt64Int64">
            <summary>Imposta shim di ReadProgressEventArgs.ByteUpdate(String archiveName, ZipEntry entry, Int64 bytesXferred, Int64 totalBytes)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadProgressEventArgs.CompletedString">
            <summary>Imposta shim di ReadProgressEventArgs.Completed(String archiveName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadProgressEventArgs.Constructor">
            <summary>Imposta shim di ReadProgressEventArgs.ReadProgressEventArgs()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadProgressEventArgs.ConstructorStringZipProgressEventType">
            <summary>Imposta shim di ReadProgressEventArgs.ReadProgressEventArgs(String archiveName, ZipProgressEventType flavor)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimReadProgressEventArgs.StartedString">
            <summary>Imposta shim di ReadProgressEventArgs.Started(String archiveName)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimSaveProgressEventArgs">
            <summary>Tipo shim di Ionic.Zip.SaveProgressEventArgs</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimSaveProgressEventArgs.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimSaveProgressEventArgs.#ctor(Ionic.Zip.SaveProgressEventArgs)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimSaveProgressEventArgs.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSaveProgressEventArgs.AllInstances.EntriesSavedGet">
            <summary>Imposta shim di SaveProgressEventArgs.get_EntriesSaved()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimSaveProgressEventArgs.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimSaveProgressEventArgs.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSaveProgressEventArgs.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSaveProgressEventArgs.ByteUpdateStringZipEntryInt64Int64">
            <summary>Imposta shim di SaveProgressEventArgs.ByteUpdate(String archiveName, ZipEntry entry, Int64 bytesXferred, Int64 totalBytes)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSaveProgressEventArgs.CompletedString">
            <summary>Imposta shim di SaveProgressEventArgs.Completed(String archiveName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSaveProgressEventArgs.Constructor">
            <summary>Imposta shim di SaveProgressEventArgs.SaveProgressEventArgs()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSaveProgressEventArgs.ConstructorStringBooleanInt32Int32ZipEntry">
            <summary>Imposta shim di SaveProgressEventArgs.SaveProgressEventArgs(String archiveName, Boolean before, Int32 entriesTotal, Int32 entriesSaved, ZipEntry entry)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSaveProgressEventArgs.ConstructorStringZipProgressEventType">
            <summary>Imposta shim di SaveProgressEventArgs.SaveProgressEventArgs(String archiveName, ZipProgressEventType flavor)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSaveProgressEventArgs.EntriesSavedGet">
            <summary>Imposta shim di SaveProgressEventArgs.get_EntriesSaved()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSaveProgressEventArgs.StartedString">
            <summary>Imposta shim di SaveProgressEventArgs.Started(String archiveName)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions">
            <summary>Tipo shim di Ionic.Zip.SelfExtractorSaveOptions</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.#ctor(Ionic.Zip.SelfExtractorSaveOptions)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AdditionalCompilerSwitchesGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_AdditionalCompilerSwitches()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AdditionalCompilerSwitchesSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_AdditionalCompilerSwitches(String value)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.AdditionalCompilerSwitchesGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_AdditionalCompilerSwitches()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.AdditionalCompilerSwitchesSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_AdditionalCompilerSwitches(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.CopyrightGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_Copyright()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.CopyrightSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_Copyright(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.DefaultExtractDirectoryGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_DefaultExtractDirectory()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.DefaultExtractDirectorySetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_DefaultExtractDirectory(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.DescriptionGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_Description()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.DescriptionSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_Description(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.ExtractExistingFileGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_ExtractExistingFile()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.ExtractExistingFileSetExtractExistingFileAction">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_ExtractExistingFile(ExtractExistingFileAction value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.FileVersionGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_FileVersion()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.FileVersionSetVersion">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_FileVersion(Version value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.FlavorGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_Flavor()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.FlavorSetSelfExtractorFlavor">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_Flavor(SelfExtractorFlavor value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.IconFileGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_IconFile()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.IconFileSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_IconFile(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.PostExtractCommandLineGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_PostExtractCommandLine()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.PostExtractCommandLineSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_PostExtractCommandLine(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.ProductNameGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_ProductName()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.ProductNameSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_ProductName(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.ProductVersionGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_ProductVersion()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.ProductVersionSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_ProductVersion(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.QuietGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_Quiet()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.QuietSetBoolean">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_Quiet(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.RemoveUnpackedFilesAfterExecuteGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_RemoveUnpackedFilesAfterExecute()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.RemoveUnpackedFilesAfterExecuteSetBoolean">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_RemoveUnpackedFilesAfterExecute(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.SfxExeWindowTitleGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_SfxExeWindowTitle()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.AllInstances.SfxExeWindowTitleSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_SfxExeWindowTitle(String value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.Constructor">
            <summary>Imposta shim di SelfExtractorSaveOptions.SelfExtractorSaveOptions()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.CopyrightGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_Copyright()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.CopyrightSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_Copyright(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.DefaultExtractDirectoryGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_DefaultExtractDirectory()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.DefaultExtractDirectorySetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_DefaultExtractDirectory(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.DescriptionGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_Description()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.DescriptionSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_Description(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.ExtractExistingFileGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_ExtractExistingFile()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.ExtractExistingFileSetExtractExistingFileAction">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_ExtractExistingFile(ExtractExistingFileAction value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.FileVersionGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_FileVersion()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.FileVersionSetVersion">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_FileVersion(Version value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.FlavorGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_Flavor()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.FlavorSetSelfExtractorFlavor">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_Flavor(SelfExtractorFlavor value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.IconFileGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_IconFile()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.IconFileSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_IconFile(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.PostExtractCommandLineGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_PostExtractCommandLine()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.PostExtractCommandLineSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_PostExtractCommandLine(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.ProductNameGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_ProductName()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.ProductNameSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_ProductName(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.ProductVersionGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_ProductVersion()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.ProductVersionSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_ProductVersion(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.QuietGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_Quiet()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.QuietSetBoolean">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_Quiet(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.RemoveUnpackedFilesAfterExecuteGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_RemoveUnpackedFilesAfterExecute()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.RemoveUnpackedFilesAfterExecuteSetBoolean">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_RemoveUnpackedFilesAfterExecute(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.SfxExeWindowTitleGet">
            <summary>Imposta shim di SelfExtractorSaveOptions.get_SfxExeWindowTitle()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSelfExtractorSaveOptions.SfxExeWindowTitleSetString">
            <summary>Imposta shim di SelfExtractorSaveOptions.set_SfxExeWindowTitle(String value)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimSfxGenerationException">
            <summary>Tipo shim di Ionic.Zip.SfxGenerationException</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimSfxGenerationException.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimSfxGenerationException.#ctor(Ionic.Zip.SfxGenerationException)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimSfxGenerationException.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimSfxGenerationException.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimSfxGenerationException.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSfxGenerationException.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimSfxGenerationException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSfxGenerationException.Constructor">
            <summary>Imposta shim di SfxGenerationException.SfxGenerationException()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSfxGenerationException.ConstructorSerializationInfoStreamingContext">
            <summary>Imposta shim di SfxGenerationException.SfxGenerationException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimSfxGenerationException.ConstructorString">
            <summary>Imposta shim di SfxGenerationException.SfxGenerationException(String message)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimZipEntry">
            <summary>Tipo shim di Ionic.Zip.ZipEntry</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipEntry.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipEntry.#ctor(Ionic.Zip.ZipEntry)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AccessedTimeGet">
            <summary>Imposta shim di ZipEntry.get_AccessedTime()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AccessedTimeSetDateTime">
            <summary>Imposta shim di ZipEntry.set_AccessedTime(DateTime value)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimZipEntry.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.AccessedTimeGet">
            <summary>Imposta shim di ZipEntry.get_AccessedTime()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.AccessedTimeSetDateTime">
            <summary>Imposta shim di ZipEntry.set_AccessedTime(DateTime value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.AlternateEncodingUsageGet">
            <summary>Imposta shim di ZipEntry.get_AlternateEncodingUsage()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.AlternateEncodingUsageSetZipOption">
            <summary>Imposta shim di ZipEntry.set_AlternateEncodingUsage(ZipOption value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ArchiveStreamGet">
            <summary>Imposta shim di ZipEntry.get_ArchiveStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.AttributesGet">
            <summary>Imposta shim di ZipEntry.get_Attributes()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.AttributesIndicateDirectoryGet">
            <summary>Imposta shim di ZipEntry.get_AttributesIndicateDirectory()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.AttributesSetFileAttributes">
            <summary>Imposta shim di ZipEntry.set_Attributes(FileAttributes value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.BitFieldGet">
            <summary>Imposta shim di ZipEntry.get_BitField()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.BufferSizeGet">
            <summary>Imposta shim di ZipEntry.get_BufferSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CheckExtractExistingFileStringString">
            <summary>Imposta shim di ZipEntry.CheckExtractExistingFile(String baseDir, String targetFileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CommentGet">
            <summary>Imposta shim di ZipEntry.get_Comment()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CommentSetString">
            <summary>Imposta shim di ZipEntry.set_Comment(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CompressedSizeGet">
            <summary>Imposta shim di ZipEntry.get_CompressedSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CompressionLevelGet">
            <summary>Imposta shim di ZipEntry.get_CompressionLevel()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CompressionLevelSetCompressionLevel">
            <summary>Imposta shim di ZipEntry.set_CompressionLevel(CompressionLevel value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CompressionMethodGet">
            <summary>Imposta shim di ZipEntry.get_CompressionMethod()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CompressionMethodSetCompressionMethod">
            <summary>Imposta shim di ZipEntry.set_CompressionMethod(CompressionMethod value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CompressionRatioGet">
            <summary>Imposta shim di ZipEntry.get_CompressionRatio()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ConstructExtraFieldBoolean">
            <summary>Imposta shim di ZipEntry.ConstructExtraField(Boolean forCentralDirectory)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CopyMetaDataZipEntry">
            <summary>Imposta shim di ZipEntry.CopyMetaData(ZipEntry source)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CopyThroughOneEntryStream">
            <summary>Imposta shim di ZipEntry.CopyThroughOneEntry(Stream outStream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CopyThroughWithNoChangeStream">
            <summary>Imposta shim di ZipEntry.CopyThroughWithNoChange(Stream outstream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CopyThroughWithRecomputeStream">
            <summary>Imposta shim di ZipEntry.CopyThroughWithRecompute(Stream outstream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CrcGet">
            <summary>Imposta shim di ZipEntry.get_Crc()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CreationTimeGet">
            <summary>Imposta shim di ZipEntry.get_CreationTime()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.CreationTimeSetDateTime">
            <summary>Imposta shim di ZipEntry.set_CreationTime(DateTime value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.EmitTimesInUnixFormatWhenSavingGet">
            <summary>Imposta shim di ZipEntry.get_EmitTimesInUnixFormatWhenSaving()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.EmitTimesInUnixFormatWhenSavingSetBoolean">
            <summary>Imposta shim di ZipEntry.set_EmitTimesInUnixFormatWhenSaving(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.EmitTimesInWindowsFormatWhenSavingGet">
            <summary>Imposta shim di ZipEntry.get_EmitTimesInWindowsFormatWhenSaving()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.EmitTimesInWindowsFormatWhenSavingSetBoolean">
            <summary>Imposta shim di ZipEntry.set_EmitTimesInWindowsFormatWhenSaving(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.EncryptionGet">
            <summary>Imposta shim di ZipEntry.get_Encryption()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.EncryptionSetEncryptionAlgorithm">
            <summary>Imposta shim di ZipEntry.set_Encryption(EncryptionAlgorithm value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.EnsurePasswordString">
            <summary>Imposta shim di ZipEntry.EnsurePassword(String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.Extract">
            <summary>Imposta shim di ZipEntry.Extract()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ExtractAndCrcStreamStreamInt16Int64Int64">
            <summary>Imposta shim di ZipEntry.ExtractAndCrc(Stream archiveStream, Stream targetOutput, Int16 compressionMethod, Int64 compressedFileDataSize, Int64 uncompressedSize)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ExtractExistingFileGet">
            <summary>Imposta shim di ZipEntry.get_ExtractExistingFile()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ExtractExistingFileSetExtractExistingFileAction">
            <summary>Imposta shim di ZipEntry.set_ExtractExistingFile(ExtractExistingFileAction value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ExtractExtractExistingFileAction">
            <summary>Imposta shim di ZipEntry.Extract(ExtractExistingFileAction extractExistingFile)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ExtractStream">
            <summary>Imposta shim di ZipEntry.Extract(Stream stream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ExtractString">
            <summary>Imposta shim di ZipEntry.Extract(String baseDirectory)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ExtractStringExtractExistingFileAction">
            <summary>Imposta shim di ZipEntry.Extract(String baseDirectory, ExtractExistingFileAction extractExistingFile)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ExtractToStreamStreamStreamEncryptionAlgorithmInt32">
            <summary>Imposta shim di ZipEntry.ExtractToStream(Stream archiveStream, Stream output, EncryptionAlgorithm encryptionAlgorithm, Int32 expectedCrc32)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ExtractWithPasswordExtractExistingFileActionString">
            <summary>Imposta shim di ZipEntry.ExtractWithPassword(ExtractExistingFileAction extractExistingFile, String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ExtractWithPasswordStreamString">
            <summary>Imposta shim di ZipEntry.ExtractWithPassword(Stream stream, String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ExtractWithPasswordString">
            <summary>Imposta shim di ZipEntry.ExtractWithPassword(String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ExtractWithPasswordStringExtractExistingFileActionString">
            <summary>Imposta shim di ZipEntry.ExtractWithPassword(String baseDirectory, ExtractExistingFileAction extractExistingFile, String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ExtractWithPasswordStringString">
            <summary>Imposta shim di ZipEntry.ExtractWithPassword(String baseDirectory, String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.FigureCrc32">
            <summary>Imposta shim di ZipEntry.FigureCrc32()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.FileDataPositionGet">
            <summary>Imposta shim di ZipEntry.get_FileDataPosition()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.FileNameGet">
            <summary>Imposta shim di ZipEntry.get_FileName()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.FileNameSetString">
            <summary>Imposta shim di ZipEntry.set_FileName(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.FinishOutputStreamStreamCountingStreamStreamStreamCrcCalculatorStream">
            <summary>Imposta shim di ZipEntry.FinishOutputStream(Stream s, CountingStream entryCounter, Stream encryptor, Stream compressor, CrcCalculatorStream output)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.GetEncodedFileNameBytes">
            <summary>Imposta shim di ZipEntry.GetEncodedFileNameBytes()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.GetExtractDecompressorStream">
            <summary>Imposta shim di ZipEntry.GetExtractDecompressor(Stream input2)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.GetExtractDecryptorStream">
            <summary>Imposta shim di ZipEntry.GetExtractDecryptor(Stream input)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.IncludedInMostRecentSaveGet">
            <summary>Imposta shim di ZipEntry.get_IncludedInMostRecentSave()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.InfoGet">
            <summary>Imposta shim di ZipEntry.get_Info()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.InputStreamGet">
            <summary>Imposta shim di ZipEntry.get_InputStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.InputStreamSetStream">
            <summary>Imposta shim di ZipEntry.set_InputStream(Stream value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.InputStreamWasJitProvidedGet">
            <summary>Imposta shim di ZipEntry.get_InputStreamWasJitProvided()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.InternalOpenReaderString">
            <summary>Imposta shim di ZipEntry.InternalOpenReader(String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.IsChangedGet">
            <summary>Imposta shim di ZipEntry.get_IsChanged()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.IsDirectoryGet">
            <summary>Imposta shim di ZipEntry.get_IsDirectory()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.IsDoneWithOutputToBaseDirStringStringOut">
            <summary>Imposta shim di ZipEntry.IsDoneWithOutputToBaseDir(String baseDir, String&amp; outFileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.IsDoneWithOutputToStream">
            <summary>Imposta shim di ZipEntry.IsDoneWithOutputToStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.IsTextGet">
            <summary>Imposta shim di ZipEntry.get_IsText()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.IsTextSetBoolean">
            <summary>Imposta shim di ZipEntry.set_IsText(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.LastModifiedGet">
            <summary>Imposta shim di ZipEntry.get_LastModified()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.LastModifiedSetDateTime">
            <summary>Imposta shim di ZipEntry.set_LastModified(DateTime value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.LengthOfHeaderGet">
            <summary>Imposta shim di ZipEntry.get_LengthOfHeader()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.LocalFileNameGet">
            <summary>Imposta shim di ZipEntry.get_LocalFileName()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.MarkAsDirectory">
            <summary>Imposta shim di ZipEntry.MarkAsDirectory()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.MaybeApplyCompressionStreamInt64">
            <summary>Imposta shim di ZipEntry.MaybeApplyCompression(Stream s, Int64 streamLength)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.MaybeApplyEncryptionStream">
            <summary>Imposta shim di ZipEntry.MaybeApplyEncryption(Stream s)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.MaybeUnsetCompressionMethodForWritingInt32">
            <summary>Imposta shim di ZipEntry.MaybeUnsetCompressionMethodForWriting(Int32 cycle)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ModifiedTimeGet">
            <summary>Imposta shim di ZipEntry.get_ModifiedTime()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ModifiedTimeSetDateTime">
            <summary>Imposta shim di ZipEntry.set_ModifiedTime(DateTime value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.MoveFileInPlaceBooleanStringStringBoolean">
            <summary>Imposta shim di ZipEntry.MoveFileInPlace(Boolean fileExistsBeforeExtraction, String targetFileName, String tmpPath, Boolean checkLaterForResetDirTimes)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.NormalizeFileName">
            <summary>Imposta shim di ZipEntry.NormalizeFileName()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.NotifySaveComplete">
            <summary>Imposta shim di ZipEntry.NotifySaveComplete()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.OnAfterExtractString">
            <summary>Imposta shim di ZipEntry.OnAfterExtract(String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.OnExtractExistingString">
            <summary>Imposta shim di ZipEntry.OnExtractExisting(String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.OnExtractProgressInt64Int64">
            <summary>Imposta shim di ZipEntry.OnExtractProgress(Int64 bytesWritten, Int64 totalBytesToWrite)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.OnWriteBlockInt64Int64">
            <summary>Imposta shim di ZipEntry.OnWriteBlock(Int64 bytesXferred, Int64 totalBytesToXfer)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.OnZipErrorWhileSavingException">
            <summary>Imposta shim di ZipEntry.OnZipErrorWhileSaving(Exception e)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.OpenFileStreamStringBooleanRef">
            <summary>Imposta shim di ZipEntry.OpenFileStream(String tmpPath, Boolean&amp; checkLaterForResetDirTimes)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.OpenReader">
            <summary>Imposta shim di ZipEntry.OpenReader()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.OpenReaderString">
            <summary>Imposta shim di ZipEntry.OpenReader(String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.OutputUsedZip64Get">
            <summary>Imposta shim di ZipEntry.get_OutputUsedZip64()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.PasswordGet">
            <summary>Imposta shim di ZipEntry.get_Password()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.PasswordSetString">
            <summary>Imposta shim di ZipEntry.set_Password(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.PostProcessOutputStream">
            <summary>Imposta shim di ZipEntry.PostProcessOutput(Stream s)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.PrepOutputStreamStreamInt64CountingStreamOutStreamOutStreamOutCrcCalculatorStreamOut">
            <summary>Imposta shim di ZipEntry.PrepOutputStream(Stream s, Int64 streamLength, CountingStream&amp; outputCounter, Stream&amp; encryptor, Stream&amp; compressor, CrcCalculatorStream&amp; output)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.PrepSourceStream">
            <summary>Imposta shim di ZipEntry.PrepSourceStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ProcessExtraFieldInfoZipTimesByteArrayInt32UInt16Int64">
            <summary>Imposta shim di ZipEntry.ProcessExtraFieldInfoZipTimes(Byte[] buffer, Int32 j, UInt16 dataSize, Int64 posn)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ProcessExtraFieldPkwareStrongEncryptionByteArrayInt32">
            <summary>Imposta shim di ZipEntry.ProcessExtraFieldPkwareStrongEncryption(Byte[] Buffer, Int32 j)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ProcessExtraFieldStreamInt16">
            <summary>Imposta shim di ZipEntry.ProcessExtraField(Stream s, Int16 extraFieldLength)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ProcessExtraFieldUnixTimesByteArrayInt32UInt16Int64">
            <summary>Imposta shim di ZipEntry.ProcessExtraFieldUnixTimes(Byte[] buffer, Int32 j, UInt16 dataSize, Int64 posn)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ProcessExtraFieldWinZipAesByteArrayInt32UInt16Int64">
            <summary>Imposta shim di ZipEntry.ProcessExtraFieldWinZipAes(Byte[] buffer, Int32 j, UInt16 dataSize, Int64 posn)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ProcessExtraFieldWindowsTimesByteArrayInt32UInt16Int64">
            <summary>Imposta shim di ZipEntry.ProcessExtraFieldWindowsTimes(Byte[] buffer, Int32 j, UInt16 dataSize, Int64 posn)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ProcessExtraFieldZip64ByteArrayInt32UInt16Int64">
            <summary>Imposta shim di ZipEntry.ProcessExtraFieldZip64(Byte[] buffer, Int32 j, UInt16 dataSize, Int64 posn)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ReadExtraField">
            <summary>Imposta shim di ZipEntry.ReadExtraField()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.RequiresZip64Get">
            <summary>Imposta shim di ZipEntry.get_RequiresZip64()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ResetDirEntry">
            <summary>Imposta shim di ZipEntry.ResetDirEntry()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.SetCompressionGet">
            <summary>Imposta shim di ZipEntry.get_SetCompression()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.SetCompressionSetSetCompressionCallback">
            <summary>Imposta shim di ZipEntry.set_SetCompression(SetCompressionCallback value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.SetEntryTimesDateTimeDateTimeDateTime">
            <summary>Imposta shim di ZipEntry.SetEntryTimes(DateTime created, DateTime accessed, DateTime modified)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.SetFdpLoh">
            <summary>Imposta shim di ZipEntry.SetFdpLoh()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.SetInputAndFigureFileLengthStreamRef">
            <summary>Imposta shim di ZipEntry.SetInputAndFigureFileLength(Stream&amp; input)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.SetZip64Flags">
            <summary>Imposta shim di ZipEntry.SetZip64Flags()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.SetupCryptoForExtractString">
            <summary>Imposta shim di ZipEntry.SetupCryptoForExtract(String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.SourceGet">
            <summary>Imposta shim di ZipEntry.get_Source()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.StoreRelativeOffset">
            <summary>Imposta shim di ZipEntry.StoreRelativeOffset()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.TimestampGet">
            <summary>Imposta shim di ZipEntry.get_Timestamp()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ToString01">
            <summary>Imposta shim di ZipEntry.ToString()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.TraceWriteLineStringObjectArray">
            <summary>Imposta shim di ZipEntry.TraceWriteLine(String format, Object[] varParams)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.UncompressedSizeGet">
            <summary>Imposta shim di ZipEntry.get_UncompressedSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.UseUnicodeAsNecessaryGet">
            <summary>Imposta shim di ZipEntry.get_UseUnicodeAsNecessary()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.UseUnicodeAsNecessarySetBoolean">
            <summary>Imposta shim di ZipEntry.set_UseUnicodeAsNecessary(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.UsesEncryptionGet">
            <summary>Imposta shim di ZipEntry.get_UsesEncryption()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.VerifyCrcAfterExtractInt32EncryptionAlgorithmInt32StreamInt64">
            <summary>Imposta shim di ZipEntry.VerifyCrcAfterExtract(Int32 calculatedCrc32, EncryptionAlgorithm encryptionAlgorithm, Int32 expectedCrc32, Stream archiveStream, Int64 uncompressedSize)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.VersionNeededGet">
            <summary>Imposta shim di ZipEntry.get_VersionNeeded()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.WantReadAgain">
            <summary>Imposta shim di ZipEntry.WantReadAgain()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.WriteCentralDirectoryEntryStream">
            <summary>Imposta shim di ZipEntry.WriteCentralDirectoryEntry(Stream s)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.WriteHeaderStreamInt32">
            <summary>Imposta shim di ZipEntry.WriteHeader(Stream s, Int32 cycle)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.WriteSecurityMetadataStream">
            <summary>Imposta shim di ZipEntry.WriteSecurityMetadata(Stream outstream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.WriteStatusStringObjectArray">
            <summary>Imposta shim di ZipEntry.WriteStatus(String format, Object[] args)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.WriteStream">
            <summary>Imposta shim di ZipEntry.Write(Stream s)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ZipErrorActionGet">
            <summary>Imposta shim di ZipEntry.get_ZipErrorAction()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances.ZipErrorActionSetZipErrorAction">
            <summary>Imposta shim di ZipEntry.set_ZipErrorAction(ZipErrorAction value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances._CheckReadInt32">
            <summary>Imposta shim di ZipEntry._CheckRead(Int32 nbytes)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances._SetTimesStringBoolean">
            <summary>Imposta shim di ZipEntry._SetTimes(String fileOrDirectory, Boolean isFile)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AllInstances._WriteEntryDataStream">
            <summary>Imposta shim di ZipEntry._WriteEntryData(Stream s)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AlternateEncodingUsageGet">
            <summary>Imposta shim di ZipEntry.get_AlternateEncodingUsage()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AlternateEncodingUsageSetZipOption">
            <summary>Imposta shim di ZipEntry.set_AlternateEncodingUsage(ZipOption value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ArchiveStreamGet">
            <summary>Imposta shim di ZipEntry.get_ArchiveStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AttributesGet">
            <summary>Imposta shim di ZipEntry.get_Attributes()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AttributesIndicateDirectoryGet">
            <summary>Imposta shim di ZipEntry.get_AttributesIndicateDirectory()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.AttributesSetFileAttributes">
            <summary>Imposta shim di ZipEntry.set_Attributes(FileAttributes value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipEntry.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipEntry.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.BitFieldGet">
            <summary>Imposta shim di ZipEntry.get_BitField()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.BufferSizeGet">
            <summary>Imposta shim di ZipEntry.get_BufferSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CheckExtractExistingFileStringString">
            <summary>Imposta shim di ZipEntry.CheckExtractExistingFile(String baseDir, String targetFileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CommentGet">
            <summary>Imposta shim di ZipEntry.get_Comment()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CommentSetString">
            <summary>Imposta shim di ZipEntry.set_Comment(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CompressedSizeGet">
            <summary>Imposta shim di ZipEntry.get_CompressedSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CompressionLevelGet">
            <summary>Imposta shim di ZipEntry.get_CompressionLevel()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CompressionLevelSetCompressionLevel">
            <summary>Imposta shim di ZipEntry.set_CompressionLevel(CompressionLevel value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CompressionMethodGet">
            <summary>Imposta shim di ZipEntry.get_CompressionMethod()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CompressionMethodSetCompressionMethod">
            <summary>Imposta shim di ZipEntry.set_CompressionMethod(CompressionMethod value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CompressionRatioGet">
            <summary>Imposta shim di ZipEntry.get_CompressionRatio()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ConstructExtraFieldBoolean">
            <summary>Imposta shim di ZipEntry.ConstructExtraField(Boolean forCentralDirectory)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.Constructor">
            <summary>Imposta shim di ZipEntry.ZipEntry()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CopyMetaDataZipEntry">
            <summary>Imposta shim di ZipEntry.CopyMetaData(ZipEntry source)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CopyThroughOneEntryStream">
            <summary>Imposta shim di ZipEntry.CopyThroughOneEntry(Stream outStream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CopyThroughWithNoChangeStream">
            <summary>Imposta shim di ZipEntry.CopyThroughWithNoChange(Stream outstream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CopyThroughWithRecomputeStream">
            <summary>Imposta shim di ZipEntry.CopyThroughWithRecompute(Stream outstream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CrcGet">
            <summary>Imposta shim di ZipEntry.get_Crc()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CreateForJitStreamProviderStringOpenDelegateCloseDelegate">
            <summary>Imposta shim di ZipEntry.CreateForJitStreamProvider(String nameInArchive, OpenDelegate opener, CloseDelegate closer)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CreateForStreamStringStream">
            <summary>Imposta shim di ZipEntry.CreateForStream(String entryName, Stream s)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CreateForWriterStringWriteDelegate">
            <summary>Imposta shim di ZipEntry.CreateForWriter(String entryName, WriteDelegate d)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CreateForZipOutputStreamString">
            <summary>Imposta shim di ZipEntry.CreateForZipOutputStream(String nameInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CreateFromFileStringString">
            <summary>Imposta shim di ZipEntry.CreateFromFile(String filename, String nameInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CreateFromNothingString">
            <summary>Imposta shim di ZipEntry.CreateFromNothing(String nameInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CreateStringZipEntrySourceObjectObject">
            <summary>Imposta shim di ZipEntry.Create(String nameInArchive, ZipEntrySource source, Object arg1, Object arg2)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CreationTimeGet">
            <summary>Imposta shim di ZipEntry.get_CreationTime()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.CreationTimeSetDateTime">
            <summary>Imposta shim di ZipEntry.set_CreationTime(DateTime value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.EmitTimesInUnixFormatWhenSavingGet">
            <summary>Imposta shim di ZipEntry.get_EmitTimesInUnixFormatWhenSaving()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.EmitTimesInUnixFormatWhenSavingSetBoolean">
            <summary>Imposta shim di ZipEntry.set_EmitTimesInUnixFormatWhenSaving(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.EmitTimesInWindowsFormatWhenSavingGet">
            <summary>Imposta shim di ZipEntry.get_EmitTimesInWindowsFormatWhenSaving()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.EmitTimesInWindowsFormatWhenSavingSetBoolean">
            <summary>Imposta shim di ZipEntry.set_EmitTimesInWindowsFormatWhenSaving(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.EncryptionGet">
            <summary>Imposta shim di ZipEntry.get_Encryption()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.EncryptionSetEncryptionAlgorithm">
            <summary>Imposta shim di ZipEntry.set_Encryption(EncryptionAlgorithm value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.EnsurePasswordString">
            <summary>Imposta shim di ZipEntry.EnsurePassword(String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.Extract">
            <summary>Imposta shim di ZipEntry.Extract()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ExtractAndCrcStreamStreamInt16Int64Int64">
            <summary>Imposta shim di ZipEntry.ExtractAndCrc(Stream archiveStream, Stream targetOutput, Int16 compressionMethod, Int64 compressedFileDataSize, Int64 uncompressedSize)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ExtractExistingFileGet">
            <summary>Imposta shim di ZipEntry.get_ExtractExistingFile()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ExtractExistingFileSetExtractExistingFileAction">
            <summary>Imposta shim di ZipEntry.set_ExtractExistingFile(ExtractExistingFileAction value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ExtractExtractExistingFileAction">
            <summary>Imposta shim di ZipEntry.Extract(ExtractExistingFileAction extractExistingFile)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ExtractStream">
            <summary>Imposta shim di ZipEntry.Extract(Stream stream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ExtractString">
            <summary>Imposta shim di ZipEntry.Extract(String baseDirectory)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ExtractStringExtractExistingFileAction">
            <summary>Imposta shim di ZipEntry.Extract(String baseDirectory, ExtractExistingFileAction extractExistingFile)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ExtractToStreamStreamStreamEncryptionAlgorithmInt32">
            <summary>Imposta shim di ZipEntry.ExtractToStream(Stream archiveStream, Stream output, EncryptionAlgorithm encryptionAlgorithm, Int32 expectedCrc32)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ExtractWithPasswordExtractExistingFileActionString">
            <summary>Imposta shim di ZipEntry.ExtractWithPassword(ExtractExistingFileAction extractExistingFile, String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ExtractWithPasswordStreamString">
            <summary>Imposta shim di ZipEntry.ExtractWithPassword(Stream stream, String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ExtractWithPasswordString">
            <summary>Imposta shim di ZipEntry.ExtractWithPassword(String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ExtractWithPasswordStringExtractExistingFileActionString">
            <summary>Imposta shim di ZipEntry.ExtractWithPassword(String baseDirectory, ExtractExistingFileAction extractExistingFile, String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ExtractWithPasswordStringString">
            <summary>Imposta shim di ZipEntry.ExtractWithPassword(String baseDirectory, String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.FigureCrc32">
            <summary>Imposta shim di ZipEntry.FigureCrc32()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.FileDataPositionGet">
            <summary>Imposta shim di ZipEntry.get_FileDataPosition()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.FileNameGet">
            <summary>Imposta shim di ZipEntry.get_FileName()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.FileNameSetString">
            <summary>Imposta shim di ZipEntry.set_FileName(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.FindExtraFieldSegmentByteArrayInt32UInt16">
            <summary>Imposta shim di ZipEntry.FindExtraFieldSegment(Byte[] extra, Int32 offx, UInt16 targetHeaderId)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.FinishOutputStreamStreamCountingStreamStreamStreamCrcCalculatorStream">
            <summary>Imposta shim di ZipEntry.FinishOutputStream(Stream s, CountingStream entryCounter, Stream encryptor, Stream compressor, CrcCalculatorStream output)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.GetEncodedFileNameBytes">
            <summary>Imposta shim di ZipEntry.GetEncodedFileNameBytes()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.GetExtractDecompressorStream">
            <summary>Imposta shim di ZipEntry.GetExtractDecompressor(Stream input2)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.GetExtractDecryptorStream">
            <summary>Imposta shim di ZipEntry.GetExtractDecryptor(Stream input)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.GetKeyStrengthInBitsEncryptionAlgorithm">
            <summary>Imposta shim di ZipEntry.GetKeyStrengthInBits(EncryptionAlgorithm a)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.GetLengthOfCryptoHeaderBytesEncryptionAlgorithm">
            <summary>Imposta shim di ZipEntry.GetLengthOfCryptoHeaderBytes(EncryptionAlgorithm a)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.GetUnsupportedAlgorithmUInt32">
            <summary>Imposta shim di ZipEntry.GetUnsupportedAlgorithm(UInt32 unsupportedAlgorithmId)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.GetUnsupportedCompressionMethodInt16">
            <summary>Imposta shim di ZipEntry.GetUnsupportedCompressionMethod(Int16 compressionMethod)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.HandlePK00PrefixStream">
            <summary>Imposta shim di ZipEntry.HandlePK00Prefix(Stream s)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.HandleUnexpectedDataDescriptorZipEntry">
            <summary>Imposta shim di ZipEntry.HandleUnexpectedDataDescriptor(ZipEntry entry)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.IncludedInMostRecentSaveGet">
            <summary>Imposta shim di ZipEntry.get_IncludedInMostRecentSave()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.InfoGet">
            <summary>Imposta shim di ZipEntry.get_Info()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.InputStreamGet">
            <summary>Imposta shim di ZipEntry.get_InputStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.InputStreamSetStream">
            <summary>Imposta shim di ZipEntry.set_InputStream(Stream value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.InputStreamWasJitProvidedGet">
            <summary>Imposta shim di ZipEntry.get_InputStreamWasJitProvided()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.InternalOpenReaderString">
            <summary>Imposta shim di ZipEntry.InternalOpenReader(String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.IsChangedGet">
            <summary>Imposta shim di ZipEntry.get_IsChanged()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.IsDirectoryGet">
            <summary>Imposta shim di ZipEntry.get_IsDirectory()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.IsDoneWithOutputToBaseDirStringStringOut">
            <summary>Imposta shim di ZipEntry.IsDoneWithOutputToBaseDir(String baseDir, String&amp; outFileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.IsDoneWithOutputToStream">
            <summary>Imposta shim di ZipEntry.IsDoneWithOutputToStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.IsNotValidSigInt32">
            <summary>Imposta shim di ZipEntry.IsNotValidSig(Int32 signature)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.IsNotValidZipDirEntrySigInt32">
            <summary>Imposta shim di ZipEntry.IsNotValidZipDirEntrySig(Int32 signature)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.IsTextGet">
            <summary>Imposta shim di ZipEntry.get_IsText()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.IsTextSetBoolean">
            <summary>Imposta shim di ZipEntry.set_IsText(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.LastModifiedGet">
            <summary>Imposta shim di ZipEntry.get_LastModified()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.LastModifiedSetDateTime">
            <summary>Imposta shim di ZipEntry.set_LastModified(DateTime value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.LengthOfHeaderGet">
            <summary>Imposta shim di ZipEntry.get_LengthOfHeader()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.LocalFileNameGet">
            <summary>Imposta shim di ZipEntry.get_LocalFileName()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.MarkAsDirectory">
            <summary>Imposta shim di ZipEntry.MarkAsDirectory()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.MaybeApplyCompressionStreamInt64">
            <summary>Imposta shim di ZipEntry.MaybeApplyCompression(Stream s, Int64 streamLength)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.MaybeApplyEncryptionStream">
            <summary>Imposta shim di ZipEntry.MaybeApplyEncryption(Stream s)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.MaybeUnsetCompressionMethodForWritingInt32">
            <summary>Imposta shim di ZipEntry.MaybeUnsetCompressionMethodForWriting(Int32 cycle)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ModifiedTimeGet">
            <summary>Imposta shim di ZipEntry.get_ModifiedTime()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ModifiedTimeSetDateTime">
            <summary>Imposta shim di ZipEntry.set_ModifiedTime(DateTime value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.MoveFileInPlaceBooleanStringStringBoolean">
            <summary>Imposta shim di ZipEntry.MoveFileInPlace(Boolean fileExistsBeforeExtraction, String targetFileName, String tmpPath, Boolean checkLaterForResetDirTimes)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.NameInArchiveStringString">
            <summary>Imposta shim di ZipEntry.NameInArchive(String filename, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.NormalizeFileName">
            <summary>Imposta shim di ZipEntry.NormalizeFileName()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.NotifySaveComplete">
            <summary>Imposta shim di ZipEntry.NotifySaveComplete()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.OnAfterExtractString">
            <summary>Imposta shim di ZipEntry.OnAfterExtract(String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.OnBeforeExtractZipEntryStringZipFile">
            <summary>Imposta shim di ZipEntry.OnBeforeExtract(ZipEntry zipEntryInstance, String path, ZipFile zipFile)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.OnExtractExistingString">
            <summary>Imposta shim di ZipEntry.OnExtractExisting(String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.OnExtractProgressInt64Int64">
            <summary>Imposta shim di ZipEntry.OnExtractProgress(Int64 bytesWritten, Int64 totalBytesToWrite)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.OnWriteBlockInt64Int64">
            <summary>Imposta shim di ZipEntry.OnWriteBlock(Int64 bytesXferred, Int64 totalBytesToXfer)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.OnZipErrorWhileSavingException">
            <summary>Imposta shim di ZipEntry.OnZipErrorWhileSaving(Exception e)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.OpenFileStreamStringBooleanRef">
            <summary>Imposta shim di ZipEntry.OpenFileStream(String tmpPath, Boolean&amp; checkLaterForResetDirTimes)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.OpenReader">
            <summary>Imposta shim di ZipEntry.OpenReader()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.OpenReaderString">
            <summary>Imposta shim di ZipEntry.OpenReader(String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.OutputUsedZip64Get">
            <summary>Imposta shim di ZipEntry.get_OutputUsedZip64()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.PasswordGet">
            <summary>Imposta shim di ZipEntry.get_Password()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.PasswordSetString">
            <summary>Imposta shim di ZipEntry.set_Password(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.PostProcessOutputStream">
            <summary>Imposta shim di ZipEntry.PostProcessOutput(Stream s)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.PrepSourceStream">
            <summary>Imposta shim di ZipEntry.PrepSourceStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ProcessExtraFieldInfoZipTimesByteArrayInt32UInt16Int64">
            <summary>Imposta shim di ZipEntry.ProcessExtraFieldInfoZipTimes(Byte[] buffer, Int32 j, UInt16 dataSize, Int64 posn)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ProcessExtraFieldPkwareStrongEncryptionByteArrayInt32">
            <summary>Imposta shim di ZipEntry.ProcessExtraFieldPkwareStrongEncryption(Byte[] Buffer, Int32 j)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ProcessExtraFieldStreamInt16">
            <summary>Imposta shim di ZipEntry.ProcessExtraField(Stream s, Int16 extraFieldLength)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ProcessExtraFieldUnixTimesByteArrayInt32UInt16Int64">
            <summary>Imposta shim di ZipEntry.ProcessExtraFieldUnixTimes(Byte[] buffer, Int32 j, UInt16 dataSize, Int64 posn)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ProcessExtraFieldWinZipAesByteArrayInt32UInt16Int64">
            <summary>Imposta shim di ZipEntry.ProcessExtraFieldWinZipAes(Byte[] buffer, Int32 j, UInt16 dataSize, Int64 posn)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ProcessExtraFieldWindowsTimesByteArrayInt32UInt16Int64">
            <summary>Imposta shim di ZipEntry.ProcessExtraFieldWindowsTimes(Byte[] buffer, Int32 j, UInt16 dataSize, Int64 posn)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ProcessExtraFieldZip64ByteArrayInt32UInt16Int64">
            <summary>Imposta shim di ZipEntry.ProcessExtraFieldZip64(Byte[] buffer, Int32 j, UInt16 dataSize, Int64 posn)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ReadDirEntryZipFileDictionaryOfStringObject">
            <summary>Imposta shim di ZipEntry.ReadDirEntry(ZipFile zf, Dictionary`2&lt;String,Object&gt; previouslySeen)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ReadExtraField">
            <summary>Imposta shim di ZipEntry.ReadExtraField()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ReadWeakEncryptionHeaderStreamByteArray">
            <summary>Imposta shim di ZipEntry.ReadWeakEncryptionHeader(Stream s, Byte[] buffer)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ReallyDeleteString">
            <summary>Imposta shim di ZipEntry.ReallyDelete(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.RequiresZip64Get">
            <summary>Imposta shim di ZipEntry.get_RequiresZip64()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ResetDirEntry">
            <summary>Imposta shim di ZipEntry.ResetDirEntry()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.SetCompressionGet">
            <summary>Imposta shim di ZipEntry.get_SetCompression()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.SetCompressionSetSetCompressionCallback">
            <summary>Imposta shim di ZipEntry.set_SetCompression(SetCompressionCallback value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.SetEntryTimesDateTimeDateTimeDateTime">
            <summary>Imposta shim di ZipEntry.SetEntryTimes(DateTime created, DateTime accessed, DateTime modified)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.SetFdpLoh">
            <summary>Imposta shim di ZipEntry.SetFdpLoh()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.SetInputAndFigureFileLengthStreamRef">
            <summary>Imposta shim di ZipEntry.SetInputAndFigureFileLength(Stream&amp; input)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.SetZip64Flags">
            <summary>Imposta shim di ZipEntry.SetZip64Flags()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.SetupCryptoForExtractString">
            <summary>Imposta shim di ZipEntry.SetupCryptoForExtract(String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.SourceGet">
            <summary>Imposta shim di ZipEntry.get_Source()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.StaticConstructor">
            <summary>Imposta shim di ZipEntry.ZipEntry()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.StoreRelativeOffset">
            <summary>Imposta shim di ZipEntry.StoreRelativeOffset()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.TimestampGet">
            <summary>Imposta shim di ZipEntry.get_Timestamp()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ToString">
            <summary>Imposta shim di ZipEntry.ToString()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.TraceWriteLineStringObjectArray">
            <summary>Imposta shim di ZipEntry.TraceWriteLine(String format, Object[] varParams)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.UncompressedSizeGet">
            <summary>Imposta shim di ZipEntry.get_UncompressedSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.UseUnicodeAsNecessaryGet">
            <summary>Imposta shim di ZipEntry.get_UseUnicodeAsNecessary()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.UseUnicodeAsNecessarySetBoolean">
            <summary>Imposta shim di ZipEntry.set_UseUnicodeAsNecessary(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.UsesEncryptionGet">
            <summary>Imposta shim di ZipEntry.get_UsesEncryption()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ValidateCompressionInt16StringString">
            <summary>Imposta shim di ZipEntry.ValidateCompression(Int16 compressionMethod, String fileName, String compressionMethodName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ValidateEncryptionEncryptionAlgorithmStringUInt32">
            <summary>Imposta shim di ZipEntry.ValidateEncryption(EncryptionAlgorithm encryptionAlgorithm, String fileName, UInt32 unsupportedAlgorithmId)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.VerifyCrcAfterExtractInt32EncryptionAlgorithmInt32StreamInt64">
            <summary>Imposta shim di ZipEntry.VerifyCrcAfterExtract(Int32 calculatedCrc32, EncryptionAlgorithm encryptionAlgorithm, Int32 expectedCrc32, Stream archiveStream, Int64 uncompressedSize)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.VersionNeededGet">
            <summary>Imposta shim di ZipEntry.get_VersionNeeded()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.WantReadAgain">
            <summary>Imposta shim di ZipEntry.WantReadAgain()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.WriteCentralDirectoryEntryStream">
            <summary>Imposta shim di ZipEntry.WriteCentralDirectoryEntry(Stream s)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.WriteHeaderStreamInt32">
            <summary>Imposta shim di ZipEntry.WriteHeader(Stream s, Int32 cycle)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.WriteSecurityMetadataStream">
            <summary>Imposta shim di ZipEntry.WriteSecurityMetadata(Stream outstream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.WriteStatusStringObjectArray">
            <summary>Imposta shim di ZipEntry.WriteStatus(String format, Object[] args)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.WriteStream">
            <summary>Imposta shim di ZipEntry.Write(Stream s)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ZipErrorActionGet">
            <summary>Imposta shim di ZipEntry.get_ZipErrorAction()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry.ZipErrorActionSetZipErrorAction">
            <summary>Imposta shim di ZipEntry.set_ZipErrorAction(ZipErrorAction value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry._CheckReadInt32">
            <summary>Imposta shim di ZipEntry._CheckRead(Int32 nbytes)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry._SetTimesStringBoolean">
            <summary>Imposta shim di ZipEntry._SetTimes(String fileOrDirectory, Boolean isFile)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipEntry._WriteEntryDataStream">
            <summary>Imposta shim di ZipEntry._WriteEntryData(Stream s)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimZipErrorEventArgs">
            <summary>Tipo shim di Ionic.Zip.ZipErrorEventArgs</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipErrorEventArgs.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipErrorEventArgs.#ctor(Ionic.Zip.ZipErrorEventArgs)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimZipErrorEventArgs.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipErrorEventArgs.AllInstances.ExceptionGet">
            <summary>Imposta shim di ZipErrorEventArgs.get_Exception()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipErrorEventArgs.AllInstances.FileNameGet">
            <summary>Imposta shim di ZipErrorEventArgs.get_FileName()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipErrorEventArgs.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipErrorEventArgs.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipErrorEventArgs.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipErrorEventArgs.Constructor">
            <summary>Imposta shim di ZipErrorEventArgs.ZipErrorEventArgs()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipErrorEventArgs.ExceptionGet">
            <summary>Imposta shim di ZipErrorEventArgs.get_Exception()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipErrorEventArgs.FileNameGet">
            <summary>Imposta shim di ZipErrorEventArgs.get_FileName()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipErrorEventArgs.SavingStringZipEntryException">
            <summary>Imposta shim di ZipErrorEventArgs.Saving(String archiveName, ZipEntry entry, Exception exception)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimZipException">
            <summary>Tipo shim di Ionic.Zip.ZipException</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipException.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipException.#ctor(Ionic.Zip.ZipException)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimZipException.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipException.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipException.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipException.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipException.Constructor">
            <summary>Imposta shim di ZipException.ZipException()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipException.ConstructorSerializationInfoStreamingContext">
            <summary>Imposta shim di ZipException.ZipException(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipException.ConstructorString">
            <summary>Imposta shim di ZipException.ZipException(String message)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipException.ConstructorStringException">
            <summary>Imposta shim di ZipException.ZipException(String message, Exception innerException)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimZipFile">
            <summary>Tipo shim di Ionic.Zip.ZipFile</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipFile.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipFile.#ctor(Ionic.Zip.ZipFile)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddDirectoryByNameString">
            <summary>Imposta shim di ZipFile.AddDirectoryByName(String directoryNameInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddDirectoryString">
            <summary>Imposta shim di ZipFile.AddDirectory(String directoryName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddDirectoryStringString">
            <summary>Imposta shim di ZipFile.AddDirectory(String directoryName, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddDirectoryWillTraverseReparsePointsGet">
            <summary>Imposta shim di ZipFile.get_AddDirectoryWillTraverseReparsePoints()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddDirectoryWillTraverseReparsePointsSetBoolean">
            <summary>Imposta shim di ZipFile.set_AddDirectoryWillTraverseReparsePoints(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddEntryStringByteArray">
            <summary>Imposta shim di ZipFile.AddEntry(String entryName, Byte[] byteContent)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddEntryStringOpenDelegateCloseDelegate">
            <summary>Imposta shim di ZipFile.AddEntry(String entryName, OpenDelegate opener, CloseDelegate closer)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddEntryStringStream">
            <summary>Imposta shim di ZipFile.AddEntry(String entryName, Stream stream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddEntryStringString">
            <summary>Imposta shim di ZipFile.AddEntry(String entryName, String content)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddEntryStringWriteDelegate">
            <summary>Imposta shim di ZipFile.AddEntry(String entryName, WriteDelegate writer)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddFileString">
            <summary>Imposta shim di ZipFile.AddFile(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddFileStringString">
            <summary>Imposta shim di ZipFile.AddFile(String fileName, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddFilesIEnumerableOfString">
            <summary>Imposta shim di ZipFile.AddFiles(IEnumerable`1&lt;String&gt; fileNames)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddFilesIEnumerableOfStringBooleanString">
            <summary>Imposta shim di ZipFile.AddFiles(IEnumerable`1&lt;String&gt; fileNames, Boolean preserveDirHierarchy, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddFilesIEnumerableOfStringString">
            <summary>Imposta shim di ZipFile.AddFiles(IEnumerable`1&lt;String&gt; fileNames, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddItemString">
            <summary>Imposta shim di ZipFile.AddItem(String fileOrDirectoryName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddItemStringString">
            <summary>Imposta shim di ZipFile.AddItem(String fileOrDirectoryName, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddProgressAddEventHandlerOfAddProgressEventArgs">
            <summary>Imposta shim di ZipFile.add_AddProgress(EventHandler`1&lt;AddProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddProgressRemoveEventHandlerOfAddProgressEventArgs">
            <summary>Imposta shim di ZipFile.remove_AddProgress(EventHandler`1&lt;AddProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddSelectedFilesString">
            <summary>Imposta shim di ZipFile.AddSelectedFiles(String selectionCriteria)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddSelectedFilesStringBoolean">
            <summary>Imposta shim di ZipFile.AddSelectedFiles(String selectionCriteria, Boolean recurseDirectories)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddSelectedFilesStringString">
            <summary>Imposta shim di ZipFile.AddSelectedFiles(String selectionCriteria, String directoryOnDisk)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddSelectedFilesStringStringBoolean">
            <summary>Imposta shim di ZipFile.AddSelectedFiles(String selectionCriteria, String directoryOnDisk, Boolean recurseDirectories)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddSelectedFilesStringStringString">
            <summary>Imposta shim di ZipFile.AddSelectedFiles(String selectionCriteria, String directoryOnDisk, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AddSelectedFilesStringStringStringBoolean">
            <summary>Imposta shim di ZipFile.AddSelectedFiles(String selectionCriteria, String directoryOnDisk, String directoryPathInArchive, Boolean recurseDirectories)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AfterAddEntryZipEntry">
            <summary>Imposta shim di ZipFile.AfterAddEntry(ZipEntry entry)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimZipFile.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddDirectoryByNameString">
            <summary>Imposta shim di ZipFile.AddDirectoryByName(String directoryNameInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddDirectoryString">
            <summary>Imposta shim di ZipFile.AddDirectory(String directoryName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddDirectoryStringString">
            <summary>Imposta shim di ZipFile.AddDirectory(String directoryName, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddDirectoryWillTraverseReparsePointsGet">
            <summary>Imposta shim di ZipFile.get_AddDirectoryWillTraverseReparsePoints()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddDirectoryWillTraverseReparsePointsSetBoolean">
            <summary>Imposta shim di ZipFile.set_AddDirectoryWillTraverseReparsePoints(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddEntryStringByteArray">
            <summary>Imposta shim di ZipFile.AddEntry(String entryName, Byte[] byteContent)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddEntryStringOpenDelegateCloseDelegate">
            <summary>Imposta shim di ZipFile.AddEntry(String entryName, OpenDelegate opener, CloseDelegate closer)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddEntryStringStream">
            <summary>Imposta shim di ZipFile.AddEntry(String entryName, Stream stream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddEntryStringString">
            <summary>Imposta shim di ZipFile.AddEntry(String entryName, String content)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddEntryStringWriteDelegate">
            <summary>Imposta shim di ZipFile.AddEntry(String entryName, WriteDelegate writer)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddFileString">
            <summary>Imposta shim di ZipFile.AddFile(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddFileStringString">
            <summary>Imposta shim di ZipFile.AddFile(String fileName, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddFilesIEnumerableOfString">
            <summary>Imposta shim di ZipFile.AddFiles(IEnumerable`1&lt;String&gt; fileNames)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddFilesIEnumerableOfStringBooleanString">
            <summary>Imposta shim di ZipFile.AddFiles(IEnumerable`1&lt;String&gt; fileNames, Boolean preserveDirHierarchy, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddFilesIEnumerableOfStringString">
            <summary>Imposta shim di ZipFile.AddFiles(IEnumerable`1&lt;String&gt; fileNames, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddItemString">
            <summary>Imposta shim di ZipFile.AddItem(String fileOrDirectoryName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddItemStringString">
            <summary>Imposta shim di ZipFile.AddItem(String fileOrDirectoryName, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddProgressAddEventHandlerOfAddProgressEventArgs">
            <summary>Imposta shim di ZipFile.add_AddProgress(EventHandler`1&lt;AddProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddProgressRemoveEventHandlerOfAddProgressEventArgs">
            <summary>Imposta shim di ZipFile.remove_AddProgress(EventHandler`1&lt;AddProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddSelectedFilesString">
            <summary>Imposta shim di ZipFile.AddSelectedFiles(String selectionCriteria)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddSelectedFilesStringBoolean">
            <summary>Imposta shim di ZipFile.AddSelectedFiles(String selectionCriteria, Boolean recurseDirectories)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddSelectedFilesStringString">
            <summary>Imposta shim di ZipFile.AddSelectedFiles(String selectionCriteria, String directoryOnDisk)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddSelectedFilesStringStringBoolean">
            <summary>Imposta shim di ZipFile.AddSelectedFiles(String selectionCriteria, String directoryOnDisk, Boolean recurseDirectories)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddSelectedFilesStringStringString">
            <summary>Imposta shim di ZipFile.AddSelectedFiles(String selectionCriteria, String directoryOnDisk, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AddSelectedFilesStringStringStringBoolean">
            <summary>Imposta shim di ZipFile.AddSelectedFiles(String selectionCriteria, String directoryOnDisk, String directoryPathInArchive, Boolean recurseDirectories)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AfterAddEntryZipEntry">
            <summary>Imposta shim di ZipFile.AfterAddEntry(ZipEntry entry)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AlternateEncodingUsageGet">
            <summary>Imposta shim di ZipFile.get_AlternateEncodingUsage()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AlternateEncodingUsageSetZipOption">
            <summary>Imposta shim di ZipFile.set_AlternateEncodingUsage(ZipOption value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.AnyCaseInsensitiveMatchesString">
            <summary>Imposta shim di ZipFile.AnyCaseInsensitiveMatches(String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ArchiveNameForEventGet">
            <summary>Imposta shim di ZipFile.get_ArchiveNameForEvent()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.BufferSizeGet">
            <summary>Imposta shim di ZipFile.get_BufferSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.BufferSizeSetInt32">
            <summary>Imposta shim di ZipFile.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.CaseSensitiveRetrievalGet">
            <summary>Imposta shim di ZipFile.get_CaseSensitiveRetrieval()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.CaseSensitiveRetrievalSetBoolean">
            <summary>Imposta shim di ZipFile.set_CaseSensitiveRetrieval(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.CleanupAfterSaveOperation">
            <summary>Imposta shim di ZipFile.CleanupAfterSaveOperation()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.CodecBufferSizeGet">
            <summary>Imposta shim di ZipFile.get_CodecBufferSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.CodecBufferSizeSetInt32">
            <summary>Imposta shim di ZipFile.set_CodecBufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.CommentGet">
            <summary>Imposta shim di ZipFile.get_Comment()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.CommentSetString">
            <summary>Imposta shim di ZipFile.set_Comment(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.CompressionLevelGet">
            <summary>Imposta shim di ZipFile.get_CompressionLevel()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.CompressionLevelSetCompressionLevel">
            <summary>Imposta shim di ZipFile.set_CompressionLevel(CompressionLevel value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.CompressionMethodGet">
            <summary>Imposta shim di ZipFile.get_CompressionMethod()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.CompressionMethodSetCompressionMethod">
            <summary>Imposta shim di ZipFile.set_CompressionMethod(CompressionMethod value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ContainsEntryString">
            <summary>Imposta shim di ZipFile.ContainsEntry(String name)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.CountGet">
            <summary>Imposta shim di ZipFile.get_Count()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.DeleteFileWithRetryString">
            <summary>Imposta shim di ZipFile.DeleteFileWithRetry(String filename)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.Dispose">
            <summary>Imposta shim di ZipFile.Dispose()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.DisposeBoolean">
            <summary>Imposta shim di ZipFile.Dispose(Boolean disposeManagedResources)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.EmitTimesInUnixFormatWhenSavingGet">
            <summary>Imposta shim di ZipFile.get_EmitTimesInUnixFormatWhenSaving()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.EmitTimesInUnixFormatWhenSavingSetBoolean">
            <summary>Imposta shim di ZipFile.set_EmitTimesInUnixFormatWhenSaving(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.EmitTimesInWindowsFormatWhenSavingGet">
            <summary>Imposta shim di ZipFile.get_EmitTimesInWindowsFormatWhenSaving()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.EmitTimesInWindowsFormatWhenSavingSetBoolean">
            <summary>Imposta shim di ZipFile.set_EmitTimesInWindowsFormatWhenSaving(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.EncryptionGet">
            <summary>Imposta shim di ZipFile.get_Encryption()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.EncryptionSetEncryptionAlgorithm">
            <summary>Imposta shim di ZipFile.set_Encryption(EncryptionAlgorithm value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.EnsureendInSlashString">
            <summary>Imposta shim di ZipFile.EnsureendInSlash(String s)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.EntriesGet">
            <summary>Imposta shim di ZipFile.get_Entries()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.EntriesSortedGet">
            <summary>Imposta shim di ZipFile.get_EntriesSorted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.EntryFileNamesGet">
            <summary>Imposta shim di ZipFile.get_EntryFileNames()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ExtractAllString">
            <summary>Imposta shim di ZipFile.ExtractAll(String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ExtractAllStringExtractExistingFileAction">
            <summary>Imposta shim di ZipFile.ExtractAll(String path, ExtractExistingFileAction extractExistingFile)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ExtractExistingFileGet">
            <summary>Imposta shim di ZipFile.get_ExtractExistingFile()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ExtractExistingFileSetExtractExistingFileAction">
            <summary>Imposta shim di ZipFile.set_ExtractExistingFile(ExtractExistingFileAction value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ExtractProgressAddEventHandlerOfExtractProgressEventArgs">
            <summary>Imposta shim di ZipFile.add_ExtractProgress(EventHandler`1&lt;ExtractProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ExtractProgressRemoveEventHandlerOfExtractProgressEventArgs">
            <summary>Imposta shim di ZipFile.remove_ExtractProgress(EventHandler`1&lt;ExtractProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ExtractSelectedEntriesString">
            <summary>Imposta shim di ZipFile.ExtractSelectedEntries(String selectionCriteria)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ExtractSelectedEntriesStringExtractExistingFileAction">
            <summary>Imposta shim di ZipFile.ExtractSelectedEntries(String selectionCriteria, ExtractExistingFileAction extractExistingFile)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ExtractSelectedEntriesStringString">
            <summary>Imposta shim di ZipFile.ExtractSelectedEntries(String selectionCriteria, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ExtractSelectedEntriesStringStringString">
            <summary>Imposta shim di ZipFile.ExtractSelectedEntries(String selectionCriteria, String directoryInArchive, String extractDirectory)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ExtractSelectedEntriesStringStringStringExtractExistingFileAction">
            <summary>Imposta shim di ZipFile.ExtractSelectedEntries(String selectionCriteria, String directoryPathInArchive, String extractDirectory, ExtractExistingFileAction extractExistingFile)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.FlattenFoldersOnExtractGet">
            <summary>Imposta shim di ZipFile.get_FlattenFoldersOnExtract()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.FlattenFoldersOnExtractSetBoolean">
            <summary>Imposta shim di ZipFile.set_FlattenFoldersOnExtract(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.FullScanGet">
            <summary>Imposta shim di ZipFile.get_FullScan()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.FullScanSetBoolean">
            <summary>Imposta shim di ZipFile.set_FullScan(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.GetEnumerator">
            <summary>Imposta shim di ZipFile.GetEnumerator()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.GetNewEnum">
            <summary>Imposta shim di ZipFile.GetNewEnum()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.IgnoreDuplicateFilesGet">
            <summary>Imposta shim di ZipFile.get_IgnoreDuplicateFiles()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.IgnoreDuplicateFilesSetBoolean">
            <summary>Imposta shim di ZipFile.set_IgnoreDuplicateFiles(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.InfoGet">
            <summary>Imposta shim di ZipFile.get_Info()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.InitializeString">
            <summary>Imposta shim di ZipFile.Initialize(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.InputUsesZip64Get">
            <summary>Imposta shim di ZipFile.get_InputUsesZip64()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.InternalAddEntryStringZipEntry">
            <summary>Imposta shim di ZipFile.InternalAddEntry(String name, ZipEntry entry)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ItemGetInt32">
            <summary>Imposta shim di ZipFile.get_Item(Int32 ix)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ItemGetString">
            <summary>Imposta shim di ZipFile.get_Item(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.LengthOfReadStreamGet">
            <summary>Imposta shim di ZipFile.get_LengthOfReadStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.MaxOutputSegmentSizeGet">
            <summary>Imposta shim di ZipFile.get_MaxOutputSegmentSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.MaxOutputSegmentSizeSetInt32">
            <summary>Imposta shim di ZipFile.set_MaxOutputSegmentSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.NameGet">
            <summary>Imposta shim di ZipFile.get_Name()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.NameSetString">
            <summary>Imposta shim di ZipFile.set_Name(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.NotifyEntryChanged">
            <summary>Imposta shim di ZipFile.NotifyEntryChanged()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.NumberOfSegmentsForMostRecentSaveGet">
            <summary>Imposta shim di ZipFile.get_NumberOfSegmentsForMostRecentSave()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnAddCompleted">
            <summary>Imposta shim di ZipFile.OnAddCompleted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnAddStarted">
            <summary>Imposta shim di ZipFile.OnAddStarted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnExtractAllCompletedString">
            <summary>Imposta shim di ZipFile.OnExtractAllCompleted(String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnExtractAllStartedString">
            <summary>Imposta shim di ZipFile.OnExtractAllStarted(String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnExtractBlockZipEntryInt64Int64">
            <summary>Imposta shim di ZipFile.OnExtractBlock(ZipEntry entry, Int64 bytesWritten, Int64 totalBytesToWrite)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnExtractEntryInt32BooleanZipEntryString">
            <summary>Imposta shim di ZipFile.OnExtractEntry(Int32 current, Boolean before, ZipEntry currentEntry, String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnExtractExistingZipEntryString">
            <summary>Imposta shim di ZipFile.OnExtractExisting(ZipEntry entry, String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnReadBytesZipEntry">
            <summary>Imposta shim di ZipFile.OnReadBytes(ZipEntry entry)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnReadCompleted">
            <summary>Imposta shim di ZipFile.OnReadCompleted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnReadEntryBooleanZipEntry">
            <summary>Imposta shim di ZipFile.OnReadEntry(Boolean before, ZipEntry entry)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnReadStarted">
            <summary>Imposta shim di ZipFile.OnReadStarted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnSaveBlockZipEntryInt64Int64">
            <summary>Imposta shim di ZipFile.OnSaveBlock(ZipEntry entry, Int64 bytesXferred, Int64 totalBytesToXfer)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnSaveCompleted">
            <summary>Imposta shim di ZipFile.OnSaveCompleted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnSaveEntryInt32ZipEntryBoolean">
            <summary>Imposta shim di ZipFile.OnSaveEntry(Int32 current, ZipEntry entry, Boolean before)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnSaveEventZipProgressEventType">
            <summary>Imposta shim di ZipFile.OnSaveEvent(ZipProgressEventType eventFlavor)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnSaveStarted">
            <summary>Imposta shim di ZipFile.OnSaveStarted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnSingleEntryExtractZipEntryStringBoolean">
            <summary>Imposta shim di ZipFile.OnSingleEntryExtract(ZipEntry entry, String path, Boolean before)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OnZipErrorSavingZipEntryException">
            <summary>Imposta shim di ZipFile.OnZipErrorSaving(ZipEntry entry, Exception exc)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.OutputUsedZip64Get">
            <summary>Imposta shim di ZipFile.get_OutputUsedZip64()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ParallelDeflateMaxBufferPairsGet">
            <summary>Imposta shim di ZipFile.get_ParallelDeflateMaxBufferPairs()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ParallelDeflateMaxBufferPairsSetInt32">
            <summary>Imposta shim di ZipFile.set_ParallelDeflateMaxBufferPairs(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ParallelDeflateThresholdGet">
            <summary>Imposta shim di ZipFile.get_ParallelDeflateThreshold()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ParallelDeflateThresholdSetInt64">
            <summary>Imposta shim di ZipFile.set_ParallelDeflateThreshold(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.PasswordGet">
            <summary>Imposta shim di ZipFile.get_Password()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.PasswordSetString">
            <summary>Imposta shim di ZipFile.set_Password(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ReadProgressAddEventHandlerOfReadProgressEventArgs">
            <summary>Imposta shim di ZipFile.add_ReadProgress(EventHandler`1&lt;ReadProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ReadProgressRemoveEventHandlerOfReadProgressEventArgs">
            <summary>Imposta shim di ZipFile.remove_ReadProgress(EventHandler`1&lt;ReadProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ReadStreamGet">
            <summary>Imposta shim di ZipFile.get_ReadStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.RemoveEntriesICollectionOfString">
            <summary>Imposta shim di ZipFile.RemoveEntries(ICollection`1&lt;String&gt; entriesToRemove)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.RemoveEntriesICollectionOfZipEntry">
            <summary>Imposta shim di ZipFile.RemoveEntries(ICollection`1&lt;ZipEntry&gt; entriesToRemove)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.RemoveEntryForUpdateString">
            <summary>Imposta shim di ZipFile.RemoveEntryForUpdate(String entryName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.RemoveEntryString">
            <summary>Imposta shim di ZipFile.RemoveEntry(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.RemoveEntryZipEntry">
            <summary>Imposta shim di ZipFile.RemoveEntry(ZipEntry entry)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.RemoveSelectedEntriesString">
            <summary>Imposta shim di ZipFile.RemoveSelectedEntries(String selectionCriteria)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.RemoveSelectedEntriesStringString">
            <summary>Imposta shim di ZipFile.RemoveSelectedEntries(String selectionCriteria, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.RemoveTempFile">
            <summary>Imposta shim di ZipFile.RemoveTempFile()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.RequiresZip64Get">
            <summary>Imposta shim di ZipFile.get_RequiresZip64()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ResetBoolean">
            <summary>Imposta shim di ZipFile.Reset(Boolean whileSaving)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.RetrievalEntriesGet">
            <summary>Imposta shim di ZipFile.get_RetrievalEntries()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.Save">
            <summary>Imposta shim di ZipFile.Save()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.SaveProgressAddEventHandlerOfSaveProgressEventArgs">
            <summary>Imposta shim di ZipFile.add_SaveProgress(EventHandler`1&lt;SaveProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.SaveProgressRemoveEventHandlerOfSaveProgressEventArgs">
            <summary>Imposta shim di ZipFile.remove_SaveProgress(EventHandler`1&lt;SaveProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.SaveSelfExtractorStringSelfExtractorFlavor">
            <summary>Imposta shim di ZipFile.SaveSelfExtractor(String exeToGenerate, SelfExtractorFlavor flavor)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.SaveSelfExtractorStringSelfExtractorSaveOptions">
            <summary>Imposta shim di ZipFile.SaveSelfExtractor(String exeToGenerate, SelfExtractorSaveOptions options)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.SaveStream">
            <summary>Imposta shim di ZipFile.Save(Stream outputStream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.SaveString">
            <summary>Imposta shim di ZipFile.Save(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.SelectEntriesString">
            <summary>Imposta shim di ZipFile.SelectEntries(String selectionCriteria)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.SelectEntriesStringString">
            <summary>Imposta shim di ZipFile.SelectEntries(String selectionCriteria, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.SetCompressionGet">
            <summary>Imposta shim di ZipFile.get_SetCompression()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.SetCompressionSetSetCompressionCallback">
            <summary>Imposta shim di ZipFile.set_SetCompression(SetCompressionCallback value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.SortEntriesBeforeSavingGet">
            <summary>Imposta shim di ZipFile.get_SortEntriesBeforeSaving()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.SortEntriesBeforeSavingSetBoolean">
            <summary>Imposta shim di ZipFile.set_SortEntriesBeforeSaving(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.StatusMessageTextWriterGet">
            <summary>Imposta shim di ZipFile.get_StatusMessageTextWriter()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.StatusMessageTextWriterSetTextWriter">
            <summary>Imposta shim di ZipFile.set_StatusMessageTextWriter(TextWriter value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.StrategyGet">
            <summary>Imposta shim di ZipFile.get_Strategy()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.StrategySetCompressionStrategy">
            <summary>Imposta shim di ZipFile.set_Strategy(CompressionStrategy value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.StreamForDiskNumberUInt32">
            <summary>Imposta shim di ZipFile.StreamForDiskNumber(UInt32 diskNumber)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Imposta shim di ZipFile.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.TempFileFolderGet">
            <summary>Imposta shim di ZipFile.get_TempFileFolder()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.TempFileFolderSetString">
            <summary>Imposta shim di ZipFile.set_TempFileFolder(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ToString01">
            <summary>Imposta shim di ZipFile.ToString()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UpdateDirectoryString">
            <summary>Imposta shim di ZipFile.UpdateDirectory(String directoryName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UpdateDirectoryStringString">
            <summary>Imposta shim di ZipFile.UpdateDirectory(String directoryName, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UpdateEntryStringByteArray">
            <summary>Imposta shim di ZipFile.UpdateEntry(String entryName, Byte[] byteContent)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UpdateEntryStringOpenDelegateCloseDelegate">
            <summary>Imposta shim di ZipFile.UpdateEntry(String entryName, OpenDelegate opener, CloseDelegate closer)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UpdateEntryStringStream">
            <summary>Imposta shim di ZipFile.UpdateEntry(String entryName, Stream stream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UpdateEntryStringString">
            <summary>Imposta shim di ZipFile.UpdateEntry(String entryName, String content)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UpdateEntryStringWriteDelegate">
            <summary>Imposta shim di ZipFile.UpdateEntry(String entryName, WriteDelegate writer)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UpdateFileString">
            <summary>Imposta shim di ZipFile.UpdateFile(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UpdateFileStringString">
            <summary>Imposta shim di ZipFile.UpdateFile(String fileName, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UpdateFilesIEnumerableOfString">
            <summary>Imposta shim di ZipFile.UpdateFiles(IEnumerable`1&lt;String&gt; fileNames)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UpdateFilesIEnumerableOfStringString">
            <summary>Imposta shim di ZipFile.UpdateFiles(IEnumerable`1&lt;String&gt; fileNames, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UpdateItemString">
            <summary>Imposta shim di ZipFile.UpdateItem(String itemName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UpdateItemStringString">
            <summary>Imposta shim di ZipFile.UpdateItem(String itemName, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UpdateSelectedFilesStringStringStringBoolean">
            <summary>Imposta shim di ZipFile.UpdateSelectedFiles(String selectionCriteria, String directoryOnDisk, String directoryPathInArchive, Boolean recurseDirectories)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UseUnicodeAsNecessaryGet">
            <summary>Imposta shim di ZipFile.get_UseUnicodeAsNecessary()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UseUnicodeAsNecessarySetBoolean">
            <summary>Imposta shim di ZipFile.set_UseUnicodeAsNecessary(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UseZip64WhenSavingGet">
            <summary>Imposta shim di ZipFile.get_UseZip64WhenSaving()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.UseZip64WhenSavingSetZip64Option">
            <summary>Imposta shim di ZipFile.set_UseZip64WhenSaving(Zip64Option value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.VerboseGet">
            <summary>Imposta shim di ZipFile.get_Verbose()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.WriteStreamGet">
            <summary>Imposta shim di ZipFile.get_WriteStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.WriteStreamSetStream">
            <summary>Imposta shim di ZipFile.set_WriteStream(Stream value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ZipEntriesAsListGet">
            <summary>Imposta shim di ZipFile.get_ZipEntriesAsList()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ZipErrorActionGet">
            <summary>Imposta shim di ZipFile.get_ZipErrorAction()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ZipErrorActionSetZipErrorAction">
            <summary>Imposta shim di ZipFile.set_ZipErrorAction(ZipErrorAction value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ZipErrorAddEventHandlerOfZipErrorEventArgs">
            <summary>Imposta shim di ZipFile.add_ZipError(EventHandler`1&lt;ZipErrorEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances.ZipErrorRemoveEventHandlerOfZipErrorEventArgs">
            <summary>Imposta shim di ZipFile.remove_ZipError(EventHandler`1&lt;ZipErrorEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances._AddOrUpdateSelectedFilesStringStringStringBooleanBoolean">
            <summary>Imposta shim di ZipFile._AddOrUpdateSelectedFiles(String selectionCriteria, String directoryOnDisk, String directoryPathInArchive, Boolean recurseDirectories, Boolean wantUpdate)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances._InitInstanceStringTextWriter">
            <summary>Imposta shim di ZipFile._InitInstance(String zipFileName, TextWriter statusMessageWriter)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances._InternalAddEntryZipEntry">
            <summary>Imposta shim di ZipFile._InternalAddEntry(ZipEntry ze)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances._InternalExtractAllStringBoolean">
            <summary>Imposta shim di ZipFile._InternalExtractAll(String path, Boolean overrideExtractExistingProperty)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AllInstances._SaveSfxStubStringSelfExtractorSaveOptions">
            <summary>Imposta shim di ZipFile._SaveSfxStub(String exeToGenerate, SelfExtractorSaveOptions options)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AlternateEncodingUsageGet">
            <summary>Imposta shim di ZipFile.get_AlternateEncodingUsage()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AlternateEncodingUsageSetZipOption">
            <summary>Imposta shim di ZipFile.set_AlternateEncodingUsage(ZipOption value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.AnyCaseInsensitiveMatchesString">
            <summary>Imposta shim di ZipFile.AnyCaseInsensitiveMatches(String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ArchiveNameForEventGet">
            <summary>Imposta shim di ZipFile.get_ArchiveNameForEvent()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipFile.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipFile.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipFile.Bind(System.IDisposable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipFile.Bind(System.Collections.IEnumerable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipFile.Bind(System.Collections.Generic.IEnumerable{Ionic.Zip.ZipEntry})">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.BufferSizeGet">
            <summary>Imposta shim di ZipFile.get_BufferSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.BufferSizeSetInt32">
            <summary>Imposta shim di ZipFile.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.CaseSensitiveRetrievalGet">
            <summary>Imposta shim di ZipFile.get_CaseSensitiveRetrieval()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.CaseSensitiveRetrievalSetBoolean">
            <summary>Imposta shim di ZipFile.set_CaseSensitiveRetrieval(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.CheckZipPasswordStringString">
            <summary>Imposta shim di ZipFile.CheckZipPassword(String zipFileName, String password)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.CheckZipString">
            <summary>Imposta shim di ZipFile.CheckZip(String zipFileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.CheckZipStringBooleanTextWriter">
            <summary>Imposta shim di ZipFile.CheckZip(String zipFileName, Boolean fixIfNecessary, TextWriter writer)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.CleanupAfterSaveOperation">
            <summary>Imposta shim di ZipFile.CleanupAfterSaveOperation()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.CodecBufferSizeGet">
            <summary>Imposta shim di ZipFile.get_CodecBufferSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.CodecBufferSizeSetInt32">
            <summary>Imposta shim di ZipFile.set_CodecBufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.CommentGet">
            <summary>Imposta shim di ZipFile.get_Comment()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.CommentSetString">
            <summary>Imposta shim di ZipFile.set_Comment(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.CompressionLevelGet">
            <summary>Imposta shim di ZipFile.get_CompressionLevel()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.CompressionLevelSetCompressionLevel">
            <summary>Imposta shim di ZipFile.set_CompressionLevel(CompressionLevel value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.CompressionMethodGet">
            <summary>Imposta shim di ZipFile.get_CompressionMethod()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.CompressionMethodSetCompressionMethod">
            <summary>Imposta shim di ZipFile.set_CompressionMethod(CompressionMethod value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.Constructor">
            <summary>Imposta shim di ZipFile.ZipFile()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ConstructorString">
            <summary>Imposta shim di ZipFile.ZipFile(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ConstructorStringTextWriter">
            <summary>Imposta shim di ZipFile.ZipFile(String fileName, TextWriter statusMessageWriter)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ContainsEntryString">
            <summary>Imposta shim di ZipFile.ContainsEntry(String name)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.CountGet">
            <summary>Imposta shim di ZipFile.get_Count()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.DeleteFileWithRetryString">
            <summary>Imposta shim di ZipFile.DeleteFileWithRetry(String filename)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.Dispose">
            <summary>Imposta shim di ZipFile.Dispose()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.DisposeBoolean">
            <summary>Imposta shim di ZipFile.Dispose(Boolean disposeManagedResources)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.EmitTimesInUnixFormatWhenSavingGet">
            <summary>Imposta shim di ZipFile.get_EmitTimesInUnixFormatWhenSaving()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.EmitTimesInUnixFormatWhenSavingSetBoolean">
            <summary>Imposta shim di ZipFile.set_EmitTimesInUnixFormatWhenSaving(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.EmitTimesInWindowsFormatWhenSavingGet">
            <summary>Imposta shim di ZipFile.get_EmitTimesInWindowsFormatWhenSaving()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.EmitTimesInWindowsFormatWhenSavingSetBoolean">
            <summary>Imposta shim di ZipFile.set_EmitTimesInWindowsFormatWhenSaving(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.EncryptionGet">
            <summary>Imposta shim di ZipFile.get_Encryption()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.EncryptionSetEncryptionAlgorithm">
            <summary>Imposta shim di ZipFile.set_Encryption(EncryptionAlgorithm value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.EnsureendInSlashString">
            <summary>Imposta shim di ZipFile.EnsureendInSlash(String s)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.EntriesGet">
            <summary>Imposta shim di ZipFile.get_Entries()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.EntriesSortedGet">
            <summary>Imposta shim di ZipFile.get_EntriesSorted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.EntryFileNamesGet">
            <summary>Imposta shim di ZipFile.get_EntryFileNames()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ExtractAllString">
            <summary>Imposta shim di ZipFile.ExtractAll(String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ExtractAllStringExtractExistingFileAction">
            <summary>Imposta shim di ZipFile.ExtractAll(String path, ExtractExistingFileAction extractExistingFile)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ExtractExistingFileGet">
            <summary>Imposta shim di ZipFile.get_ExtractExistingFile()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ExtractExistingFileSetExtractExistingFileAction">
            <summary>Imposta shim di ZipFile.set_ExtractExistingFile(ExtractExistingFileAction value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ExtractProgressAddEventHandlerOfExtractProgressEventArgs">
            <summary>Imposta shim di ZipFile.add_ExtractProgress(EventHandler`1&lt;ExtractProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ExtractProgressRemoveEventHandlerOfExtractProgressEventArgs">
            <summary>Imposta shim di ZipFile.remove_ExtractProgress(EventHandler`1&lt;ExtractProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ExtractResourceToFileAssemblyStringString">
            <summary>Imposta shim di ZipFile.ExtractResourceToFile(Assembly a, String resourceName, String filename)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ExtractSelectedEntriesString">
            <summary>Imposta shim di ZipFile.ExtractSelectedEntries(String selectionCriteria)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ExtractSelectedEntriesStringExtractExistingFileAction">
            <summary>Imposta shim di ZipFile.ExtractSelectedEntries(String selectionCriteria, ExtractExistingFileAction extractExistingFile)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ExtractSelectedEntriesStringString">
            <summary>Imposta shim di ZipFile.ExtractSelectedEntries(String selectionCriteria, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ExtractSelectedEntriesStringStringString">
            <summary>Imposta shim di ZipFile.ExtractSelectedEntries(String selectionCriteria, String directoryInArchive, String extractDirectory)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ExtractSelectedEntriesStringStringStringExtractExistingFileAction">
            <summary>Imposta shim di ZipFile.ExtractSelectedEntries(String selectionCriteria, String directoryPathInArchive, String extractDirectory, ExtractExistingFileAction extractExistingFile)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.FixZipDirectoryString">
            <summary>Imposta shim di ZipFile.FixZipDirectory(String zipFileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.FlattenFoldersOnExtractGet">
            <summary>Imposta shim di ZipFile.get_FlattenFoldersOnExtract()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.FlattenFoldersOnExtractSetBoolean">
            <summary>Imposta shim di ZipFile.set_FlattenFoldersOnExtract(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.FullScanGet">
            <summary>Imposta shim di ZipFile.get_FullScan()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.FullScanSetBoolean">
            <summary>Imposta shim di ZipFile.set_FullScan(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.GenerateTempPathnameStringString">
            <summary>Imposta shim di ZipFile.GenerateTempPathname(String dir, String extension)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.GetEnumerator">
            <summary>Imposta shim di ZipFile.GetEnumerator()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.GetNewEnum">
            <summary>Imposta shim di ZipFile.GetNewEnum()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.IgnoreDuplicateFilesGet">
            <summary>Imposta shim di ZipFile.get_IgnoreDuplicateFiles()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.IgnoreDuplicateFilesSetBoolean">
            <summary>Imposta shim di ZipFile.set_IgnoreDuplicateFiles(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.InfoGet">
            <summary>Imposta shim di ZipFile.get_Info()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.InitializeString">
            <summary>Imposta shim di ZipFile.Initialize(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.InputUsesZip64Get">
            <summary>Imposta shim di ZipFile.get_InputUsesZip64()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.InternalAddEntryStringZipEntry">
            <summary>Imposta shim di ZipFile.InternalAddEntry(String name, ZipEntry entry)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.IsZipFileStreamBoolean">
            <summary>Imposta shim di ZipFile.IsZipFile(Stream stream, Boolean testExtract)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.IsZipFileString">
            <summary>Imposta shim di ZipFile.IsZipFile(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.IsZipFileStringBoolean">
            <summary>Imposta shim di ZipFile.IsZipFile(String fileName, Boolean testExtract)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ItemGetInt32">
            <summary>Imposta shim di ZipFile.get_Item(Int32 ix)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ItemGetString">
            <summary>Imposta shim di ZipFile.get_Item(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.LengthOfReadStreamGet">
            <summary>Imposta shim di ZipFile.get_LengthOfReadStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.LibraryVersionGet">
            <summary>Imposta shim di ZipFile.get_LibraryVersion()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.MaxOutputSegmentSizeGet">
            <summary>Imposta shim di ZipFile.get_MaxOutputSegmentSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.MaxOutputSegmentSizeSetInt32">
            <summary>Imposta shim di ZipFile.set_MaxOutputSegmentSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.NameGet">
            <summary>Imposta shim di ZipFile.get_Name()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.NameSetString">
            <summary>Imposta shim di ZipFile.set_Name(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.NotifyEntriesSaveCompleteICollectionOfZipEntry">
            <summary>Imposta shim di ZipFile.NotifyEntriesSaveComplete(ICollection`1&lt;ZipEntry&gt; c)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.NotifyEntryChanged">
            <summary>Imposta shim di ZipFile.NotifyEntryChanged()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.NumberOfSegmentsForMostRecentSaveGet">
            <summary>Imposta shim di ZipFile.get_NumberOfSegmentsForMostRecentSave()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnAddCompleted">
            <summary>Imposta shim di ZipFile.OnAddCompleted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnAddStarted">
            <summary>Imposta shim di ZipFile.OnAddStarted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnExtractAllCompletedString">
            <summary>Imposta shim di ZipFile.OnExtractAllCompleted(String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnExtractAllStartedString">
            <summary>Imposta shim di ZipFile.OnExtractAllStarted(String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnExtractBlockZipEntryInt64Int64">
            <summary>Imposta shim di ZipFile.OnExtractBlock(ZipEntry entry, Int64 bytesWritten, Int64 totalBytesToWrite)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnExtractEntryInt32BooleanZipEntryString">
            <summary>Imposta shim di ZipFile.OnExtractEntry(Int32 current, Boolean before, ZipEntry currentEntry, String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnExtractExistingZipEntryString">
            <summary>Imposta shim di ZipFile.OnExtractExisting(ZipEntry entry, String path)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnReadBytesZipEntry">
            <summary>Imposta shim di ZipFile.OnReadBytes(ZipEntry entry)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnReadCompleted">
            <summary>Imposta shim di ZipFile.OnReadCompleted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnReadEntryBooleanZipEntry">
            <summary>Imposta shim di ZipFile.OnReadEntry(Boolean before, ZipEntry entry)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnReadStarted">
            <summary>Imposta shim di ZipFile.OnReadStarted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnSaveBlockZipEntryInt64Int64">
            <summary>Imposta shim di ZipFile.OnSaveBlock(ZipEntry entry, Int64 bytesXferred, Int64 totalBytesToXfer)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnSaveCompleted">
            <summary>Imposta shim di ZipFile.OnSaveCompleted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnSaveEntryInt32ZipEntryBoolean">
            <summary>Imposta shim di ZipFile.OnSaveEntry(Int32 current, ZipEntry entry, Boolean before)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnSaveEventZipProgressEventType">
            <summary>Imposta shim di ZipFile.OnSaveEvent(ZipProgressEventType eventFlavor)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnSaveStarted">
            <summary>Imposta shim di ZipFile.OnSaveStarted()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnSingleEntryExtractZipEntryStringBoolean">
            <summary>Imposta shim di ZipFile.OnSingleEntryExtract(ZipEntry entry, String path, Boolean before)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OnZipErrorSavingZipEntryException">
            <summary>Imposta shim di ZipFile.OnZipErrorSaving(ZipEntry entry, Exception exc)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.OutputUsedZip64Get">
            <summary>Imposta shim di ZipFile.get_OutputUsedZip64()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ParallelDeflateMaxBufferPairsGet">
            <summary>Imposta shim di ZipFile.get_ParallelDeflateMaxBufferPairs()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ParallelDeflateMaxBufferPairsSetInt32">
            <summary>Imposta shim di ZipFile.set_ParallelDeflateMaxBufferPairs(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ParallelDeflateThresholdGet">
            <summary>Imposta shim di ZipFile.get_ParallelDeflateThreshold()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ParallelDeflateThresholdSetInt64">
            <summary>Imposta shim di ZipFile.set_ParallelDeflateThreshold(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.PasswordGet">
            <summary>Imposta shim di ZipFile.get_Password()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.PasswordSetString">
            <summary>Imposta shim di ZipFile.set_Password(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ReadCentralDirectoryFooterZipFile">
            <summary>Imposta shim di ZipFile.ReadCentralDirectoryFooter(ZipFile zf)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ReadCentralDirectoryZipFile">
            <summary>Imposta shim di ZipFile.ReadCentralDirectory(ZipFile zf)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ReadFirstFourBytesStream">
            <summary>Imposta shim di ZipFile.ReadFirstFourBytes(Stream s)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ReadIntoInstanceZipFile">
            <summary>Imposta shim di ZipFile.ReadIntoInstance(ZipFile zf)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ReadIntoInstance_OrigZipFile">
            <summary>Imposta shim di ZipFile.ReadIntoInstance_Orig(ZipFile zf)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ReadProgressAddEventHandlerOfReadProgressEventArgs">
            <summary>Imposta shim di ZipFile.add_ReadProgress(EventHandler`1&lt;ReadProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ReadProgressRemoveEventHandlerOfReadProgressEventArgs">
            <summary>Imposta shim di ZipFile.remove_ReadProgress(EventHandler`1&lt;ReadProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ReadStream">
            <summary>Imposta shim di ZipFile.Read(Stream zipStream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ReadStreamGet">
            <summary>Imposta shim di ZipFile.get_ReadStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ReadStreamReadOptions">
            <summary>Imposta shim di ZipFile.Read(Stream zipStream, ReadOptions options)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ReadString">
            <summary>Imposta shim di ZipFile.Read(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ReadStringReadOptions">
            <summary>Imposta shim di ZipFile.Read(String fileName, ReadOptions options)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ReadZipFileCommentZipFile">
            <summary>Imposta shim di ZipFile.ReadZipFileComment(ZipFile zf)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.RemoveEntriesICollectionOfString">
            <summary>Imposta shim di ZipFile.RemoveEntries(ICollection`1&lt;String&gt; entriesToRemove)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.RemoveEntriesICollectionOfZipEntry">
            <summary>Imposta shim di ZipFile.RemoveEntries(ICollection`1&lt;ZipEntry&gt; entriesToRemove)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.RemoveEntryForUpdateString">
            <summary>Imposta shim di ZipFile.RemoveEntryForUpdate(String entryName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.RemoveEntryString">
            <summary>Imposta shim di ZipFile.RemoveEntry(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.RemoveEntryZipEntry">
            <summary>Imposta shim di ZipFile.RemoveEntry(ZipEntry entry)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.RemoveSelectedEntriesString">
            <summary>Imposta shim di ZipFile.RemoveSelectedEntries(String selectionCriteria)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.RemoveSelectedEntriesStringString">
            <summary>Imposta shim di ZipFile.RemoveSelectedEntries(String selectionCriteria, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.RemoveTempFile">
            <summary>Imposta shim di ZipFile.RemoveTempFile()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ReplaceLeadingDirectoryStringStringString">
            <summary>Imposta shim di ZipFile.ReplaceLeadingDirectory(String original, String pattern, String replacement)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.RequiresZip64Get">
            <summary>Imposta shim di ZipFile.get_RequiresZip64()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ResetBoolean">
            <summary>Imposta shim di ZipFile.Reset(Boolean whileSaving)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.RetrievalEntriesGet">
            <summary>Imposta shim di ZipFile.get_RetrievalEntries()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.Save">
            <summary>Imposta shim di ZipFile.Save()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.SaveProgressAddEventHandlerOfSaveProgressEventArgs">
            <summary>Imposta shim di ZipFile.add_SaveProgress(EventHandler`1&lt;SaveProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.SaveProgressRemoveEventHandlerOfSaveProgressEventArgs">
            <summary>Imposta shim di ZipFile.remove_SaveProgress(EventHandler`1&lt;SaveProgressEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.SaveSelfExtractorStringSelfExtractorFlavor">
            <summary>Imposta shim di ZipFile.SaveSelfExtractor(String exeToGenerate, SelfExtractorFlavor flavor)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.SaveSelfExtractorStringSelfExtractorSaveOptions">
            <summary>Imposta shim di ZipFile.SaveSelfExtractor(String exeToGenerate, SelfExtractorSaveOptions options)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.SaveStream">
            <summary>Imposta shim di ZipFile.Save(Stream outputStream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.SaveString">
            <summary>Imposta shim di ZipFile.Save(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.SelectEntriesString">
            <summary>Imposta shim di ZipFile.SelectEntries(String selectionCriteria)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.SelectEntriesStringString">
            <summary>Imposta shim di ZipFile.SelectEntries(String selectionCriteria, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.SetCompressionGet">
            <summary>Imposta shim di ZipFile.get_SetCompression()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.SetCompressionSetSetCompressionCallback">
            <summary>Imposta shim di ZipFile.set_SetCompression(SetCompressionCallback value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.SortEntriesBeforeSavingGet">
            <summary>Imposta shim di ZipFile.get_SortEntriesBeforeSaving()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.SortEntriesBeforeSavingSetBoolean">
            <summary>Imposta shim di ZipFile.set_SortEntriesBeforeSaving(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.StaticConstructor">
            <summary>Imposta shim di ZipFile.ZipFile()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.StatusMessageTextWriterGet">
            <summary>Imposta shim di ZipFile.get_StatusMessageTextWriter()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.StatusMessageTextWriterSetTextWriter">
            <summary>Imposta shim di ZipFile.set_StatusMessageTextWriter(TextWriter value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.StrategyGet">
            <summary>Imposta shim di ZipFile.get_Strategy()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.StrategySetCompressionStrategy">
            <summary>Imposta shim di ZipFile.set_Strategy(CompressionStrategy value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.StreamForDiskNumberUInt32">
            <summary>Imposta shim di ZipFile.StreamForDiskNumber(UInt32 diskNumber)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.SystemCollectionsIEnumerableGetEnumerator">
            <summary>Imposta shim di ZipFile.System.Collections.IEnumerable.GetEnumerator()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.TempFileFolderGet">
            <summary>Imposta shim di ZipFile.get_TempFileFolder()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.TempFileFolderSetString">
            <summary>Imposta shim di ZipFile.set_TempFileFolder(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ToString">
            <summary>Imposta shim di ZipFile.ToString()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UpdateDirectoryString">
            <summary>Imposta shim di ZipFile.UpdateDirectory(String directoryName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UpdateDirectoryStringString">
            <summary>Imposta shim di ZipFile.UpdateDirectory(String directoryName, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UpdateEntryStringByteArray">
            <summary>Imposta shim di ZipFile.UpdateEntry(String entryName, Byte[] byteContent)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UpdateEntryStringOpenDelegateCloseDelegate">
            <summary>Imposta shim di ZipFile.UpdateEntry(String entryName, OpenDelegate opener, CloseDelegate closer)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UpdateEntryStringStream">
            <summary>Imposta shim di ZipFile.UpdateEntry(String entryName, Stream stream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UpdateEntryStringString">
            <summary>Imposta shim di ZipFile.UpdateEntry(String entryName, String content)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UpdateEntryStringWriteDelegate">
            <summary>Imposta shim di ZipFile.UpdateEntry(String entryName, WriteDelegate writer)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UpdateFileString">
            <summary>Imposta shim di ZipFile.UpdateFile(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UpdateFileStringString">
            <summary>Imposta shim di ZipFile.UpdateFile(String fileName, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UpdateFilesIEnumerableOfString">
            <summary>Imposta shim di ZipFile.UpdateFiles(IEnumerable`1&lt;String&gt; fileNames)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UpdateFilesIEnumerableOfStringString">
            <summary>Imposta shim di ZipFile.UpdateFiles(IEnumerable`1&lt;String&gt; fileNames, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UpdateItemString">
            <summary>Imposta shim di ZipFile.UpdateItem(String itemName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UpdateItemStringString">
            <summary>Imposta shim di ZipFile.UpdateItem(String itemName, String directoryPathInArchive)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UpdateSelectedFilesStringStringStringBoolean">
            <summary>Imposta shim di ZipFile.UpdateSelectedFiles(String selectionCriteria, String directoryOnDisk, String directoryPathInArchive, Boolean recurseDirectories)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UseUnicodeAsNecessaryGet">
            <summary>Imposta shim di ZipFile.get_UseUnicodeAsNecessary()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UseUnicodeAsNecessarySetBoolean">
            <summary>Imposta shim di ZipFile.set_UseUnicodeAsNecessary(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UseZip64WhenSavingGet">
            <summary>Imposta shim di ZipFile.get_UseZip64WhenSaving()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.UseZip64WhenSavingSetZip64Option">
            <summary>Imposta shim di ZipFile.set_UseZip64WhenSaving(Zip64Option value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.VerboseGet">
            <summary>Imposta shim di ZipFile.get_Verbose()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.WriteStreamGet">
            <summary>Imposta shim di ZipFile.get_WriteStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.WriteStreamSetStream">
            <summary>Imposta shim di ZipFile.set_WriteStream(Stream value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.Zip64SeekToCentralDirectoryZipFile">
            <summary>Imposta shim di ZipFile.Zip64SeekToCentralDirectory(ZipFile zf)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ZipEntriesAsListGet">
            <summary>Imposta shim di ZipFile.get_ZipEntriesAsList()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ZipErrorActionGet">
            <summary>Imposta shim di ZipFile.get_ZipErrorAction()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ZipErrorActionSetZipErrorAction">
            <summary>Imposta shim di ZipFile.set_ZipErrorAction(ZipErrorAction value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ZipErrorAddEventHandlerOfZipErrorEventArgs">
            <summary>Imposta shim di ZipFile.add_ZipError(EventHandler`1&lt;ZipErrorEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile.ZipErrorRemoveEventHandlerOfZipErrorEventArgs">
            <summary>Imposta shim di ZipFile.remove_ZipError(EventHandler`1&lt;ZipErrorEventArgs&gt; value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile._AddOrUpdateSelectedFilesStringStringStringBooleanBoolean">
            <summary>Imposta shim di ZipFile._AddOrUpdateSelectedFiles(String selectionCriteria, String directoryOnDisk, String directoryPathInArchive, Boolean recurseDirectories, Boolean wantUpdate)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile._InitInstanceStringTextWriter">
            <summary>Imposta shim di ZipFile._InitInstance(String zipFileName, TextWriter statusMessageWriter)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile._InternalAddEntryZipEntry">
            <summary>Imposta shim di ZipFile._InternalAddEntry(ZipEntry ze)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile._InternalExtractAllStringBoolean">
            <summary>Imposta shim di ZipFile._InternalExtractAll(String path, Boolean overrideExtractExistingProperty)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipFile._SaveSfxStubStringSelfExtractorSaveOptions">
            <summary>Imposta shim di ZipFile._SaveSfxStub(String exeToGenerate, SelfExtractorSaveOptions options)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimZipInputStream">
            <summary>Tipo shim di Ionic.Zip.ZipInputStream</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipInputStream.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipInputStream.#ctor(Ionic.Zip.ZipInputStream)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.CanReadGet">
            <summary>Imposta shim di ZipInputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.CanSeekGet">
            <summary>Imposta shim di ZipInputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.CanWriteGet">
            <summary>Imposta shim di ZipInputStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.CodecBufferSizeGet">
            <summary>Imposta shim di ZipInputStream.get_CodecBufferSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.CodecBufferSizeSetInt32">
            <summary>Imposta shim di ZipInputStream.set_CodecBufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.DisposeBoolean">
            <summary>Imposta shim di ZipInputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.Flush">
            <summary>Imposta shim di ZipInputStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.GetNextEntry">
            <summary>Imposta shim di ZipInputStream.GetNextEntry()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.LengthGet">
            <summary>Imposta shim di ZipInputStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.PasswordSetString">
            <summary>Imposta shim di ZipInputStream.set_Password(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.PositionGet">
            <summary>Imposta shim di ZipInputStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.PositionSetInt64">
            <summary>Imposta shim di ZipInputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Imposta shim di ZipInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.ReadStreamGet">
            <summary>Imposta shim di ZipInputStream.get_ReadStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Imposta shim di ZipInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.SetLengthInt64">
            <summary>Imposta shim di ZipInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.SetupStream">
            <summary>Imposta shim di ZipInputStream.SetupStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.ToString01">
            <summary>Imposta shim di ZipInputStream.ToString()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Imposta shim di ZipInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.AllInstances._InitStreamBooleanString">
            <summary>Imposta shim di ZipInputStream._Init(Stream stream, Boolean leaveOpen, String name)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipInputStream.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipInputStream.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipInputStream.Bind(System.IDisposable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.CanReadGet">
            <summary>Imposta shim di ZipInputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.CanSeekGet">
            <summary>Imposta shim di ZipInputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.CanWriteGet">
            <summary>Imposta shim di ZipInputStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.CodecBufferSizeGet">
            <summary>Imposta shim di ZipInputStream.get_CodecBufferSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.CodecBufferSizeSetInt32">
            <summary>Imposta shim di ZipInputStream.set_CodecBufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.ConstructorStream">
            <summary>Imposta shim di ZipInputStream.ZipInputStream(Stream stream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.ConstructorStreamBoolean">
            <summary>Imposta shim di ZipInputStream.ZipInputStream(Stream stream, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.ConstructorString">
            <summary>Imposta shim di ZipInputStream.ZipInputStream(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.DisposeBoolean">
            <summary>Imposta shim di ZipInputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.Flush">
            <summary>Imposta shim di ZipInputStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.GetNextEntry">
            <summary>Imposta shim di ZipInputStream.GetNextEntry()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.LengthGet">
            <summary>Imposta shim di ZipInputStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.PasswordSetString">
            <summary>Imposta shim di ZipInputStream.set_Password(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.PositionGet">
            <summary>Imposta shim di ZipInputStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.PositionSetInt64">
            <summary>Imposta shim di ZipInputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.ReadByteArrayInt32Int32">
            <summary>Imposta shim di ZipInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.ReadStreamGet">
            <summary>Imposta shim di ZipInputStream.get_ReadStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.SeekInt64SeekOrigin">
            <summary>Imposta shim di ZipInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.SetLengthInt64">
            <summary>Imposta shim di ZipInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.SetupStream">
            <summary>Imposta shim di ZipInputStream.SetupStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.ToString">
            <summary>Imposta shim di ZipInputStream.ToString()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream.WriteByteArrayInt32Int32">
            <summary>Imposta shim di ZipInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipInputStream._InitStreamBooleanString">
            <summary>Imposta shim di ZipInputStream._Init(Stream stream, Boolean leaveOpen, String name)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimZipOutputStream">
            <summary>Tipo shim di Ionic.Zip.ZipOutputStream</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipOutputStream.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipOutputStream.#ctor(Ionic.Zip.ZipOutputStream)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.AlternateEncodingUsageGet">
            <summary>Imposta shim di ZipOutputStream.get_AlternateEncodingUsage()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.AlternateEncodingUsageSetZipOption">
            <summary>Imposta shim di ZipOutputStream.set_AlternateEncodingUsage(ZipOption value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.CanReadGet">
            <summary>Imposta shim di ZipOutputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.CanSeekGet">
            <summary>Imposta shim di ZipOutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.CanWriteGet">
            <summary>Imposta shim di ZipOutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.CodecBufferSizeGet">
            <summary>Imposta shim di ZipOutputStream.get_CodecBufferSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.CodecBufferSizeSetInt32">
            <summary>Imposta shim di ZipOutputStream.set_CodecBufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.CommentGet">
            <summary>Imposta shim di ZipOutputStream.get_Comment()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.CommentSetString">
            <summary>Imposta shim di ZipOutputStream.set_Comment(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.CompressionLevelGet">
            <summary>Imposta shim di ZipOutputStream.get_CompressionLevel()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.CompressionLevelSetCompressionLevel">
            <summary>Imposta shim di ZipOutputStream.set_CompressionLevel(CompressionLevel value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.CompressionMethodGet">
            <summary>Imposta shim di ZipOutputStream.get_CompressionMethod()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.CompressionMethodSetCompressionMethod">
            <summary>Imposta shim di ZipOutputStream.set_CompressionMethod(CompressionMethod value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.ContainsEntryString">
            <summary>Imposta shim di ZipOutputStream.ContainsEntry(String name)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.DisposeBoolean">
            <summary>Imposta shim di ZipOutputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.EnableZip64Get">
            <summary>Imposta shim di ZipOutputStream.get_EnableZip64()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.EnableZip64SetZip64Option">
            <summary>Imposta shim di ZipOutputStream.set_EnableZip64(Zip64Option value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.EncryptionGet">
            <summary>Imposta shim di ZipOutputStream.get_Encryption()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.EncryptionSetEncryptionAlgorithm">
            <summary>Imposta shim di ZipOutputStream.set_Encryption(EncryptionAlgorithm value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.Flush">
            <summary>Imposta shim di ZipOutputStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.IgnoreCaseGet">
            <summary>Imposta shim di ZipOutputStream.get_IgnoreCase()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.IgnoreCaseSetBoolean">
            <summary>Imposta shim di ZipOutputStream.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.InsureUniqueEntryZipEntry">
            <summary>Imposta shim di ZipOutputStream.InsureUniqueEntry(ZipEntry ze1)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.LengthGet">
            <summary>Imposta shim di ZipOutputStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.NameGet">
            <summary>Imposta shim di ZipOutputStream.get_Name()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.OutputStreamGet">
            <summary>Imposta shim di ZipOutputStream.get_OutputStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.OutputUsedZip64Get">
            <summary>Imposta shim di ZipOutputStream.get_OutputUsedZip64()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.ParallelDeflateMaxBufferPairsGet">
            <summary>Imposta shim di ZipOutputStream.get_ParallelDeflateMaxBufferPairs()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.ParallelDeflateMaxBufferPairsSetInt32">
            <summary>Imposta shim di ZipOutputStream.set_ParallelDeflateMaxBufferPairs(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.ParallelDeflateThresholdGet">
            <summary>Imposta shim di ZipOutputStream.get_ParallelDeflateThreshold()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.ParallelDeflateThresholdSetInt64">
            <summary>Imposta shim di ZipOutputStream.set_ParallelDeflateThreshold(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.PasswordSetString">
            <summary>Imposta shim di ZipOutputStream.set_Password(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.PositionGet">
            <summary>Imposta shim di ZipOutputStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.PositionSetInt64">
            <summary>Imposta shim di ZipOutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.PutNextEntryString">
            <summary>Imposta shim di ZipOutputStream.PutNextEntry(String entryName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Imposta shim di ZipOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Imposta shim di ZipOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.SetLengthInt64">
            <summary>Imposta shim di ZipOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.StrategyGet">
            <summary>Imposta shim di ZipOutputStream.get_Strategy()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.StrategySetCompressionStrategy">
            <summary>Imposta shim di ZipOutputStream.set_Strategy(CompressionStrategy value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.TimestampGet">
            <summary>Imposta shim di ZipOutputStream.get_Timestamp()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.TimestampSetZipEntryTimestamp">
            <summary>Imposta shim di ZipOutputStream.set_Timestamp(ZipEntryTimestamp value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.ToString01">
            <summary>Imposta shim di ZipOutputStream.ToString()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.UseUnicodeAsNecessaryGet">
            <summary>Imposta shim di ZipOutputStream.get_UseUnicodeAsNecessary()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.UseUnicodeAsNecessarySetBoolean">
            <summary>Imposta shim di ZipOutputStream.set_UseUnicodeAsNecessary(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Imposta shim di ZipOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances._FinishCurrentEntry">
            <summary>Imposta shim di ZipOutputStream._FinishCurrentEntry()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances._InitStreamBooleanString">
            <summary>Imposta shim di ZipOutputStream._Init(Stream stream, Boolean leaveOpen, String name)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AllInstances._InitiateCurrentEntryBoolean">
            <summary>Imposta shim di ZipOutputStream._InitiateCurrentEntry(Boolean finishing)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AlternateEncodingUsageGet">
            <summary>Imposta shim di ZipOutputStream.get_AlternateEncodingUsage()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.AlternateEncodingUsageSetZipOption">
            <summary>Imposta shim di ZipOutputStream.set_AlternateEncodingUsage(ZipOption value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipOutputStream.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipOutputStream.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipOutputStream.Bind(System.IDisposable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.CanReadGet">
            <summary>Imposta shim di ZipOutputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.CanSeekGet">
            <summary>Imposta shim di ZipOutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.CanWriteGet">
            <summary>Imposta shim di ZipOutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.CodecBufferSizeGet">
            <summary>Imposta shim di ZipOutputStream.get_CodecBufferSize()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.CodecBufferSizeSetInt32">
            <summary>Imposta shim di ZipOutputStream.set_CodecBufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.CommentGet">
            <summary>Imposta shim di ZipOutputStream.get_Comment()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.CommentSetString">
            <summary>Imposta shim di ZipOutputStream.set_Comment(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.CompressionLevelGet">
            <summary>Imposta shim di ZipOutputStream.get_CompressionLevel()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.CompressionLevelSetCompressionLevel">
            <summary>Imposta shim di ZipOutputStream.set_CompressionLevel(CompressionLevel value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.CompressionMethodGet">
            <summary>Imposta shim di ZipOutputStream.get_CompressionMethod()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.CompressionMethodSetCompressionMethod">
            <summary>Imposta shim di ZipOutputStream.set_CompressionMethod(CompressionMethod value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.ConstructorStream">
            <summary>Imposta shim di ZipOutputStream.ZipOutputStream(Stream stream)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.ConstructorStreamBoolean">
            <summary>Imposta shim di ZipOutputStream.ZipOutputStream(Stream stream, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.ConstructorString">
            <summary>Imposta shim di ZipOutputStream.ZipOutputStream(String fileName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.ContainsEntryString">
            <summary>Imposta shim di ZipOutputStream.ContainsEntry(String name)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.DisposeBoolean">
            <summary>Imposta shim di ZipOutputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.EnableZip64Get">
            <summary>Imposta shim di ZipOutputStream.get_EnableZip64()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.EnableZip64SetZip64Option">
            <summary>Imposta shim di ZipOutputStream.set_EnableZip64(Zip64Option value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.EncryptionGet">
            <summary>Imposta shim di ZipOutputStream.get_Encryption()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.EncryptionSetEncryptionAlgorithm">
            <summary>Imposta shim di ZipOutputStream.set_Encryption(EncryptionAlgorithm value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.Flush">
            <summary>Imposta shim di ZipOutputStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.IgnoreCaseGet">
            <summary>Imposta shim di ZipOutputStream.get_IgnoreCase()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.IgnoreCaseSetBoolean">
            <summary>Imposta shim di ZipOutputStream.set_IgnoreCase(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.InsureUniqueEntryZipEntry">
            <summary>Imposta shim di ZipOutputStream.InsureUniqueEntry(ZipEntry ze1)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.LengthGet">
            <summary>Imposta shim di ZipOutputStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.NameGet">
            <summary>Imposta shim di ZipOutputStream.get_Name()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.OutputStreamGet">
            <summary>Imposta shim di ZipOutputStream.get_OutputStream()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.OutputUsedZip64Get">
            <summary>Imposta shim di ZipOutputStream.get_OutputUsedZip64()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.ParallelDeflateMaxBufferPairsGet">
            <summary>Imposta shim di ZipOutputStream.get_ParallelDeflateMaxBufferPairs()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.ParallelDeflateMaxBufferPairsSetInt32">
            <summary>Imposta shim di ZipOutputStream.set_ParallelDeflateMaxBufferPairs(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.ParallelDeflateThresholdGet">
            <summary>Imposta shim di ZipOutputStream.get_ParallelDeflateThreshold()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.ParallelDeflateThresholdSetInt64">
            <summary>Imposta shim di ZipOutputStream.set_ParallelDeflateThreshold(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.PasswordSetString">
            <summary>Imposta shim di ZipOutputStream.set_Password(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.PositionGet">
            <summary>Imposta shim di ZipOutputStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.PositionSetInt64">
            <summary>Imposta shim di ZipOutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.PutNextEntryString">
            <summary>Imposta shim di ZipOutputStream.PutNextEntry(String entryName)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.ReadByteArrayInt32Int32">
            <summary>Imposta shim di ZipOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.SeekInt64SeekOrigin">
            <summary>Imposta shim di ZipOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.SetLengthInt64">
            <summary>Imposta shim di ZipOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.StrategyGet">
            <summary>Imposta shim di ZipOutputStream.get_Strategy()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.StrategySetCompressionStrategy">
            <summary>Imposta shim di ZipOutputStream.set_Strategy(CompressionStrategy value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.TimestampGet">
            <summary>Imposta shim di ZipOutputStream.get_Timestamp()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.TimestampSetZipEntryTimestamp">
            <summary>Imposta shim di ZipOutputStream.set_Timestamp(ZipEntryTimestamp value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.ToString">
            <summary>Imposta shim di ZipOutputStream.ToString()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.UseUnicodeAsNecessaryGet">
            <summary>Imposta shim di ZipOutputStream.get_UseUnicodeAsNecessary()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.UseUnicodeAsNecessarySetBoolean">
            <summary>Imposta shim di ZipOutputStream.set_UseUnicodeAsNecessary(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream.WriteByteArrayInt32Int32">
            <summary>Imposta shim di ZipOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream._FinishCurrentEntry">
            <summary>Imposta shim di ZipOutputStream._FinishCurrentEntry()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream._InitStreamBooleanString">
            <summary>Imposta shim di ZipOutputStream._Init(Stream stream, Boolean leaveOpen, String name)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipOutputStream._InitiateCurrentEntryBoolean">
            <summary>Imposta shim di ZipOutputStream._InitiateCurrentEntry(Boolean finishing)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimZipProgressEventArgs">
            <summary>Tipo shim di Ionic.Zip.ZipProgressEventArgs</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipProgressEventArgs.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipProgressEventArgs.#ctor(Ionic.Zip.ZipProgressEventArgs)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.ShimZipProgressEventArgs.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.AllInstances.ArchiveNameGet">
            <summary>Imposta shim di ZipProgressEventArgs.get_ArchiveName()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.AllInstances.ArchiveNameSetString">
            <summary>Imposta shim di ZipProgressEventArgs.set_ArchiveName(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.AllInstances.BytesTransferredGet">
            <summary>Imposta shim di ZipProgressEventArgs.get_BytesTransferred()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.AllInstances.BytesTransferredSetInt64">
            <summary>Imposta shim di ZipProgressEventArgs.set_BytesTransferred(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.AllInstances.CancelGet">
            <summary>Imposta shim di ZipProgressEventArgs.get_Cancel()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.AllInstances.CancelSetBoolean">
            <summary>Imposta shim di ZipProgressEventArgs.set_Cancel(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.AllInstances.CurrentEntryGet">
            <summary>Imposta shim di ZipProgressEventArgs.get_CurrentEntry()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.AllInstances.CurrentEntrySetZipEntry">
            <summary>Imposta shim di ZipProgressEventArgs.set_CurrentEntry(ZipEntry value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.AllInstances.EntriesTotalGet">
            <summary>Imposta shim di ZipProgressEventArgs.get_EntriesTotal()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.AllInstances.EntriesTotalSetInt32">
            <summary>Imposta shim di ZipProgressEventArgs.set_EntriesTotal(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.AllInstances.EventTypeGet">
            <summary>Imposta shim di ZipProgressEventArgs.get_EventType()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.AllInstances.EventTypeSetZipProgressEventType">
            <summary>Imposta shim di ZipProgressEventArgs.set_EventType(ZipProgressEventType value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.AllInstances.TotalBytesToTransferGet">
            <summary>Imposta shim di ZipProgressEventArgs.get_TotalBytesToTransfer()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.AllInstances.TotalBytesToTransferSetInt64">
            <summary>Imposta shim di ZipProgressEventArgs.set_TotalBytesToTransfer(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.ArchiveNameGet">
            <summary>Imposta shim di ZipProgressEventArgs.get_ArchiveName()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.ArchiveNameSetString">
            <summary>Imposta shim di ZipProgressEventArgs.set_ArchiveName(String value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipProgressEventArgs.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.ShimZipProgressEventArgs.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.BytesTransferredGet">
            <summary>Imposta shim di ZipProgressEventArgs.get_BytesTransferred()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.BytesTransferredSetInt64">
            <summary>Imposta shim di ZipProgressEventArgs.set_BytesTransferred(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.CancelGet">
            <summary>Imposta shim di ZipProgressEventArgs.get_Cancel()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.CancelSetBoolean">
            <summary>Imposta shim di ZipProgressEventArgs.set_Cancel(Boolean value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.Constructor">
            <summary>Imposta shim di ZipProgressEventArgs.ZipProgressEventArgs()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.ConstructorStringZipProgressEventType">
            <summary>Imposta shim di ZipProgressEventArgs.ZipProgressEventArgs(String archiveName, ZipProgressEventType flavor)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.CurrentEntryGet">
            <summary>Imposta shim di ZipProgressEventArgs.get_CurrentEntry()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.CurrentEntrySetZipEntry">
            <summary>Imposta shim di ZipProgressEventArgs.set_CurrentEntry(ZipEntry value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.EntriesTotalGet">
            <summary>Imposta shim di ZipProgressEventArgs.get_EntriesTotal()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.EntriesTotalSetInt32">
            <summary>Imposta shim di ZipProgressEventArgs.set_EntriesTotal(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.EventTypeGet">
            <summary>Imposta shim di ZipProgressEventArgs.get_EventType()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.EventTypeSetZipProgressEventType">
            <summary>Imposta shim di ZipProgressEventArgs.set_EventType(ZipProgressEventType value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.TotalBytesToTransferGet">
            <summary>Imposta shim di ZipProgressEventArgs.get_TotalBytesToTransfer()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.ShimZipProgressEventArgs.TotalBytesToTransferSetInt64">
            <summary>Imposta shim di ZipProgressEventArgs.set_TotalBytesToTransfer(Int64 value)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.StubBadCrcException">
            <summary>Tipo stub di Ionic.Zip.BadCrcException</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadCrcException.#ctor">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadCrcException.#ctor(System.String)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadCrcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadCrcException.AttachBackingFieldToHelpLink">
            <summary>Connette i delegati da emulare StubBadCrcException.HelpLink come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadCrcException.AttachBackingFieldToSource">
            <summary>Connette i delegati da emulare StubBadCrcException.Source come proprietà con un campo sottostante.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadCrcException.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadCrcException.Data">
            <summary>Imposta stub di Exception.get_Data()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadCrcException.DataGet">
            <summary>Imposta stub di Exception.get_Data()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadCrcException.GetBaseException">
            <summary>Imposta stub di Exception.GetBaseException()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadCrcException.GetBaseException01">
            <summary>Imposta stub di Exception.GetBaseException()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadCrcException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Imposta stub di Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadCrcException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Imposta stub di Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadCrcException.HelpLink">
            <summary>Imposta stub di Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadCrcException.HelpLinkGet">
            <summary>Imposta stub di Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadCrcException.HelpLinkSetString">
            <summary>Imposta stub di Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadCrcException.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubBadCrcException</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadCrcException.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadCrcException.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadCrcException.Message">
            <summary>Imposta stub di Exception.get_Message()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadCrcException.MessageGet">
            <summary>Imposta stub di Exception.get_Message()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadCrcException.Source">
            <summary>Imposta stub di Exception.get_Source()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadCrcException.SourceGet">
            <summary>Imposta stub di Exception.get_Source()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadCrcException.SourceSetString">
            <summary>Imposta stub di Exception.set_Source(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadCrcException.StackTrace">
            <summary>Imposta stub di Exception.get_StackTrace()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadCrcException.StackTraceGet">
            <summary>Imposta stub di Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadCrcException.ToString">
            <summary>Imposta stub di Exception.ToString()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadCrcException.ToString01">
            <summary>Imposta stub di Exception.ToString()</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.StubBadPasswordException">
            <summary>Tipo stub di Ionic.Zip.BadPasswordException</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadPasswordException.#ctor">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadPasswordException.#ctor(System.String)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadPasswordException.#ctor(System.String,System.Exception)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadPasswordException.AttachBackingFieldToHelpLink">
            <summary>Connette i delegati da emulare StubBadPasswordException.HelpLink come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadPasswordException.AttachBackingFieldToSource">
            <summary>Connette i delegati da emulare StubBadPasswordException.Source come proprietà con un campo sottostante.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadPasswordException.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadPasswordException.Data">
            <summary>Imposta stub di Exception.get_Data()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadPasswordException.DataGet">
            <summary>Imposta stub di Exception.get_Data()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadPasswordException.GetBaseException">
            <summary>Imposta stub di Exception.GetBaseException()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadPasswordException.GetBaseException01">
            <summary>Imposta stub di Exception.GetBaseException()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadPasswordException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Imposta stub di Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadPasswordException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Imposta stub di Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadPasswordException.HelpLink">
            <summary>Imposta stub di Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadPasswordException.HelpLinkGet">
            <summary>Imposta stub di Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadPasswordException.HelpLinkSetString">
            <summary>Imposta stub di Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadPasswordException.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubBadPasswordException</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadPasswordException.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadPasswordException.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadPasswordException.Message">
            <summary>Imposta stub di Exception.get_Message()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadPasswordException.MessageGet">
            <summary>Imposta stub di Exception.get_Message()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadPasswordException.Source">
            <summary>Imposta stub di Exception.get_Source()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadPasswordException.SourceGet">
            <summary>Imposta stub di Exception.get_Source()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadPasswordException.SourceSetString">
            <summary>Imposta stub di Exception.set_Source(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadPasswordException.StackTrace">
            <summary>Imposta stub di Exception.get_StackTrace()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadPasswordException.StackTraceGet">
            <summary>Imposta stub di Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadPasswordException.ToString">
            <summary>Imposta stub di Exception.ToString()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadPasswordException.ToString01">
            <summary>Imposta stub di Exception.ToString()</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.StubBadReadException">
            <summary>Tipo stub di Ionic.Zip.BadReadException</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadReadException.#ctor">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadReadException.#ctor(System.String)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadReadException.#ctor(System.String,System.Exception)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadReadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadReadException.AttachBackingFieldToHelpLink">
            <summary>Connette i delegati da emulare StubBadReadException.HelpLink come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadReadException.AttachBackingFieldToSource">
            <summary>Connette i delegati da emulare StubBadReadException.Source come proprietà con un campo sottostante.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadReadException.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadReadException.Data">
            <summary>Imposta stub di Exception.get_Data()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadReadException.DataGet">
            <summary>Imposta stub di Exception.get_Data()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadReadException.GetBaseException">
            <summary>Imposta stub di Exception.GetBaseException()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadReadException.GetBaseException01">
            <summary>Imposta stub di Exception.GetBaseException()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadReadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Imposta stub di Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadReadException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Imposta stub di Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadReadException.HelpLink">
            <summary>Imposta stub di Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadReadException.HelpLinkGet">
            <summary>Imposta stub di Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadReadException.HelpLinkSetString">
            <summary>Imposta stub di Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadReadException.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubBadReadException</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadReadException.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadReadException.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadReadException.Message">
            <summary>Imposta stub di Exception.get_Message()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadReadException.MessageGet">
            <summary>Imposta stub di Exception.get_Message()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadReadException.Source">
            <summary>Imposta stub di Exception.get_Source()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadReadException.SourceGet">
            <summary>Imposta stub di Exception.get_Source()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadReadException.SourceSetString">
            <summary>Imposta stub di Exception.set_Source(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadReadException.StackTrace">
            <summary>Imposta stub di Exception.get_StackTrace()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadReadException.StackTraceGet">
            <summary>Imposta stub di Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadReadException.ToString">
            <summary>Imposta stub di Exception.ToString()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadReadException.ToString01">
            <summary>Imposta stub di Exception.ToString()</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.StubBadStateException">
            <summary>Tipo stub di Ionic.Zip.BadStateException</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadStateException.#ctor">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadStateException.#ctor(System.String)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadStateException.#ctor(System.String,System.Exception)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadStateException.AttachBackingFieldToHelpLink">
            <summary>Connette i delegati da emulare StubBadStateException.HelpLink come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadStateException.AttachBackingFieldToSource">
            <summary>Connette i delegati da emulare StubBadStateException.Source come proprietà con un campo sottostante.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadStateException.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadStateException.Data">
            <summary>Imposta stub di Exception.get_Data()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadStateException.DataGet">
            <summary>Imposta stub di Exception.get_Data()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadStateException.GetBaseException">
            <summary>Imposta stub di Exception.GetBaseException()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadStateException.GetBaseException01">
            <summary>Imposta stub di Exception.GetBaseException()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadStateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Imposta stub di Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadStateException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Imposta stub di Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadStateException.HelpLink">
            <summary>Imposta stub di Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadStateException.HelpLinkGet">
            <summary>Imposta stub di Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadStateException.HelpLinkSetString">
            <summary>Imposta stub di Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadStateException.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubBadStateException</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadStateException.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadStateException.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadStateException.Message">
            <summary>Imposta stub di Exception.get_Message()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadStateException.MessageGet">
            <summary>Imposta stub di Exception.get_Message()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadStateException.Source">
            <summary>Imposta stub di Exception.get_Source()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadStateException.SourceGet">
            <summary>Imposta stub di Exception.get_Source()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadStateException.SourceSetString">
            <summary>Imposta stub di Exception.set_Source(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubBadStateException.StackTrace">
            <summary>Imposta stub di Exception.get_StackTrace()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadStateException.StackTraceGet">
            <summary>Imposta stub di Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubBadStateException.ToString">
            <summary>Imposta stub di Exception.ToString()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubBadStateException.ToString01">
            <summary>Imposta stub di Exception.ToString()</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.StubComHelper">
            <summary>Tipo stub di Ionic.Zip.ComHelper</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubComHelper.#ctor">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubComHelper.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubComHelper.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubComHelper</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubComHelper.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubComHelper.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.StubCountingStream">
            <summary>Tipo stub di Ionic.Zip.CountingStream</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.#ctor(System.IO.Stream)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.AttachBackingFieldToPosition">
            <summary>Connette i delegati da emulare StubCountingStream.Position come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.AttachBackingFieldToReadTimeout">
            <summary>Connette i delegati da emulare StubCountingStream.ReadTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.AttachBackingFieldToWriteTimeout">
            <summary>Connette i delegati da emulare StubCountingStream.WriteTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubCountingStream.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubCountingStream.CanRead">
            <summary>Imposta stub di CountingStream.get_CanRead()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.CanReadGet">
            <summary>Imposta stub di CountingStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubCountingStream.CanSeek">
            <summary>Imposta stub di CountingStream.get_CanSeek()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.CanSeekGet">
            <summary>Imposta stub di CountingStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubCountingStream.CanTimeout">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.CanTimeoutGet">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubCountingStream.CanWrite">
            <summary>Imposta stub di CountingStream.get_CanWrite()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.CanWriteGet">
            <summary>Imposta stub di CountingStream.get_CanWrite()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.Close">
            <summary>Imposta stub di Stream.Close()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.Close01">
            <summary>Imposta stub di Stream.Close()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.CreateWaitHandle">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.CreateWaitHandle01">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.Dispose(System.Boolean)">
            <summary>Imposta stub di Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.DisposeBoolean">
            <summary>Imposta stub di Stream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.EndRead(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.EndReadIAsyncResult">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.EndWrite(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.EndWriteIAsyncResult">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.Flush">
            <summary>Imposta stub di CountingStream.Flush()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.Flush01">
            <summary>Imposta stub di CountingStream.Flush()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubCountingStream</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubCountingStream.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubCountingStream.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubCountingStream.Length">
            <summary>Imposta stub di CountingStream.get_Length()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.LengthGet">
            <summary>Imposta stub di CountingStream.get_Length()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.ObjectInvariant">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.ObjectInvariant01">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubCountingStream.Position">
            <summary>Imposta stub di CountingStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.PositionGet">
            <summary>Imposta stub di CountingStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.PositionSetInt64">
            <summary>Imposta stub di CountingStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di CountingStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.ReadByte">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.ReadByte01">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.ReadByteArrayInt32Int32">
            <summary>Imposta stub di CountingStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubCountingStream.ReadTimeout">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.ReadTimeoutGet">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.ReadTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Imposta stub di CountingStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.SeekInt64SeekOrigin">
            <summary>Imposta stub di CountingStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.SetLength(System.Int64)">
            <summary>Imposta stub di CountingStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.SetLengthInt64">
            <summary>Imposta stub di CountingStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di CountingStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubCountingStream.WriteByte(System.Byte)">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.WriteByteArrayInt32Int32">
            <summary>Imposta stub di CountingStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.WriteByteByte">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubCountingStream.WriteTimeout">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.WriteTimeoutGet">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubCountingStream.WriteTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.StubReadOptions">
            <summary>Tipo stub di Ionic.Zip.ReadOptions</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubReadOptions.#ctor">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubReadOptions.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubReadOptions.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubReadOptions</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubReadOptions.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubReadOptions.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.StubSelfExtractorSaveOptions">
            <summary>Tipo stub di Ionic.Zip.SelfExtractorSaveOptions</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubSelfExtractorSaveOptions.#ctor">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubSelfExtractorSaveOptions.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubSelfExtractorSaveOptions.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubSelfExtractorSaveOptions</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubSelfExtractorSaveOptions.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubSelfExtractorSaveOptions.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.StubSfxGenerationException">
            <summary>Tipo stub di Ionic.Zip.SfxGenerationException</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubSfxGenerationException.#ctor">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubSfxGenerationException.#ctor(System.String)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubSfxGenerationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubSfxGenerationException.AttachBackingFieldToHelpLink">
            <summary>Connette i delegati da emulare StubSfxGenerationException.HelpLink come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubSfxGenerationException.AttachBackingFieldToSource">
            <summary>Connette i delegati da emulare StubSfxGenerationException.Source come proprietà con un campo sottostante.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubSfxGenerationException.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubSfxGenerationException.Data">
            <summary>Imposta stub di Exception.get_Data()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubSfxGenerationException.DataGet">
            <summary>Imposta stub di Exception.get_Data()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubSfxGenerationException.GetBaseException">
            <summary>Imposta stub di Exception.GetBaseException()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubSfxGenerationException.GetBaseException01">
            <summary>Imposta stub di Exception.GetBaseException()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubSfxGenerationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Imposta stub di Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubSfxGenerationException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Imposta stub di Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubSfxGenerationException.HelpLink">
            <summary>Imposta stub di Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubSfxGenerationException.HelpLinkGet">
            <summary>Imposta stub di Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubSfxGenerationException.HelpLinkSetString">
            <summary>Imposta stub di Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubSfxGenerationException.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubSfxGenerationException</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubSfxGenerationException.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubSfxGenerationException.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubSfxGenerationException.Message">
            <summary>Imposta stub di Exception.get_Message()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubSfxGenerationException.MessageGet">
            <summary>Imposta stub di Exception.get_Message()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubSfxGenerationException.Source">
            <summary>Imposta stub di Exception.get_Source()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubSfxGenerationException.SourceGet">
            <summary>Imposta stub di Exception.get_Source()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubSfxGenerationException.SourceSetString">
            <summary>Imposta stub di Exception.set_Source(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubSfxGenerationException.StackTrace">
            <summary>Imposta stub di Exception.get_StackTrace()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubSfxGenerationException.StackTraceGet">
            <summary>Imposta stub di Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubSfxGenerationException.ToString">
            <summary>Imposta stub di Exception.ToString()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubSfxGenerationException.ToString01">
            <summary>Imposta stub di Exception.ToString()</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.StubZipException">
            <summary>Tipo stub di Ionic.Zip.ZipException</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipException.#ctor">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipException.#ctor(System.String)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipException.#ctor(System.String,System.Exception)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipException.AttachBackingFieldToHelpLink">
            <summary>Connette i delegati da emulare StubZipException.HelpLink come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipException.AttachBackingFieldToSource">
            <summary>Connette i delegati da emulare StubZipException.Source come proprietà con un campo sottostante.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipException.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipException.Data">
            <summary>Imposta stub di Exception.get_Data()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipException.DataGet">
            <summary>Imposta stub di Exception.get_Data()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipException.GetBaseException">
            <summary>Imposta stub di Exception.GetBaseException()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipException.GetBaseException01">
            <summary>Imposta stub di Exception.GetBaseException()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Imposta stub di Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Imposta stub di Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipException.HelpLink">
            <summary>Imposta stub di Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipException.HelpLinkGet">
            <summary>Imposta stub di Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipException.HelpLinkSetString">
            <summary>Imposta stub di Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipException.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubZipException</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipException.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipException.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipException.Message">
            <summary>Imposta stub di Exception.get_Message()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipException.MessageGet">
            <summary>Imposta stub di Exception.get_Message()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipException.Source">
            <summary>Imposta stub di Exception.get_Source()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipException.SourceGet">
            <summary>Imposta stub di Exception.get_Source()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipException.SourceSetString">
            <summary>Imposta stub di Exception.set_Source(String value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipException.StackTrace">
            <summary>Imposta stub di Exception.get_StackTrace()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipException.StackTraceGet">
            <summary>Imposta stub di Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipException.ToString">
            <summary>Imposta stub di Exception.ToString()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipException.ToString01">
            <summary>Imposta stub di Exception.ToString()</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.StubZipFile">
            <summary>Tipo stub di Ionic.Zip.ZipFile</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipFile.#ctor">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipFile.#ctor(System.String)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipFile.#ctor(System.Text.Encoding)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipFile.#ctor(System.String,System.IO.TextWriter)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipFile.#ctor(System.String,System.Text.Encoding)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipFile.#ctor(System.String,System.IO.TextWriter,System.Text.Encoding)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipFile.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipFile.Dispose(System.Boolean)">
            <summary>Imposta stub di ZipFile.Dispose(Boolean disposeManagedResources)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipFile.DisposeBoolean">
            <summary>Imposta stub di ZipFile.Dispose(Boolean disposeManagedResources)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipFile.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubZipFile</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipFile.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipFile.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipFile.ToString">
            <summary>Imposta stub di ZipFile.ToString()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipFile.ToString01">
            <summary>Imposta stub di ZipFile.ToString()</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.StubZipInputStream">
            <summary>Tipo stub di Ionic.Zip.ZipInputStream</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.#ctor(System.String)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.#ctor(System.IO.Stream)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.AttachBackingFieldToPosition">
            <summary>Connette i delegati da emulare StubZipInputStream.Position come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.AttachBackingFieldToReadTimeout">
            <summary>Connette i delegati da emulare StubZipInputStream.ReadTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.AttachBackingFieldToWriteTimeout">
            <summary>Connette i delegati da emulare StubZipInputStream.WriteTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipInputStream.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipInputStream.CanRead">
            <summary>Imposta stub di ZipInputStream.get_CanRead()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.CanReadGet">
            <summary>Imposta stub di ZipInputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipInputStream.CanSeek">
            <summary>Imposta stub di ZipInputStream.get_CanSeek()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.CanSeekGet">
            <summary>Imposta stub di ZipInputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipInputStream.CanTimeout">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.CanTimeoutGet">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipInputStream.CanWrite">
            <summary>Imposta stub di ZipInputStream.get_CanWrite()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.CanWriteGet">
            <summary>Imposta stub di ZipInputStream.get_CanWrite()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.Close">
            <summary>Imposta stub di Stream.Close()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.Close01">
            <summary>Imposta stub di Stream.Close()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.CreateWaitHandle">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.CreateWaitHandle01">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.Dispose(System.Boolean)">
            <summary>Imposta stub di ZipInputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.DisposeBoolean">
            <summary>Imposta stub di ZipInputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.EndRead(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.EndReadIAsyncResult">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.EndWrite(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.EndWriteIAsyncResult">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.Flush">
            <summary>Imposta stub di ZipInputStream.Flush()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.Flush01">
            <summary>Imposta stub di ZipInputStream.Flush()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubZipInputStream</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipInputStream.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipInputStream.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipInputStream.Length">
            <summary>Imposta stub di ZipInputStream.get_Length()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.LengthGet">
            <summary>Imposta stub di ZipInputStream.get_Length()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.ObjectInvariant">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.ObjectInvariant01">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipInputStream.Position">
            <summary>Imposta stub di ZipInputStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.PositionGet">
            <summary>Imposta stub di ZipInputStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.PositionSetInt64">
            <summary>Imposta stub di ZipInputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di ZipInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.ReadByte">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.ReadByte01">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.ReadByteArrayInt32Int32">
            <summary>Imposta stub di ZipInputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipInputStream.ReadTimeout">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.ReadTimeoutGet">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.ReadTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Imposta stub di ZipInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.SeekInt64SeekOrigin">
            <summary>Imposta stub di ZipInputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.SetLength(System.Int64)">
            <summary>Imposta stub di ZipInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.SetLengthInt64">
            <summary>Imposta stub di ZipInputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.ToString">
            <summary>Imposta stub di ZipInputStream.ToString()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.ToString01">
            <summary>Imposta stub di ZipInputStream.ToString()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di ZipInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipInputStream.WriteByte(System.Byte)">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.WriteByteArrayInt32Int32">
            <summary>Imposta stub di ZipInputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.WriteByteByte">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipInputStream.WriteTimeout">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.WriteTimeoutGet">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipInputStream.WriteTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="T:Ionic.Zip.Fakes.StubZipOutputStream">
            <summary>Tipo stub di Ionic.Zip.ZipOutputStream</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.#ctor(System.String)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.#ctor(System.IO.Stream)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.AttachBackingFieldToPosition">
            <summary>Connette i delegati da emulare StubZipOutputStream.Position come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.AttachBackingFieldToReadTimeout">
            <summary>Connette i delegati da emulare StubZipOutputStream.ReadTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.AttachBackingFieldToWriteTimeout">
            <summary>Connette i delegati da emulare StubZipOutputStream.WriteTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipOutputStream.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipOutputStream.CanRead">
            <summary>Imposta stub di ZipOutputStream.get_CanRead()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.CanReadGet">
            <summary>Imposta stub di ZipOutputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipOutputStream.CanSeek">
            <summary>Imposta stub di ZipOutputStream.get_CanSeek()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.CanSeekGet">
            <summary>Imposta stub di ZipOutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipOutputStream.CanTimeout">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.CanTimeoutGet">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipOutputStream.CanWrite">
            <summary>Imposta stub di ZipOutputStream.get_CanWrite()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.CanWriteGet">
            <summary>Imposta stub di ZipOutputStream.get_CanWrite()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.Close">
            <summary>Imposta stub di Stream.Close()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.Close01">
            <summary>Imposta stub di Stream.Close()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.CreateWaitHandle">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.CreateWaitHandle01">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.Dispose(System.Boolean)">
            <summary>Imposta stub di ZipOutputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.DisposeBoolean">
            <summary>Imposta stub di ZipOutputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.EndRead(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.EndReadIAsyncResult">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.EndWrite(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.EndWriteIAsyncResult">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.Flush">
            <summary>Imposta stub di ZipOutputStream.Flush()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.Flush01">
            <summary>Imposta stub di ZipOutputStream.Flush()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubZipOutputStream</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipOutputStream.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipOutputStream.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipOutputStream.Length">
            <summary>Imposta stub di ZipOutputStream.get_Length()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.LengthGet">
            <summary>Imposta stub di ZipOutputStream.get_Length()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.ObjectInvariant">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.ObjectInvariant01">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipOutputStream.Position">
            <summary>Imposta stub di ZipOutputStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.PositionGet">
            <summary>Imposta stub di ZipOutputStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.PositionSetInt64">
            <summary>Imposta stub di ZipOutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di ZipOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.ReadByte">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.ReadByte01">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.ReadByteArrayInt32Int32">
            <summary>Imposta stub di ZipOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipOutputStream.ReadTimeout">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.ReadTimeoutGet">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.ReadTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Imposta stub di ZipOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.SeekInt64SeekOrigin">
            <summary>Imposta stub di ZipOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.SetLength(System.Int64)">
            <summary>Imposta stub di ZipOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.SetLengthInt64">
            <summary>Imposta stub di ZipOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.ToString">
            <summary>Imposta stub di ZipOutputStream.ToString()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.ToString01">
            <summary>Imposta stub di ZipOutputStream.ToString()</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di ZipOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zip.Fakes.StubZipOutputStream.WriteByte(System.Byte)">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.WriteByteArrayInt32Int32">
            <summary>Imposta stub di ZipOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.WriteByteByte">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="P:Ionic.Zip.Fakes.StubZipOutputStream.WriteTimeout">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.WriteTimeoutGet">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Zip.Fakes.StubZipOutputStream.WriteTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.ShimAdler">
            <summary>Tipo shim di Ionic.Zlib.Adler</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimAdler.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimAdler.#ctor(Ionic.Zlib.Adler)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimAdler.Adler32UInt32ByteArrayInt32Int32">
            <summary>Imposta shim di Adler.Adler32(UInt32 adler, Byte[] buf, Int32 index, Int32 len)</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.ShimAdler.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimAdler.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimAdler.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimAdler.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimAdler.Constructor">
            <summary>Imposta shim di Adler.Adler()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimAdler.StaticConstructor">
            <summary>Imposta shim di Adler.Adler()</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.ShimDeflateStream">
            <summary>Tipo shim di Ionic.Zlib.DeflateStream</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimDeflateStream.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimDeflateStream.#ctor(Ionic.Zlib.DeflateStream)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.BufferSizeGet">
            <summary>Imposta shim di DeflateStream.get_BufferSize()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.BufferSizeSetInt32">
            <summary>Imposta shim di DeflateStream.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.CanReadGet">
            <summary>Imposta shim di DeflateStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.CanSeekGet">
            <summary>Imposta shim di DeflateStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.CanWriteGet">
            <summary>Imposta shim di DeflateStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.DisposeBoolean">
            <summary>Imposta shim di DeflateStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.Flush">
            <summary>Imposta shim di DeflateStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.FlushModeGet">
            <summary>Imposta shim di DeflateStream.get_FlushMode()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.FlushModeSetFlushType">
            <summary>Imposta shim di DeflateStream.set_FlushMode(FlushType value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.LengthGet">
            <summary>Imposta shim di DeflateStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.PositionGet">
            <summary>Imposta shim di DeflateStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.PositionSetInt64">
            <summary>Imposta shim di DeflateStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Imposta shim di DeflateStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Imposta shim di DeflateStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.SetLengthInt64">
            <summary>Imposta shim di DeflateStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.StrategyGet">
            <summary>Imposta shim di DeflateStream.get_Strategy()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.StrategySetCompressionStrategy">
            <summary>Imposta shim di DeflateStream.set_Strategy(CompressionStrategy value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.TotalInGet">
            <summary>Imposta shim di DeflateStream.get_TotalIn()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.TotalOutGet">
            <summary>Imposta shim di DeflateStream.get_TotalOut()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Imposta shim di DeflateStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimDeflateStream.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimDeflateStream.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimDeflateStream.Bind(System.IDisposable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.BufferSizeGet">
            <summary>Imposta shim di DeflateStream.get_BufferSize()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.BufferSizeSetInt32">
            <summary>Imposta shim di DeflateStream.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.CanReadGet">
            <summary>Imposta shim di DeflateStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.CanSeekGet">
            <summary>Imposta shim di DeflateStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.CanWriteGet">
            <summary>Imposta shim di DeflateStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.CompressBufferByteArray">
            <summary>Imposta shim di DeflateStream.CompressBuffer(Byte[] b)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.CompressStringString">
            <summary>Imposta shim di DeflateStream.CompressString(String s)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.ConstructorStreamCompressionMode">
            <summary>Imposta shim di DeflateStream.DeflateStream(Stream stream, CompressionMode mode)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.ConstructorStreamCompressionModeBoolean">
            <summary>Imposta shim di DeflateStream.DeflateStream(Stream stream, CompressionMode mode, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.ConstructorStreamCompressionModeCompressionLevel">
            <summary>Imposta shim di DeflateStream.DeflateStream(Stream stream, CompressionMode mode, CompressionLevel level)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.ConstructorStreamCompressionModeCompressionLevelBoolean">
            <summary>Imposta shim di DeflateStream.DeflateStream(Stream stream, CompressionMode mode, CompressionLevel level, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.DisposeBoolean">
            <summary>Imposta shim di DeflateStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.Flush">
            <summary>Imposta shim di DeflateStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.FlushModeGet">
            <summary>Imposta shim di DeflateStream.get_FlushMode()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.FlushModeSetFlushType">
            <summary>Imposta shim di DeflateStream.set_FlushMode(FlushType value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.LengthGet">
            <summary>Imposta shim di DeflateStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.PositionGet">
            <summary>Imposta shim di DeflateStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.PositionSetInt64">
            <summary>Imposta shim di DeflateStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.ReadByteArrayInt32Int32">
            <summary>Imposta shim di DeflateStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.SeekInt64SeekOrigin">
            <summary>Imposta shim di DeflateStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.SetLengthInt64">
            <summary>Imposta shim di DeflateStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.StrategyGet">
            <summary>Imposta shim di DeflateStream.get_Strategy()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.StrategySetCompressionStrategy">
            <summary>Imposta shim di DeflateStream.set_Strategy(CompressionStrategy value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.TotalInGet">
            <summary>Imposta shim di DeflateStream.get_TotalIn()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.TotalOutGet">
            <summary>Imposta shim di DeflateStream.get_TotalOut()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.UncompressBufferByteArray">
            <summary>Imposta shim di DeflateStream.UncompressBuffer(Byte[] compressed)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.UncompressStringByteArray">
            <summary>Imposta shim di DeflateStream.UncompressString(Byte[] compressed)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimDeflateStream.WriteByteArrayInt32Int32">
            <summary>Imposta shim di DeflateStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.ShimGZipStream">
            <summary>Tipo shim di Ionic.Zlib.GZipStream</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimGZipStream.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimGZipStream.#ctor(Ionic.Zlib.GZipStream)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.BufferSizeGet">
            <summary>Imposta shim di GZipStream.get_BufferSize()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.BufferSizeSetInt32">
            <summary>Imposta shim di GZipStream.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.CanReadGet">
            <summary>Imposta shim di GZipStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.CanSeekGet">
            <summary>Imposta shim di GZipStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.CanWriteGet">
            <summary>Imposta shim di GZipStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.CommentGet">
            <summary>Imposta shim di GZipStream.get_Comment()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.CommentSetString">
            <summary>Imposta shim di GZipStream.set_Comment(String value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.Crc32Get">
            <summary>Imposta shim di GZipStream.get_Crc32()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.DisposeBoolean">
            <summary>Imposta shim di GZipStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.EmitHeader">
            <summary>Imposta shim di GZipStream.EmitHeader()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.FileNameGet">
            <summary>Imposta shim di GZipStream.get_FileName()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.FileNameSetString">
            <summary>Imposta shim di GZipStream.set_FileName(String value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.Flush">
            <summary>Imposta shim di GZipStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.FlushModeGet">
            <summary>Imposta shim di GZipStream.get_FlushMode()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.FlushModeSetFlushType">
            <summary>Imposta shim di GZipStream.set_FlushMode(FlushType value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.LengthGet">
            <summary>Imposta shim di GZipStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.PositionGet">
            <summary>Imposta shim di GZipStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.PositionSetInt64">
            <summary>Imposta shim di GZipStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Imposta shim di GZipStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Imposta shim di GZipStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.SetLengthInt64">
            <summary>Imposta shim di GZipStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.TotalInGet">
            <summary>Imposta shim di GZipStream.get_TotalIn()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.TotalOutGet">
            <summary>Imposta shim di GZipStream.get_TotalOut()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Imposta shim di GZipStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimGZipStream.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimGZipStream.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimGZipStream.Bind(System.IDisposable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.BufferSizeGet">
            <summary>Imposta shim di GZipStream.get_BufferSize()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.BufferSizeSetInt32">
            <summary>Imposta shim di GZipStream.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.CanReadGet">
            <summary>Imposta shim di GZipStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.CanSeekGet">
            <summary>Imposta shim di GZipStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.CanWriteGet">
            <summary>Imposta shim di GZipStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.CommentGet">
            <summary>Imposta shim di GZipStream.get_Comment()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.CommentSetString">
            <summary>Imposta shim di GZipStream.set_Comment(String value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.CompressBufferByteArray">
            <summary>Imposta shim di GZipStream.CompressBuffer(Byte[] b)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.CompressStringString">
            <summary>Imposta shim di GZipStream.CompressString(String s)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.ConstructorStreamCompressionMode">
            <summary>Imposta shim di GZipStream.GZipStream(Stream stream, CompressionMode mode)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.ConstructorStreamCompressionModeBoolean">
            <summary>Imposta shim di GZipStream.GZipStream(Stream stream, CompressionMode mode, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.ConstructorStreamCompressionModeCompressionLevel">
            <summary>Imposta shim di GZipStream.GZipStream(Stream stream, CompressionMode mode, CompressionLevel level)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.ConstructorStreamCompressionModeCompressionLevelBoolean">
            <summary>Imposta shim di GZipStream.GZipStream(Stream stream, CompressionMode mode, CompressionLevel level, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.Crc32Get">
            <summary>Imposta shim di GZipStream.get_Crc32()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.DisposeBoolean">
            <summary>Imposta shim di GZipStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.EmitHeader">
            <summary>Imposta shim di GZipStream.EmitHeader()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.FileNameGet">
            <summary>Imposta shim di GZipStream.get_FileName()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.FileNameSetString">
            <summary>Imposta shim di GZipStream.set_FileName(String value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.Flush">
            <summary>Imposta shim di GZipStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.FlushModeGet">
            <summary>Imposta shim di GZipStream.get_FlushMode()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.FlushModeSetFlushType">
            <summary>Imposta shim di GZipStream.set_FlushMode(FlushType value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.LengthGet">
            <summary>Imposta shim di GZipStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.PositionGet">
            <summary>Imposta shim di GZipStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.PositionSetInt64">
            <summary>Imposta shim di GZipStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.ReadByteArrayInt32Int32">
            <summary>Imposta shim di GZipStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.SeekInt64SeekOrigin">
            <summary>Imposta shim di GZipStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.SetLengthInt64">
            <summary>Imposta shim di GZipStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.StaticConstructor">
            <summary>Imposta shim di GZipStream.GZipStream()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.TotalInGet">
            <summary>Imposta shim di GZipStream.get_TotalIn()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.TotalOutGet">
            <summary>Imposta shim di GZipStream.get_TotalOut()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.UncompressBufferByteArray">
            <summary>Imposta shim di GZipStream.UncompressBuffer(Byte[] compressed)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.UncompressStringByteArray">
            <summary>Imposta shim di GZipStream.UncompressString(Byte[] compressed)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimGZipStream.WriteByteArrayInt32Int32">
            <summary>Imposta shim di GZipStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream">
            <summary>Tipo shim di Ionic.Zlib.ParallelDeflateOutputStream</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.#ctor(Ionic.Zlib.ParallelDeflateOutputStream)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.BufferSizeGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_BufferSize()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.BufferSizeSetInt32">
            <summary>Imposta shim di ParallelDeflateOutputStream.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.BytesProcessedGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_BytesProcessed()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.CanReadGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.CanSeekGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.CanWriteGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.Close">
            <summary>Imposta shim di ParallelDeflateOutputStream.Close()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.Crc32Get">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_Crc32()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.Dispose">
            <summary>Imposta shim di ParallelDeflateOutputStream.Dispose()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.DisposeBoolean">
            <summary>Imposta shim di ParallelDeflateOutputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.EmitPendingBuffersBooleanBoolean">
            <summary>Imposta shim di ParallelDeflateOutputStream.EmitPendingBuffers(Boolean doAll, Boolean mustWait)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.Flush">
            <summary>Imposta shim di ParallelDeflateOutputStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.InnerClose">
            <summary>Imposta shim di ParallelDeflateOutputStream.InnerClose()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.LengthGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.MaxBufferPairsGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_MaxBufferPairs()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.MaxBufferPairsSetInt32">
            <summary>Imposta shim di ParallelDeflateOutputStream.set_MaxBufferPairs(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.PositionGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.PositionSetInt64">
            <summary>Imposta shim di ParallelDeflateOutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Imposta shim di ParallelDeflateOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.ResetStream">
            <summary>Imposta shim di ParallelDeflateOutputStream.Reset(Stream stream)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Imposta shim di ParallelDeflateOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.SetLengthInt64">
            <summary>Imposta shim di ParallelDeflateOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.StrategyGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_Strategy()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.StrategySetCompressionStrategy">
            <summary>Imposta shim di ParallelDeflateOutputStream.set_Strategy(CompressionStrategy value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Imposta shim di ParallelDeflateOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances._DeflateOneObject">
            <summary>Imposta shim di ParallelDeflateOutputStream._DeflateOne(Object wi)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances._FlushBoolean">
            <summary>Imposta shim di ParallelDeflateOutputStream._Flush(Boolean lastInput)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances._FlushFinish">
            <summary>Imposta shim di ParallelDeflateOutputStream._FlushFinish()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.AllInstances._InitializePoolOfWorkItems">
            <summary>Imposta shim di ParallelDeflateOutputStream._InitializePoolOfWorkItems()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.Bind(System.IDisposable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.BufferSizeGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_BufferSize()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.BufferSizeSetInt32">
            <summary>Imposta shim di ParallelDeflateOutputStream.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.BytesProcessedGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_BytesProcessed()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.CanReadGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.CanSeekGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.CanWriteGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.Close">
            <summary>Imposta shim di ParallelDeflateOutputStream.Close()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.ConstructorStream">
            <summary>Imposta shim di ParallelDeflateOutputStream.ParallelDeflateOutputStream(Stream stream)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.ConstructorStreamBoolean">
            <summary>Imposta shim di ParallelDeflateOutputStream.ParallelDeflateOutputStream(Stream stream, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.ConstructorStreamCompressionLevel">
            <summary>Imposta shim di ParallelDeflateOutputStream.ParallelDeflateOutputStream(Stream stream, CompressionLevel level)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.ConstructorStreamCompressionLevelBoolean">
            <summary>Imposta shim di ParallelDeflateOutputStream.ParallelDeflateOutputStream(Stream stream, CompressionLevel level, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.ConstructorStreamCompressionLevelCompressionStrategyBoolean">
            <summary>Imposta shim di ParallelDeflateOutputStream.ParallelDeflateOutputStream(Stream stream, CompressionLevel level, CompressionStrategy strategy, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.Crc32Get">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_Crc32()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.Dispose">
            <summary>Imposta shim di ParallelDeflateOutputStream.Dispose()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.DisposeBoolean">
            <summary>Imposta shim di ParallelDeflateOutputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.EmitPendingBuffersBooleanBoolean">
            <summary>Imposta shim di ParallelDeflateOutputStream.EmitPendingBuffers(Boolean doAll, Boolean mustWait)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.Flush">
            <summary>Imposta shim di ParallelDeflateOutputStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.InnerClose">
            <summary>Imposta shim di ParallelDeflateOutputStream.InnerClose()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.LengthGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.MaxBufferPairsGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_MaxBufferPairs()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.MaxBufferPairsSetInt32">
            <summary>Imposta shim di ParallelDeflateOutputStream.set_MaxBufferPairs(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.PositionGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.PositionSetInt64">
            <summary>Imposta shim di ParallelDeflateOutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.ReadByteArrayInt32Int32">
            <summary>Imposta shim di ParallelDeflateOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.ResetStream">
            <summary>Imposta shim di ParallelDeflateOutputStream.Reset(Stream stream)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.SeekInt64SeekOrigin">
            <summary>Imposta shim di ParallelDeflateOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.SetLengthInt64">
            <summary>Imposta shim di ParallelDeflateOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.StaticConstructor">
            <summary>Imposta shim di ParallelDeflateOutputStream.ParallelDeflateOutputStream()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.StrategyGet">
            <summary>Imposta shim di ParallelDeflateOutputStream.get_Strategy()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.StrategySetCompressionStrategy">
            <summary>Imposta shim di ParallelDeflateOutputStream.set_Strategy(CompressionStrategy value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream.WriteByteArrayInt32Int32">
            <summary>Imposta shim di ParallelDeflateOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream._DeflateOneObject">
            <summary>Imposta shim di ParallelDeflateOutputStream._DeflateOne(Object wi)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream._FlushBoolean">
            <summary>Imposta shim di ParallelDeflateOutputStream._Flush(Boolean lastInput)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream._FlushFinish">
            <summary>Imposta shim di ParallelDeflateOutputStream._FlushFinish()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimParallelDeflateOutputStream._InitializePoolOfWorkItems">
            <summary>Imposta shim di ParallelDeflateOutputStream._InitializePoolOfWorkItems()</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.ShimZlibCodec">
            <summary>Tipo shim di Ionic.Zlib.ZlibCodec</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibCodec.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibCodec.#ctor(Ionic.Zlib.ZlibCodec)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.Adler32Get">
            <summary>Imposta shim di ZlibCodec.get_Adler32()</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.Adler32Get">
            <summary>Imposta shim di ZlibCodec.get_Adler32()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.DeflateFlushType">
            <summary>Imposta shim di ZlibCodec.Deflate(FlushType flush)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.EndDeflate">
            <summary>Imposta shim di ZlibCodec.EndDeflate()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.EndInflate">
            <summary>Imposta shim di ZlibCodec.EndInflate()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.InflateFlushType">
            <summary>Imposta shim di ZlibCodec.Inflate(FlushType flush)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.InitializeDeflate">
            <summary>Imposta shim di ZlibCodec.InitializeDeflate()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.InitializeDeflateCompressionLevel">
            <summary>Imposta shim di ZlibCodec.InitializeDeflate(CompressionLevel level)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.InitializeDeflateCompressionLevelBoolean">
            <summary>Imposta shim di ZlibCodec.InitializeDeflate(CompressionLevel level, Boolean wantRfc1950Header)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.InitializeDeflateCompressionLevelInt32">
            <summary>Imposta shim di ZlibCodec.InitializeDeflate(CompressionLevel level, Int32 bits)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.InitializeDeflateCompressionLevelInt32Boolean">
            <summary>Imposta shim di ZlibCodec.InitializeDeflate(CompressionLevel level, Int32 bits, Boolean wantRfc1950Header)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.InitializeInflate">
            <summary>Imposta shim di ZlibCodec.InitializeInflate()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.InitializeInflateBoolean">
            <summary>Imposta shim di ZlibCodec.InitializeInflate(Boolean expectRfc1950Header)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.InitializeInflateInt32">
            <summary>Imposta shim di ZlibCodec.InitializeInflate(Int32 windowBits)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.InitializeInflateInt32Boolean">
            <summary>Imposta shim di ZlibCodec.InitializeInflate(Int32 windowBits, Boolean expectRfc1950Header)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.ResetDeflate">
            <summary>Imposta shim di ZlibCodec.ResetDeflate()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.SetDeflateParamsCompressionLevelCompressionStrategy">
            <summary>Imposta shim di ZlibCodec.SetDeflateParams(CompressionLevel level, CompressionStrategy strategy)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.SetDictionaryByteArray">
            <summary>Imposta shim di ZlibCodec.SetDictionary(Byte[] dictionary)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.SyncInflate">
            <summary>Imposta shim di ZlibCodec.SyncInflate()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances._InternalInitializeDeflateBoolean">
            <summary>Imposta shim di ZlibCodec._InternalInitializeDeflate(Boolean wantRfc1950Header)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.flush_pending">
            <summary>Imposta shim di ZlibCodec.flush_pending()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.AllInstances.read_bufByteArrayInt32Int32">
            <summary>Imposta shim di ZlibCodec.read_buf(Byte[] buf, Int32 start, Int32 size)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibCodec.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibCodec.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.Constructor">
            <summary>Imposta shim di ZlibCodec.ZlibCodec()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.ConstructorCompressionMode">
            <summary>Imposta shim di ZlibCodec.ZlibCodec(CompressionMode mode)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.DeflateFlushType">
            <summary>Imposta shim di ZlibCodec.Deflate(FlushType flush)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.EndDeflate">
            <summary>Imposta shim di ZlibCodec.EndDeflate()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.EndInflate">
            <summary>Imposta shim di ZlibCodec.EndInflate()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.InflateFlushType">
            <summary>Imposta shim di ZlibCodec.Inflate(FlushType flush)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.InitializeDeflate">
            <summary>Imposta shim di ZlibCodec.InitializeDeflate()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.InitializeDeflateCompressionLevel">
            <summary>Imposta shim di ZlibCodec.InitializeDeflate(CompressionLevel level)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.InitializeDeflateCompressionLevelBoolean">
            <summary>Imposta shim di ZlibCodec.InitializeDeflate(CompressionLevel level, Boolean wantRfc1950Header)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.InitializeDeflateCompressionLevelInt32">
            <summary>Imposta shim di ZlibCodec.InitializeDeflate(CompressionLevel level, Int32 bits)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.InitializeDeflateCompressionLevelInt32Boolean">
            <summary>Imposta shim di ZlibCodec.InitializeDeflate(CompressionLevel level, Int32 bits, Boolean wantRfc1950Header)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.InitializeInflate">
            <summary>Imposta shim di ZlibCodec.InitializeInflate()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.InitializeInflateBoolean">
            <summary>Imposta shim di ZlibCodec.InitializeInflate(Boolean expectRfc1950Header)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.InitializeInflateInt32">
            <summary>Imposta shim di ZlibCodec.InitializeInflate(Int32 windowBits)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.InitializeInflateInt32Boolean">
            <summary>Imposta shim di ZlibCodec.InitializeInflate(Int32 windowBits, Boolean expectRfc1950Header)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.ResetDeflate">
            <summary>Imposta shim di ZlibCodec.ResetDeflate()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.SetDeflateParamsCompressionLevelCompressionStrategy">
            <summary>Imposta shim di ZlibCodec.SetDeflateParams(CompressionLevel level, CompressionStrategy strategy)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.SetDictionaryByteArray">
            <summary>Imposta shim di ZlibCodec.SetDictionary(Byte[] dictionary)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.SyncInflate">
            <summary>Imposta shim di ZlibCodec.SyncInflate()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec._InternalInitializeDeflateBoolean">
            <summary>Imposta shim di ZlibCodec._InternalInitializeDeflate(Boolean wantRfc1950Header)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.flush_pending">
            <summary>Imposta shim di ZlibCodec.flush_pending()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibCodec.read_bufByteArrayInt32Int32">
            <summary>Imposta shim di ZlibCodec.read_buf(Byte[] buf, Int32 start, Int32 size)</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.ShimZlibConstants">
            <summary>Tipo shim di Ionic.Zlib.ZlibConstants</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibConstants.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibConstants.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibConstants.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibConstants.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.ShimZlibException">
            <summary>Tipo shim di Ionic.Zlib.ZlibException</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibException.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibException.#ctor(Ionic.Zlib.ZlibException)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.ShimZlibException.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibException.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibException.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibException.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibException.Constructor">
            <summary>Imposta shim di ZlibException.ZlibException()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibException.ConstructorString">
            <summary>Imposta shim di ZlibException.ZlibException(String s)</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.ShimZlibStream">
            <summary>Tipo shim di Ionic.Zlib.ZlibStream</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibStream.#ctor">
            <summary>Inizializza una nuova istanza di shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibStream.#ctor(Ionic.Zlib.ZlibStream)">
            <summary>Inizializza un nuovo shim per l&apos;istanza specificata</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances">
            <summary>Definisce gli shim per tutti i membri delle istanze</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.BufferSizeGet">
            <summary>Imposta shim di ZlibStream.get_BufferSize()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.BufferSizeSetInt32">
            <summary>Imposta shim di ZlibStream.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.CanReadGet">
            <summary>Imposta shim di ZlibStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.CanSeekGet">
            <summary>Imposta shim di ZlibStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.CanWriteGet">
            <summary>Imposta shim di ZlibStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.DisposeBoolean">
            <summary>Imposta shim di ZlibStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.Flush">
            <summary>Imposta shim di ZlibStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.FlushModeGet">
            <summary>Imposta shim di ZlibStream.get_FlushMode()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.FlushModeSetFlushType">
            <summary>Imposta shim di ZlibStream.set_FlushMode(FlushType value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.LengthGet">
            <summary>Imposta shim di ZlibStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.PositionGet">
            <summary>Imposta shim di ZlibStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.PositionSetInt64">
            <summary>Imposta shim di ZlibStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.ReadByteArrayInt32Int32">
            <summary>Imposta shim di ZlibStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.SeekInt64SeekOrigin">
            <summary>Imposta shim di ZlibStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.SetLengthInt64">
            <summary>Imposta shim di ZlibStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.TotalInGet">
            <summary>Imposta shim di ZlibStream.get_TotalIn()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.TotalOutGet">
            <summary>Imposta shim di ZlibStream.get_TotalOut()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.AllInstances.WriteByteArrayInt32Int32">
            <summary>Imposta shim di ZlibStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibStream.BehaveAsCurrent">
            <summary>Assegna il comportamento &apos;Current&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibStream.BehaveAsNotImplemented">
            <summary>Assegna il comportamento &apos;NotImplemented&apos; per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.Behavior">
            <summary>Assegna il comportamento per tutti i metodi del tipo sottoposto a shim</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.ShimZlibStream.Bind(System.IDisposable)">
            <summary>Associa i membri dell&apos;interfaccia allo shim.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.BufferSizeGet">
            <summary>Imposta shim di ZlibStream.get_BufferSize()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.BufferSizeSetInt32">
            <summary>Imposta shim di ZlibStream.set_BufferSize(Int32 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.CanReadGet">
            <summary>Imposta shim di ZlibStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.CanSeekGet">
            <summary>Imposta shim di ZlibStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.CanWriteGet">
            <summary>Imposta shim di ZlibStream.get_CanWrite()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.CompressBufferByteArray">
            <summary>Imposta shim di ZlibStream.CompressBuffer(Byte[] b)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.CompressStringString">
            <summary>Imposta shim di ZlibStream.CompressString(String s)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.ConstructorStreamCompressionMode">
            <summary>Imposta shim di ZlibStream.ZlibStream(Stream stream, CompressionMode mode)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.ConstructorStreamCompressionModeBoolean">
            <summary>Imposta shim di ZlibStream.ZlibStream(Stream stream, CompressionMode mode, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.ConstructorStreamCompressionModeCompressionLevel">
            <summary>Imposta shim di ZlibStream.ZlibStream(Stream stream, CompressionMode mode, CompressionLevel level)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.ConstructorStreamCompressionModeCompressionLevelBoolean">
            <summary>Imposta shim di ZlibStream.ZlibStream(Stream stream, CompressionMode mode, CompressionLevel level, Boolean leaveOpen)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.DisposeBoolean">
            <summary>Imposta shim di ZlibStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.Flush">
            <summary>Imposta shim di ZlibStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.FlushModeGet">
            <summary>Imposta shim di ZlibStream.get_FlushMode()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.FlushModeSetFlushType">
            <summary>Imposta shim di ZlibStream.set_FlushMode(FlushType value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.LengthGet">
            <summary>Imposta shim di ZlibStream.get_Length()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.PositionGet">
            <summary>Imposta shim di ZlibStream.get_Position()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.PositionSetInt64">
            <summary>Imposta shim di ZlibStream.set_Position(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.ReadByteArrayInt32Int32">
            <summary>Imposta shim di ZlibStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.SeekInt64SeekOrigin">
            <summary>Imposta shim di ZlibStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.SetLengthInt64">
            <summary>Imposta shim di ZlibStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.TotalInGet">
            <summary>Imposta shim di ZlibStream.get_TotalIn()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.TotalOutGet">
            <summary>Imposta shim di ZlibStream.get_TotalOut()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.UncompressBufferByteArray">
            <summary>Imposta shim di ZlibStream.UncompressBuffer(Byte[] compressed)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.UncompressStringByteArray">
            <summary>Imposta shim di ZlibStream.UncompressString(Byte[] compressed)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.ShimZlibStream.WriteByteArrayInt32Int32">
            <summary>Imposta shim di ZlibStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.StubDeflateStream">
            <summary>Tipo stub di Ionic.Zlib.DeflateStream</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.AttachBackingFieldToFlushMode">
            <summary>Connette i delegati da emulare StubDeflateStream.FlushMode come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.AttachBackingFieldToPosition">
            <summary>Connette i delegati da emulare StubDeflateStream.Position come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.AttachBackingFieldToReadTimeout">
            <summary>Connette i delegati da emulare StubDeflateStream.ReadTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.AttachBackingFieldToWriteTimeout">
            <summary>Connette i delegati da emulare StubDeflateStream.WriteTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubDeflateStream.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubDeflateStream.CanRead">
            <summary>Imposta stub di DeflateStream.get_CanRead()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.CanReadGet">
            <summary>Imposta stub di DeflateStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubDeflateStream.CanSeek">
            <summary>Imposta stub di DeflateStream.get_CanSeek()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.CanSeekGet">
            <summary>Imposta stub di DeflateStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubDeflateStream.CanTimeout">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.CanTimeoutGet">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubDeflateStream.CanWrite">
            <summary>Imposta stub di DeflateStream.get_CanWrite()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.CanWriteGet">
            <summary>Imposta stub di DeflateStream.get_CanWrite()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.Close">
            <summary>Imposta stub di Stream.Close()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.Close01">
            <summary>Imposta stub di Stream.Close()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.CreateWaitHandle">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.CreateWaitHandle01">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.Dispose(System.Boolean)">
            <summary>Imposta stub di DeflateStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.DisposeBoolean">
            <summary>Imposta stub di DeflateStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.EndRead(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.EndReadIAsyncResult">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.EndWrite(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.EndWriteIAsyncResult">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.Flush">
            <summary>Imposta stub di DeflateStream.Flush()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.Flush01">
            <summary>Imposta stub di DeflateStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubDeflateStream.FlushMode">
            <summary>Imposta stub di DeflateStream.get_FlushMode()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.FlushModeGet">
            <summary>Imposta stub di DeflateStream.get_FlushMode()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.FlushModeSetFlushType">
            <summary>Imposta stub di DeflateStream.set_FlushMode(FlushType value)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubDeflateStream</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubDeflateStream.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubDeflateStream.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubDeflateStream.Length">
            <summary>Imposta stub di DeflateStream.get_Length()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.LengthGet">
            <summary>Imposta stub di DeflateStream.get_Length()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.ObjectInvariant">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.ObjectInvariant01">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubDeflateStream.Position">
            <summary>Imposta stub di DeflateStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.PositionGet">
            <summary>Imposta stub di DeflateStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.PositionSetInt64">
            <summary>Imposta stub di DeflateStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di DeflateStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.ReadByte">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.ReadByte01">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.ReadByteArrayInt32Int32">
            <summary>Imposta stub di DeflateStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubDeflateStream.ReadTimeout">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.ReadTimeoutGet">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.ReadTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Imposta stub di DeflateStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.SeekInt64SeekOrigin">
            <summary>Imposta stub di DeflateStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.SetLength(System.Int64)">
            <summary>Imposta stub di DeflateStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.SetLengthInt64">
            <summary>Imposta stub di DeflateStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubDeflateStream.TotalIn">
            <summary>Imposta stub di DeflateStream.get_TotalIn()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.TotalInGet">
            <summary>Imposta stub di DeflateStream.get_TotalIn()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubDeflateStream.TotalOut">
            <summary>Imposta stub di DeflateStream.get_TotalOut()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.TotalOutGet">
            <summary>Imposta stub di DeflateStream.get_TotalOut()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di DeflateStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubDeflateStream.WriteByte(System.Byte)">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.WriteByteArrayInt32Int32">
            <summary>Imposta stub di DeflateStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.WriteByteByte">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubDeflateStream.WriteTimeout">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.WriteTimeoutGet">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubDeflateStream.WriteTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.StubGZipStream">
            <summary>Tipo stub di Ionic.Zlib.GZipStream</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.AttachBackingFieldToFlushMode">
            <summary>Connette i delegati da emulare StubGZipStream.FlushMode come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.AttachBackingFieldToPosition">
            <summary>Connette i delegati da emulare StubGZipStream.Position come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.AttachBackingFieldToReadTimeout">
            <summary>Connette i delegati da emulare StubGZipStream.ReadTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.AttachBackingFieldToWriteTimeout">
            <summary>Connette i delegati da emulare StubGZipStream.WriteTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubGZipStream.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubGZipStream.CanRead">
            <summary>Imposta stub di GZipStream.get_CanRead()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.CanReadGet">
            <summary>Imposta stub di GZipStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubGZipStream.CanSeek">
            <summary>Imposta stub di GZipStream.get_CanSeek()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.CanSeekGet">
            <summary>Imposta stub di GZipStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubGZipStream.CanTimeout">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.CanTimeoutGet">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubGZipStream.CanWrite">
            <summary>Imposta stub di GZipStream.get_CanWrite()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.CanWriteGet">
            <summary>Imposta stub di GZipStream.get_CanWrite()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.Close">
            <summary>Imposta stub di Stream.Close()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.Close01">
            <summary>Imposta stub di Stream.Close()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.CreateWaitHandle">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.CreateWaitHandle01">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.Dispose(System.Boolean)">
            <summary>Imposta stub di GZipStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.DisposeBoolean">
            <summary>Imposta stub di GZipStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.EndRead(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.EndReadIAsyncResult">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.EndWrite(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.EndWriteIAsyncResult">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.Flush">
            <summary>Imposta stub di GZipStream.Flush()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.Flush01">
            <summary>Imposta stub di GZipStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubGZipStream.FlushMode">
            <summary>Imposta stub di GZipStream.get_FlushMode()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.FlushModeGet">
            <summary>Imposta stub di GZipStream.get_FlushMode()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.FlushModeSetFlushType">
            <summary>Imposta stub di GZipStream.set_FlushMode(FlushType value)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubGZipStream</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubGZipStream.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubGZipStream.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubGZipStream.Length">
            <summary>Imposta stub di GZipStream.get_Length()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.LengthGet">
            <summary>Imposta stub di GZipStream.get_Length()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.ObjectInvariant">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.ObjectInvariant01">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubGZipStream.Position">
            <summary>Imposta stub di GZipStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.PositionGet">
            <summary>Imposta stub di GZipStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.PositionSetInt64">
            <summary>Imposta stub di GZipStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di GZipStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.ReadByte">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.ReadByte01">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.ReadByteArrayInt32Int32">
            <summary>Imposta stub di GZipStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubGZipStream.ReadTimeout">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.ReadTimeoutGet">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.ReadTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Imposta stub di GZipStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.SeekInt64SeekOrigin">
            <summary>Imposta stub di GZipStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.SetLength(System.Int64)">
            <summary>Imposta stub di GZipStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.SetLengthInt64">
            <summary>Imposta stub di GZipStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubGZipStream.TotalIn">
            <summary>Imposta stub di GZipStream.get_TotalIn()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.TotalInGet">
            <summary>Imposta stub di GZipStream.get_TotalIn()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubGZipStream.TotalOut">
            <summary>Imposta stub di GZipStream.get_TotalOut()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.TotalOutGet">
            <summary>Imposta stub di GZipStream.get_TotalOut()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di GZipStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubGZipStream.WriteByte(System.Byte)">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.WriteByteArrayInt32Int32">
            <summary>Imposta stub di GZipStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.WriteByteByte">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubGZipStream.WriteTimeout">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.WriteTimeoutGet">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubGZipStream.WriteTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream">
            <summary>Tipo stub di Ionic.Zlib.ParallelDeflateOutputStream</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.#ctor(System.IO.Stream)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionLevel)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionLevel,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionLevel,Ionic.Zlib.CompressionStrategy,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.AttachBackingFieldToPosition">
            <summary>Connette i delegati da emulare StubParallelDeflateOutputStream.Position come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.AttachBackingFieldToReadTimeout">
            <summary>Connette i delegati da emulare StubParallelDeflateOutputStream.ReadTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.AttachBackingFieldToWriteTimeout">
            <summary>Connette i delegati da emulare StubParallelDeflateOutputStream.WriteTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.CanRead">
            <summary>Imposta stub di ParallelDeflateOutputStream.get_CanRead()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.CanReadGet">
            <summary>Imposta stub di ParallelDeflateOutputStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.CanSeek">
            <summary>Imposta stub di ParallelDeflateOutputStream.get_CanSeek()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.CanSeekGet">
            <summary>Imposta stub di ParallelDeflateOutputStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.CanTimeout">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.CanTimeoutGet">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.CanWrite">
            <summary>Imposta stub di ParallelDeflateOutputStream.get_CanWrite()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.CanWriteGet">
            <summary>Imposta stub di ParallelDeflateOutputStream.get_CanWrite()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.Close">
            <summary>Imposta stub di ParallelDeflateOutputStream.Close()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.Close01">
            <summary>Imposta stub di ParallelDeflateOutputStream.Close()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.CreateWaitHandle">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.CreateWaitHandle01">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.Dispose(System.Boolean)">
            <summary>Imposta stub di ParallelDeflateOutputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.DisposeBoolean">
            <summary>Imposta stub di ParallelDeflateOutputStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.EndRead(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.EndReadIAsyncResult">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.EndWrite(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.EndWriteIAsyncResult">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.Flush">
            <summary>Imposta stub di ParallelDeflateOutputStream.Flush()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.Flush01">
            <summary>Imposta stub di ParallelDeflateOutputStream.Flush()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubParallelDeflateOutputStream</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.Length">
            <summary>Imposta stub di ParallelDeflateOutputStream.get_Length()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.LengthGet">
            <summary>Imposta stub di ParallelDeflateOutputStream.get_Length()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.ObjectInvariant">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.ObjectInvariant01">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.Position">
            <summary>Imposta stub di ParallelDeflateOutputStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.PositionGet">
            <summary>Imposta stub di ParallelDeflateOutputStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.PositionSetInt64">
            <summary>Imposta stub di ParallelDeflateOutputStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di ParallelDeflateOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.ReadByte">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.ReadByte01">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.ReadByteArrayInt32Int32">
            <summary>Imposta stub di ParallelDeflateOutputStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.ReadTimeout">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.ReadTimeoutGet">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.ReadTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Imposta stub di ParallelDeflateOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.SeekInt64SeekOrigin">
            <summary>Imposta stub di ParallelDeflateOutputStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.SetLength(System.Int64)">
            <summary>Imposta stub di ParallelDeflateOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.SetLengthInt64">
            <summary>Imposta stub di ParallelDeflateOutputStream.SetLength(Int64 value)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di ParallelDeflateOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.WriteByte(System.Byte)">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.WriteByteArrayInt32Int32">
            <summary>Imposta stub di ParallelDeflateOutputStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.WriteByteByte">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.WriteTimeout">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.WriteTimeoutGet">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubParallelDeflateOutputStream.WriteTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.StubZlibException">
            <summary>Tipo stub di Ionic.Zlib.ZlibException</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibException.#ctor">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibException.#ctor(System.String)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibException.AttachBackingFieldToHelpLink">
            <summary>Connette i delegati da emulare StubZlibException.HelpLink come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibException.AttachBackingFieldToSource">
            <summary>Connette i delegati da emulare StubZlibException.Source come proprietà con un campo sottostante.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibException.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibException.Data">
            <summary>Imposta stub di Exception.get_Data()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibException.DataGet">
            <summary>Imposta stub di Exception.get_Data()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibException.GetBaseException">
            <summary>Imposta stub di Exception.GetBaseException()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibException.GetBaseException01">
            <summary>Imposta stub di Exception.GetBaseException()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Imposta stub di Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibException.GetObjectDataSerializationInfoStreamingContext">
            <summary>Imposta stub di Exception.GetObjectData(SerializationInfo info, StreamingContext context)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibException.HelpLink">
            <summary>Imposta stub di Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibException.HelpLinkGet">
            <summary>Imposta stub di Exception.get_HelpLink()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibException.HelpLinkSetString">
            <summary>Imposta stub di Exception.set_HelpLink(String value)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibException.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubZlibException</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibException.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibException.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibException.Message">
            <summary>Imposta stub di Exception.get_Message()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibException.MessageGet">
            <summary>Imposta stub di Exception.get_Message()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibException.Source">
            <summary>Imposta stub di Exception.get_Source()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibException.SourceGet">
            <summary>Imposta stub di Exception.get_Source()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibException.SourceSetString">
            <summary>Imposta stub di Exception.set_Source(String value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibException.StackTrace">
            <summary>Imposta stub di Exception.get_StackTrace()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibException.StackTraceGet">
            <summary>Imposta stub di Exception.get_StackTrace()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibException.ToString">
            <summary>Imposta stub di Exception.ToString()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibException.ToString01">
            <summary>Imposta stub di Exception.ToString()</summary>
        </member>
        <member name="T:Ionic.Zlib.Fakes.StubZlibStream">
            <summary>Tipo stub di Ionic.Zlib.ZlibStream</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)">
            <summary>Inizializza una nuova istanza</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.AttachBackingFieldToFlushMode">
            <summary>Connette i delegati da emulare StubZlibStream.FlushMode come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.AttachBackingFieldToPosition">
            <summary>Connette i delegati da emulare StubZlibStream.Position come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.AttachBackingFieldToReadTimeout">
            <summary>Connette i delegati da emulare StubZlibStream.ReadTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.AttachBackingFieldToWriteTimeout">
            <summary>Connette i delegati da emulare StubZlibStream.WriteTimeout come proprietà con un campo sottostante.</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.BeginReadByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginRead(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.BeginWriteByteArrayInt32Int32AsyncCallbackObject">
            <summary>Imposta stub di Stream.BeginWrite(Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback, Object state)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibStream.CallBase">
            <summary>Ottiene o imposta un valore indicante se deve essere chiamato il metodo di base anziché il comportamento di fallback</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibStream.CanRead">
            <summary>Imposta stub di ZlibStream.get_CanRead()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.CanReadGet">
            <summary>Imposta stub di ZlibStream.get_CanRead()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibStream.CanSeek">
            <summary>Imposta stub di ZlibStream.get_CanSeek()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.CanSeekGet">
            <summary>Imposta stub di ZlibStream.get_CanSeek()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibStream.CanTimeout">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.CanTimeoutGet">
            <summary>Imposta stub di Stream.get_CanTimeout()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibStream.CanWrite">
            <summary>Imposta stub di ZlibStream.get_CanWrite()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.CanWriteGet">
            <summary>Imposta stub di ZlibStream.get_CanWrite()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.Close">
            <summary>Imposta stub di Stream.Close()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.Close01">
            <summary>Imposta stub di Stream.Close()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.CreateWaitHandle">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.CreateWaitHandle01">
            <summary>Imposta stub di Stream.CreateWaitHandle()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.Dispose(System.Boolean)">
            <summary>Imposta stub di ZlibStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.DisposeBoolean">
            <summary>Imposta stub di ZlibStream.Dispose(Boolean disposing)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.EndRead(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.EndReadIAsyncResult">
            <summary>Imposta stub di Stream.EndRead(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.EndWrite(System.IAsyncResult)">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.EndWriteIAsyncResult">
            <summary>Imposta stub di Stream.EndWrite(IAsyncResult asyncResult)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.Flush">
            <summary>Imposta stub di ZlibStream.Flush()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.Flush01">
            <summary>Imposta stub di ZlibStream.Flush()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibStream.FlushMode">
            <summary>Imposta stub di ZlibStream.get_FlushMode()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.FlushModeGet">
            <summary>Imposta stub di ZlibStream.get_FlushMode()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.FlushModeSetFlushType">
            <summary>Imposta stub di ZlibStream.set_FlushMode(FlushType value)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.InitializeStub">
            <summary>Inizializza una nuova istanza di type StubZlibStream</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibStream.InstanceBehavior">
            <summary>Ottiene o imposta il comportamento dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibStream.InstanceObserver">
            <summary>Ottiene o imposta l&apos;osservatore dell&apos;istanza.</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibStream.Length">
            <summary>Imposta stub di ZlibStream.get_Length()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.LengthGet">
            <summary>Imposta stub di ZlibStream.get_Length()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.ObjectInvariant">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.ObjectInvariant01">
            <summary>Imposta stub di Stream.ObjectInvariant()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibStream.Position">
            <summary>Imposta stub di ZlibStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.PositionGet">
            <summary>Imposta stub di ZlibStream.get_Position()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.PositionSetInt64">
            <summary>Imposta stub di ZlibStream.set_Position(Int64 value)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di ZlibStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.ReadByte">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.ReadByte01">
            <summary>Imposta stub di Stream.ReadByte()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.ReadByteArrayInt32Int32">
            <summary>Imposta stub di ZlibStream.Read(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibStream.ReadTimeout">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.ReadTimeoutGet">
            <summary>Imposta stub di Stream.get_ReadTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.ReadTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_ReadTimeout(Int32 value)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Imposta stub di ZlibStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.SeekInt64SeekOrigin">
            <summary>Imposta stub di ZlibStream.Seek(Int64 offset, SeekOrigin origin)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.SetLength(System.Int64)">
            <summary>Imposta stub di ZlibStream.SetLength(Int64 value)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.SetLengthInt64">
            <summary>Imposta stub di ZlibStream.SetLength(Int64 value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibStream.TotalIn">
            <summary>Imposta stub di ZlibStream.get_TotalIn()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.TotalInGet">
            <summary>Imposta stub di ZlibStream.get_TotalIn()</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibStream.TotalOut">
            <summary>Imposta stub di ZlibStream.get_TotalOut()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.TotalOutGet">
            <summary>Imposta stub di ZlibStream.get_TotalOut()</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Imposta stub di ZlibStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="M:Ionic.Zlib.Fakes.StubZlibStream.WriteByte(System.Byte)">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.WriteByteArrayInt32Int32">
            <summary>Imposta stub di ZlibStream.Write(Byte[] buffer, Int32 offset, Int32 count)</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.WriteByteByte">
            <summary>Imposta stub di Stream.WriteByte(Byte value)</summary>
        </member>
        <member name="P:Ionic.Zlib.Fakes.StubZlibStream.WriteTimeout">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.WriteTimeoutGet">
            <summary>Imposta stub di Stream.get_WriteTimeout()</summary>
        </member>
        <member name="F:Ionic.Zlib.Fakes.StubZlibStream.WriteTimeoutSetInt32">
            <summary>Imposta stub di Stream.set_WriteTimeout(Int32 value)</summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.DotNetZipDelegates">
            <summary>Contiene i delegati personalizzati utilizzati per stub e shim di DotNetZip</summary>
        </member>
    </members>
</doc>
